
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.13.0
 * Query Engine version: 361e86d0ea4987e9f53a565309b3eed797a6bcbd
 */
Prisma.prismaVersion = {
  client: "6.13.0",
  engine: "361e86d0ea4987e9f53a565309b3eed797a6bcbd"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  username: 'username',
  firstName: 'firstName',
  lastName: 'lastName',
  password: 'password',
  avatar: 'avatar',
  isActive: 'isActive',
  isVerified: 'isVerified',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lastLoginAt: 'lastLoginAt'
};

exports.Prisma.UserSessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  token: 'token',
  refreshToken: 'refreshToken',
  expiresAt: 'expiresAt',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProjectScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  path: 'path',
  version: 'version',
  engineVersion: 'engineVersion',
  userId: 'userId',
  isPublic: 'isPublic',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lastOpened: 'lastOpened',
  settings: 'settings'
};

exports.Prisma.FolderScalarFieldEnum = {
  id: 'id',
  name: 'name',
  path: 'path',
  parentId: 'parentId',
  projectId: 'projectId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SceneScalarFieldEnum = {
  id: 'id',
  name: 'name',
  path: 'path',
  type: 'type',
  projectId: 'projectId',
  description: 'description',
  isMain: 'isMain',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  sceneData: 'sceneData'
};

exports.Prisma.SceneNodeScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  name: 'name',
  type: 'type',
  sceneId: 'sceneId',
  parentId: 'parentId',
  position: 'position',
  rotation: 'rotation',
  scale: 'scale',
  visible: 'visible',
  properties: 'properties',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ScriptScalarFieldEnum = {
  id: 'id',
  name: 'name',
  path: 'path',
  language: 'language',
  content: 'content',
  projectId: 'projectId',
  description: 'description',
  isTemplate: 'isTemplate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MaterialScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  projectId: 'projectId',
  albedo: 'albedo',
  roughness: 'roughness',
  metalness: 'metalness',
  emission: 'emission',
  albedoMap: 'albedoMap',
  normalMap: 'normalMap',
  roughnessMap: 'roughnessMap',
  metalnessMap: 'metalnessMap',
  emissionMap: 'emissionMap',
  shaderCode: 'shaderCode',
  shaderParams: 'shaderParams',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TerrainScalarFieldEnum = {
  id: 'id',
  name: 'name',
  projectId: 'projectId',
  width: 'width',
  height: 'height',
  scale: 'scale',
  heightmapPath: 'heightmapPath',
  heightmapData: 'heightmapData',
  textureLayers: 'textureLayers',
  brushSettings: 'brushSettings',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AnimationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  projectId: 'projectId',
  duration: 'duration',
  frameRate: 'frameRate',
  states: 'states',
  transitions: 'transitions',
  parameters: 'parameters',
  tracks: 'tracks',
  keyframes: 'keyframes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProjectSettingScalarFieldEnum = {
  id: 'id',
  key: 'key',
  value: 'value',
  type: 'type',
  projectId: 'projectId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AssetScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  filePath: 'filePath',
  fileSize: 'fileSize',
  mimeType: 'mimeType',
  checksum: 'checksum',
  width: 'width',
  height: 'height',
  duration: 'duration',
  channels: 'channels',
  sampleRate: 'sampleRate',
  bitRate: 'bitRate',
  projectId: 'projectId',
  folderId: 'folderId',
  tags: 'tags',
  version: 'version',
  parentId: 'parentId',
  dependencies: 'dependencies',
  originalName: 'originalName',
  importedAt: 'importedAt',
  importSettings: 'importSettings',
  thumbnail: 'thumbnail',
  preview: 'preview',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SceneAssetUsageScalarFieldEnum = {
  id: 'id',
  sceneId: 'sceneId',
  assetId: 'assetId',
  usage: 'usage'
};

exports.Prisma.ScriptAssetUsageScalarFieldEnum = {
  id: 'id',
  scriptId: 'scriptId',
  assetId: 'assetId',
  usage: 'usage'
};

exports.Prisma.MaterialAssetUsageScalarFieldEnum = {
  id: 'id',
  materialId: 'materialId',
  assetId: 'assetId',
  usage: 'usage'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};
exports.AssetType = exports.$Enums.AssetType = {
  TEXTURE: 'TEXTURE',
  MODEL: 'MODEL',
  AUDIO: 'AUDIO',
  VIDEO: 'VIDEO',
  SCRIPT: 'SCRIPT',
  SHADER: 'SHADER',
  MATERIAL: 'MATERIAL',
  ANIMATION: 'ANIMATION',
  FONT: 'FONT',
  DATA: 'DATA',
  SCENE: 'SCENE',
  PREFAB: 'PREFAB',
  PLUGIN: 'PLUGIN',
  DOCUMENT: 'DOCUMENT',
  OTHER: 'OTHER'
};

exports.Prisma.ModelName = {
  User: 'User',
  UserSession: 'UserSession',
  Project: 'Project',
  Folder: 'Folder',
  Scene: 'Scene',
  SceneNode: 'SceneNode',
  Script: 'Script',
  Material: 'Material',
  Terrain: 'Terrain',
  Animation: 'Animation',
  ProjectSetting: 'ProjectSetting',
  Asset: 'Asset',
  SceneAssetUsage: 'SceneAssetUsage',
  ScriptAssetUsage: 'ScriptAssetUsage',
  MaterialAssetUsage: 'MaterialAssetUsage'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
