
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model UserSession
 * 
 */
export type UserSession = $Result.DefaultSelection<Prisma.$UserSessionPayload>
/**
 * Model Project
 * 
 */
export type Project = $Result.DefaultSelection<Prisma.$ProjectPayload>
/**
 * Model Folder
 * 
 */
export type Folder = $Result.DefaultSelection<Prisma.$FolderPayload>
/**
 * Model Scene
 * 
 */
export type Scene = $Result.DefaultSelection<Prisma.$ScenePayload>
/**
 * Model SceneNode
 * 
 */
export type SceneNode = $Result.DefaultSelection<Prisma.$SceneNodePayload>
/**
 * Model Script
 * 
 */
export type Script = $Result.DefaultSelection<Prisma.$ScriptPayload>
/**
 * Model Material
 * 
 */
export type Material = $Result.DefaultSelection<Prisma.$MaterialPayload>
/**
 * Model Terrain
 * 
 */
export type Terrain = $Result.DefaultSelection<Prisma.$TerrainPayload>
/**
 * Model Animation
 * 
 */
export type Animation = $Result.DefaultSelection<Prisma.$AnimationPayload>
/**
 * Model ProjectSetting
 * 
 */
export type ProjectSetting = $Result.DefaultSelection<Prisma.$ProjectSettingPayload>
/**
 * Model Asset
 * 
 */
export type Asset = $Result.DefaultSelection<Prisma.$AssetPayload>
/**
 * Model SceneAssetUsage
 * 
 */
export type SceneAssetUsage = $Result.DefaultSelection<Prisma.$SceneAssetUsagePayload>
/**
 * Model ScriptAssetUsage
 * 
 */
export type ScriptAssetUsage = $Result.DefaultSelection<Prisma.$ScriptAssetUsagePayload>
/**
 * Model MaterialAssetUsage
 * 
 */
export type MaterialAssetUsage = $Result.DefaultSelection<Prisma.$MaterialAssetUsagePayload>

/**
 * Enums
 */
export namespace $Enums {
  export const AssetType: {
  TEXTURE: 'TEXTURE',
  MODEL: 'MODEL',
  AUDIO: 'AUDIO',
  VIDEO: 'VIDEO',
  SCRIPT: 'SCRIPT',
  SHADER: 'SHADER',
  MATERIAL: 'MATERIAL',
  ANIMATION: 'ANIMATION',
  FONT: 'FONT',
  DATA: 'DATA',
  SCENE: 'SCENE',
  PREFAB: 'PREFAB',
  PLUGIN: 'PLUGIN',
  DOCUMENT: 'DOCUMENT',
  OTHER: 'OTHER'
};

export type AssetType = (typeof AssetType)[keyof typeof AssetType]

}

export type AssetType = $Enums.AssetType

export const AssetType: typeof $Enums.AssetType

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userSession`: Exposes CRUD operations for the **UserSession** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserSessions
    * const userSessions = await prisma.userSession.findMany()
    * ```
    */
  get userSession(): Prisma.UserSessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.project`: Exposes CRUD operations for the **Project** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Projects
    * const projects = await prisma.project.findMany()
    * ```
    */
  get project(): Prisma.ProjectDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.folder`: Exposes CRUD operations for the **Folder** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Folders
    * const folders = await prisma.folder.findMany()
    * ```
    */
  get folder(): Prisma.FolderDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.scene`: Exposes CRUD operations for the **Scene** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Scenes
    * const scenes = await prisma.scene.findMany()
    * ```
    */
  get scene(): Prisma.SceneDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.sceneNode`: Exposes CRUD operations for the **SceneNode** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SceneNodes
    * const sceneNodes = await prisma.sceneNode.findMany()
    * ```
    */
  get sceneNode(): Prisma.SceneNodeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.script`: Exposes CRUD operations for the **Script** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Scripts
    * const scripts = await prisma.script.findMany()
    * ```
    */
  get script(): Prisma.ScriptDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.material`: Exposes CRUD operations for the **Material** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Materials
    * const materials = await prisma.material.findMany()
    * ```
    */
  get material(): Prisma.MaterialDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.terrain`: Exposes CRUD operations for the **Terrain** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Terrains
    * const terrains = await prisma.terrain.findMany()
    * ```
    */
  get terrain(): Prisma.TerrainDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.animation`: Exposes CRUD operations for the **Animation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Animations
    * const animations = await prisma.animation.findMany()
    * ```
    */
  get animation(): Prisma.AnimationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.projectSetting`: Exposes CRUD operations for the **ProjectSetting** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProjectSettings
    * const projectSettings = await prisma.projectSetting.findMany()
    * ```
    */
  get projectSetting(): Prisma.ProjectSettingDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.asset`: Exposes CRUD operations for the **Asset** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Assets
    * const assets = await prisma.asset.findMany()
    * ```
    */
  get asset(): Prisma.AssetDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.sceneAssetUsage`: Exposes CRUD operations for the **SceneAssetUsage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SceneAssetUsages
    * const sceneAssetUsages = await prisma.sceneAssetUsage.findMany()
    * ```
    */
  get sceneAssetUsage(): Prisma.SceneAssetUsageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.scriptAssetUsage`: Exposes CRUD operations for the **ScriptAssetUsage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ScriptAssetUsages
    * const scriptAssetUsages = await prisma.scriptAssetUsage.findMany()
    * ```
    */
  get scriptAssetUsage(): Prisma.ScriptAssetUsageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.materialAssetUsage`: Exposes CRUD operations for the **MaterialAssetUsage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MaterialAssetUsages
    * const materialAssetUsages = await prisma.materialAssetUsage.findMany()
    * ```
    */
  get materialAssetUsage(): Prisma.MaterialAssetUsageDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.13.0
   * Query Engine version: 361e86d0ea4987e9f53a565309b3eed797a6bcbd
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    UserSession: 'UserSession',
    Project: 'Project',
    Folder: 'Folder',
    Scene: 'Scene',
    SceneNode: 'SceneNode',
    Script: 'Script',
    Material: 'Material',
    Terrain: 'Terrain',
    Animation: 'Animation',
    ProjectSetting: 'ProjectSetting',
    Asset: 'Asset',
    SceneAssetUsage: 'SceneAssetUsage',
    ScriptAssetUsage: 'ScriptAssetUsage',
    MaterialAssetUsage: 'MaterialAssetUsage'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "userSession" | "project" | "folder" | "scene" | "sceneNode" | "script" | "material" | "terrain" | "animation" | "projectSetting" | "asset" | "sceneAssetUsage" | "scriptAssetUsage" | "materialAssetUsage"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      UserSession: {
        payload: Prisma.$UserSessionPayload<ExtArgs>
        fields: Prisma.UserSessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserSessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserSessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>
          }
          findFirst: {
            args: Prisma.UserSessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserSessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>
          }
          findMany: {
            args: Prisma.UserSessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>[]
          }
          create: {
            args: Prisma.UserSessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>
          }
          createMany: {
            args: Prisma.UserSessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserSessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>[]
          }
          delete: {
            args: Prisma.UserSessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>
          }
          update: {
            args: Prisma.UserSessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>
          }
          deleteMany: {
            args: Prisma.UserSessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserSessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserSessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>[]
          }
          upsert: {
            args: Prisma.UserSessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>
          }
          aggregate: {
            args: Prisma.UserSessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserSession>
          }
          groupBy: {
            args: Prisma.UserSessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserSessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserSessionCountArgs<ExtArgs>
            result: $Utils.Optional<UserSessionCountAggregateOutputType> | number
          }
        }
      }
      Project: {
        payload: Prisma.$ProjectPayload<ExtArgs>
        fields: Prisma.ProjectFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProjectFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProjectFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          findFirst: {
            args: Prisma.ProjectFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProjectFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          findMany: {
            args: Prisma.ProjectFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>[]
          }
          create: {
            args: Prisma.ProjectCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          createMany: {
            args: Prisma.ProjectCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProjectCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>[]
          }
          delete: {
            args: Prisma.ProjectDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          update: {
            args: Prisma.ProjectUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          deleteMany: {
            args: Prisma.ProjectDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProjectUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProjectUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>[]
          }
          upsert: {
            args: Prisma.ProjectUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          aggregate: {
            args: Prisma.ProjectAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProject>
          }
          groupBy: {
            args: Prisma.ProjectGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProjectGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProjectCountArgs<ExtArgs>
            result: $Utils.Optional<ProjectCountAggregateOutputType> | number
          }
        }
      }
      Folder: {
        payload: Prisma.$FolderPayload<ExtArgs>
        fields: Prisma.FolderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FolderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FolderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FolderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FolderPayload>
          }
          findFirst: {
            args: Prisma.FolderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FolderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FolderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FolderPayload>
          }
          findMany: {
            args: Prisma.FolderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FolderPayload>[]
          }
          create: {
            args: Prisma.FolderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FolderPayload>
          }
          createMany: {
            args: Prisma.FolderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FolderCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FolderPayload>[]
          }
          delete: {
            args: Prisma.FolderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FolderPayload>
          }
          update: {
            args: Prisma.FolderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FolderPayload>
          }
          deleteMany: {
            args: Prisma.FolderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FolderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FolderUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FolderPayload>[]
          }
          upsert: {
            args: Prisma.FolderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FolderPayload>
          }
          aggregate: {
            args: Prisma.FolderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFolder>
          }
          groupBy: {
            args: Prisma.FolderGroupByArgs<ExtArgs>
            result: $Utils.Optional<FolderGroupByOutputType>[]
          }
          count: {
            args: Prisma.FolderCountArgs<ExtArgs>
            result: $Utils.Optional<FolderCountAggregateOutputType> | number
          }
        }
      }
      Scene: {
        payload: Prisma.$ScenePayload<ExtArgs>
        fields: Prisma.SceneFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SceneFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScenePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SceneFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScenePayload>
          }
          findFirst: {
            args: Prisma.SceneFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScenePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SceneFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScenePayload>
          }
          findMany: {
            args: Prisma.SceneFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScenePayload>[]
          }
          create: {
            args: Prisma.SceneCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScenePayload>
          }
          createMany: {
            args: Prisma.SceneCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SceneCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScenePayload>[]
          }
          delete: {
            args: Prisma.SceneDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScenePayload>
          }
          update: {
            args: Prisma.SceneUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScenePayload>
          }
          deleteMany: {
            args: Prisma.SceneDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SceneUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SceneUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScenePayload>[]
          }
          upsert: {
            args: Prisma.SceneUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScenePayload>
          }
          aggregate: {
            args: Prisma.SceneAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateScene>
          }
          groupBy: {
            args: Prisma.SceneGroupByArgs<ExtArgs>
            result: $Utils.Optional<SceneGroupByOutputType>[]
          }
          count: {
            args: Prisma.SceneCountArgs<ExtArgs>
            result: $Utils.Optional<SceneCountAggregateOutputType> | number
          }
        }
      }
      SceneNode: {
        payload: Prisma.$SceneNodePayload<ExtArgs>
        fields: Prisma.SceneNodeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SceneNodeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SceneNodePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SceneNodeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SceneNodePayload>
          }
          findFirst: {
            args: Prisma.SceneNodeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SceneNodePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SceneNodeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SceneNodePayload>
          }
          findMany: {
            args: Prisma.SceneNodeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SceneNodePayload>[]
          }
          create: {
            args: Prisma.SceneNodeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SceneNodePayload>
          }
          createMany: {
            args: Prisma.SceneNodeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SceneNodeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SceneNodePayload>[]
          }
          delete: {
            args: Prisma.SceneNodeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SceneNodePayload>
          }
          update: {
            args: Prisma.SceneNodeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SceneNodePayload>
          }
          deleteMany: {
            args: Prisma.SceneNodeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SceneNodeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SceneNodeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SceneNodePayload>[]
          }
          upsert: {
            args: Prisma.SceneNodeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SceneNodePayload>
          }
          aggregate: {
            args: Prisma.SceneNodeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSceneNode>
          }
          groupBy: {
            args: Prisma.SceneNodeGroupByArgs<ExtArgs>
            result: $Utils.Optional<SceneNodeGroupByOutputType>[]
          }
          count: {
            args: Prisma.SceneNodeCountArgs<ExtArgs>
            result: $Utils.Optional<SceneNodeCountAggregateOutputType> | number
          }
        }
      }
      Script: {
        payload: Prisma.$ScriptPayload<ExtArgs>
        fields: Prisma.ScriptFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ScriptFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScriptPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ScriptFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScriptPayload>
          }
          findFirst: {
            args: Prisma.ScriptFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScriptPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ScriptFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScriptPayload>
          }
          findMany: {
            args: Prisma.ScriptFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScriptPayload>[]
          }
          create: {
            args: Prisma.ScriptCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScriptPayload>
          }
          createMany: {
            args: Prisma.ScriptCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ScriptCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScriptPayload>[]
          }
          delete: {
            args: Prisma.ScriptDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScriptPayload>
          }
          update: {
            args: Prisma.ScriptUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScriptPayload>
          }
          deleteMany: {
            args: Prisma.ScriptDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ScriptUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ScriptUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScriptPayload>[]
          }
          upsert: {
            args: Prisma.ScriptUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScriptPayload>
          }
          aggregate: {
            args: Prisma.ScriptAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateScript>
          }
          groupBy: {
            args: Prisma.ScriptGroupByArgs<ExtArgs>
            result: $Utils.Optional<ScriptGroupByOutputType>[]
          }
          count: {
            args: Prisma.ScriptCountArgs<ExtArgs>
            result: $Utils.Optional<ScriptCountAggregateOutputType> | number
          }
        }
      }
      Material: {
        payload: Prisma.$MaterialPayload<ExtArgs>
        fields: Prisma.MaterialFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MaterialFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaterialPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MaterialFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaterialPayload>
          }
          findFirst: {
            args: Prisma.MaterialFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaterialPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MaterialFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaterialPayload>
          }
          findMany: {
            args: Prisma.MaterialFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaterialPayload>[]
          }
          create: {
            args: Prisma.MaterialCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaterialPayload>
          }
          createMany: {
            args: Prisma.MaterialCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MaterialCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaterialPayload>[]
          }
          delete: {
            args: Prisma.MaterialDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaterialPayload>
          }
          update: {
            args: Prisma.MaterialUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaterialPayload>
          }
          deleteMany: {
            args: Prisma.MaterialDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MaterialUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MaterialUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaterialPayload>[]
          }
          upsert: {
            args: Prisma.MaterialUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaterialPayload>
          }
          aggregate: {
            args: Prisma.MaterialAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMaterial>
          }
          groupBy: {
            args: Prisma.MaterialGroupByArgs<ExtArgs>
            result: $Utils.Optional<MaterialGroupByOutputType>[]
          }
          count: {
            args: Prisma.MaterialCountArgs<ExtArgs>
            result: $Utils.Optional<MaterialCountAggregateOutputType> | number
          }
        }
      }
      Terrain: {
        payload: Prisma.$TerrainPayload<ExtArgs>
        fields: Prisma.TerrainFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TerrainFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TerrainPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TerrainFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TerrainPayload>
          }
          findFirst: {
            args: Prisma.TerrainFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TerrainPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TerrainFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TerrainPayload>
          }
          findMany: {
            args: Prisma.TerrainFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TerrainPayload>[]
          }
          create: {
            args: Prisma.TerrainCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TerrainPayload>
          }
          createMany: {
            args: Prisma.TerrainCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TerrainCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TerrainPayload>[]
          }
          delete: {
            args: Prisma.TerrainDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TerrainPayload>
          }
          update: {
            args: Prisma.TerrainUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TerrainPayload>
          }
          deleteMany: {
            args: Prisma.TerrainDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TerrainUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TerrainUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TerrainPayload>[]
          }
          upsert: {
            args: Prisma.TerrainUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TerrainPayload>
          }
          aggregate: {
            args: Prisma.TerrainAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTerrain>
          }
          groupBy: {
            args: Prisma.TerrainGroupByArgs<ExtArgs>
            result: $Utils.Optional<TerrainGroupByOutputType>[]
          }
          count: {
            args: Prisma.TerrainCountArgs<ExtArgs>
            result: $Utils.Optional<TerrainCountAggregateOutputType> | number
          }
        }
      }
      Animation: {
        payload: Prisma.$AnimationPayload<ExtArgs>
        fields: Prisma.AnimationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AnimationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AnimationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimationPayload>
          }
          findFirst: {
            args: Prisma.AnimationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AnimationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimationPayload>
          }
          findMany: {
            args: Prisma.AnimationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimationPayload>[]
          }
          create: {
            args: Prisma.AnimationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimationPayload>
          }
          createMany: {
            args: Prisma.AnimationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AnimationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimationPayload>[]
          }
          delete: {
            args: Prisma.AnimationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimationPayload>
          }
          update: {
            args: Prisma.AnimationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimationPayload>
          }
          deleteMany: {
            args: Prisma.AnimationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AnimationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AnimationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimationPayload>[]
          }
          upsert: {
            args: Prisma.AnimationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimationPayload>
          }
          aggregate: {
            args: Prisma.AnimationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAnimation>
          }
          groupBy: {
            args: Prisma.AnimationGroupByArgs<ExtArgs>
            result: $Utils.Optional<AnimationGroupByOutputType>[]
          }
          count: {
            args: Prisma.AnimationCountArgs<ExtArgs>
            result: $Utils.Optional<AnimationCountAggregateOutputType> | number
          }
        }
      }
      ProjectSetting: {
        payload: Prisma.$ProjectSettingPayload<ExtArgs>
        fields: Prisma.ProjectSettingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProjectSettingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectSettingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProjectSettingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectSettingPayload>
          }
          findFirst: {
            args: Prisma.ProjectSettingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectSettingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProjectSettingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectSettingPayload>
          }
          findMany: {
            args: Prisma.ProjectSettingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectSettingPayload>[]
          }
          create: {
            args: Prisma.ProjectSettingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectSettingPayload>
          }
          createMany: {
            args: Prisma.ProjectSettingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProjectSettingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectSettingPayload>[]
          }
          delete: {
            args: Prisma.ProjectSettingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectSettingPayload>
          }
          update: {
            args: Prisma.ProjectSettingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectSettingPayload>
          }
          deleteMany: {
            args: Prisma.ProjectSettingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProjectSettingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProjectSettingUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectSettingPayload>[]
          }
          upsert: {
            args: Prisma.ProjectSettingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectSettingPayload>
          }
          aggregate: {
            args: Prisma.ProjectSettingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProjectSetting>
          }
          groupBy: {
            args: Prisma.ProjectSettingGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProjectSettingGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProjectSettingCountArgs<ExtArgs>
            result: $Utils.Optional<ProjectSettingCountAggregateOutputType> | number
          }
        }
      }
      Asset: {
        payload: Prisma.$AssetPayload<ExtArgs>
        fields: Prisma.AssetFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AssetFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AssetFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetPayload>
          }
          findFirst: {
            args: Prisma.AssetFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AssetFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetPayload>
          }
          findMany: {
            args: Prisma.AssetFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetPayload>[]
          }
          create: {
            args: Prisma.AssetCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetPayload>
          }
          createMany: {
            args: Prisma.AssetCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AssetCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetPayload>[]
          }
          delete: {
            args: Prisma.AssetDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetPayload>
          }
          update: {
            args: Prisma.AssetUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetPayload>
          }
          deleteMany: {
            args: Prisma.AssetDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AssetUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AssetUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetPayload>[]
          }
          upsert: {
            args: Prisma.AssetUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetPayload>
          }
          aggregate: {
            args: Prisma.AssetAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAsset>
          }
          groupBy: {
            args: Prisma.AssetGroupByArgs<ExtArgs>
            result: $Utils.Optional<AssetGroupByOutputType>[]
          }
          count: {
            args: Prisma.AssetCountArgs<ExtArgs>
            result: $Utils.Optional<AssetCountAggregateOutputType> | number
          }
        }
      }
      SceneAssetUsage: {
        payload: Prisma.$SceneAssetUsagePayload<ExtArgs>
        fields: Prisma.SceneAssetUsageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SceneAssetUsageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SceneAssetUsagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SceneAssetUsageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SceneAssetUsagePayload>
          }
          findFirst: {
            args: Prisma.SceneAssetUsageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SceneAssetUsagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SceneAssetUsageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SceneAssetUsagePayload>
          }
          findMany: {
            args: Prisma.SceneAssetUsageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SceneAssetUsagePayload>[]
          }
          create: {
            args: Prisma.SceneAssetUsageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SceneAssetUsagePayload>
          }
          createMany: {
            args: Prisma.SceneAssetUsageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SceneAssetUsageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SceneAssetUsagePayload>[]
          }
          delete: {
            args: Prisma.SceneAssetUsageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SceneAssetUsagePayload>
          }
          update: {
            args: Prisma.SceneAssetUsageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SceneAssetUsagePayload>
          }
          deleteMany: {
            args: Prisma.SceneAssetUsageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SceneAssetUsageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SceneAssetUsageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SceneAssetUsagePayload>[]
          }
          upsert: {
            args: Prisma.SceneAssetUsageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SceneAssetUsagePayload>
          }
          aggregate: {
            args: Prisma.SceneAssetUsageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSceneAssetUsage>
          }
          groupBy: {
            args: Prisma.SceneAssetUsageGroupByArgs<ExtArgs>
            result: $Utils.Optional<SceneAssetUsageGroupByOutputType>[]
          }
          count: {
            args: Prisma.SceneAssetUsageCountArgs<ExtArgs>
            result: $Utils.Optional<SceneAssetUsageCountAggregateOutputType> | number
          }
        }
      }
      ScriptAssetUsage: {
        payload: Prisma.$ScriptAssetUsagePayload<ExtArgs>
        fields: Prisma.ScriptAssetUsageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ScriptAssetUsageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScriptAssetUsagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ScriptAssetUsageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScriptAssetUsagePayload>
          }
          findFirst: {
            args: Prisma.ScriptAssetUsageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScriptAssetUsagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ScriptAssetUsageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScriptAssetUsagePayload>
          }
          findMany: {
            args: Prisma.ScriptAssetUsageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScriptAssetUsagePayload>[]
          }
          create: {
            args: Prisma.ScriptAssetUsageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScriptAssetUsagePayload>
          }
          createMany: {
            args: Prisma.ScriptAssetUsageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ScriptAssetUsageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScriptAssetUsagePayload>[]
          }
          delete: {
            args: Prisma.ScriptAssetUsageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScriptAssetUsagePayload>
          }
          update: {
            args: Prisma.ScriptAssetUsageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScriptAssetUsagePayload>
          }
          deleteMany: {
            args: Prisma.ScriptAssetUsageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ScriptAssetUsageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ScriptAssetUsageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScriptAssetUsagePayload>[]
          }
          upsert: {
            args: Prisma.ScriptAssetUsageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScriptAssetUsagePayload>
          }
          aggregate: {
            args: Prisma.ScriptAssetUsageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateScriptAssetUsage>
          }
          groupBy: {
            args: Prisma.ScriptAssetUsageGroupByArgs<ExtArgs>
            result: $Utils.Optional<ScriptAssetUsageGroupByOutputType>[]
          }
          count: {
            args: Prisma.ScriptAssetUsageCountArgs<ExtArgs>
            result: $Utils.Optional<ScriptAssetUsageCountAggregateOutputType> | number
          }
        }
      }
      MaterialAssetUsage: {
        payload: Prisma.$MaterialAssetUsagePayload<ExtArgs>
        fields: Prisma.MaterialAssetUsageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MaterialAssetUsageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaterialAssetUsagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MaterialAssetUsageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaterialAssetUsagePayload>
          }
          findFirst: {
            args: Prisma.MaterialAssetUsageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaterialAssetUsagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MaterialAssetUsageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaterialAssetUsagePayload>
          }
          findMany: {
            args: Prisma.MaterialAssetUsageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaterialAssetUsagePayload>[]
          }
          create: {
            args: Prisma.MaterialAssetUsageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaterialAssetUsagePayload>
          }
          createMany: {
            args: Prisma.MaterialAssetUsageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MaterialAssetUsageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaterialAssetUsagePayload>[]
          }
          delete: {
            args: Prisma.MaterialAssetUsageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaterialAssetUsagePayload>
          }
          update: {
            args: Prisma.MaterialAssetUsageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaterialAssetUsagePayload>
          }
          deleteMany: {
            args: Prisma.MaterialAssetUsageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MaterialAssetUsageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MaterialAssetUsageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaterialAssetUsagePayload>[]
          }
          upsert: {
            args: Prisma.MaterialAssetUsageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaterialAssetUsagePayload>
          }
          aggregate: {
            args: Prisma.MaterialAssetUsageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMaterialAssetUsage>
          }
          groupBy: {
            args: Prisma.MaterialAssetUsageGroupByArgs<ExtArgs>
            result: $Utils.Optional<MaterialAssetUsageGroupByOutputType>[]
          }
          count: {
            args: Prisma.MaterialAssetUsageCountArgs<ExtArgs>
            result: $Utils.Optional<MaterialAssetUsageCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    userSession?: UserSessionOmit
    project?: ProjectOmit
    folder?: FolderOmit
    scene?: SceneOmit
    sceneNode?: SceneNodeOmit
    script?: ScriptOmit
    material?: MaterialOmit
    terrain?: TerrainOmit
    animation?: AnimationOmit
    projectSetting?: ProjectSettingOmit
    asset?: AssetOmit
    sceneAssetUsage?: SceneAssetUsageOmit
    scriptAssetUsage?: ScriptAssetUsageOmit
    materialAssetUsage?: MaterialAssetUsageOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    projects: number
    sessions: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    projects?: boolean | UserCountOutputTypeCountProjectsArgs
    sessions?: boolean | UserCountOutputTypeCountSessionsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountProjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserSessionWhereInput
  }


  /**
   * Count Type ProjectCountOutputType
   */

  export type ProjectCountOutputType = {
    scenes: number
    scripts: number
    materials: number
    terrains: number
    animations: number
    folders: number
    projectSettings: number
    assets: number
  }

  export type ProjectCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    scenes?: boolean | ProjectCountOutputTypeCountScenesArgs
    scripts?: boolean | ProjectCountOutputTypeCountScriptsArgs
    materials?: boolean | ProjectCountOutputTypeCountMaterialsArgs
    terrains?: boolean | ProjectCountOutputTypeCountTerrainsArgs
    animations?: boolean | ProjectCountOutputTypeCountAnimationsArgs
    folders?: boolean | ProjectCountOutputTypeCountFoldersArgs
    projectSettings?: boolean | ProjectCountOutputTypeCountProjectSettingsArgs
    assets?: boolean | ProjectCountOutputTypeCountAssetsArgs
  }

  // Custom InputTypes
  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectCountOutputType
     */
    select?: ProjectCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountScenesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SceneWhereInput
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountScriptsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScriptWhereInput
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountMaterialsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MaterialWhereInput
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountTerrainsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TerrainWhereInput
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountAnimationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AnimationWhereInput
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountFoldersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FolderWhereInput
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountProjectSettingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectSettingWhereInput
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountAssetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssetWhereInput
  }


  /**
   * Count Type FolderCountOutputType
   */

  export type FolderCountOutputType = {
    children: number
    assets: number
  }

  export type FolderCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    children?: boolean | FolderCountOutputTypeCountChildrenArgs
    assets?: boolean | FolderCountOutputTypeCountAssetsArgs
  }

  // Custom InputTypes
  /**
   * FolderCountOutputType without action
   */
  export type FolderCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FolderCountOutputType
     */
    select?: FolderCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FolderCountOutputType without action
   */
  export type FolderCountOutputTypeCountChildrenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FolderWhereInput
  }

  /**
   * FolderCountOutputType without action
   */
  export type FolderCountOutputTypeCountAssetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssetWhereInput
  }


  /**
   * Count Type SceneCountOutputType
   */

  export type SceneCountOutputType = {
    nodes: number
    assetUsages: number
  }

  export type SceneCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    nodes?: boolean | SceneCountOutputTypeCountNodesArgs
    assetUsages?: boolean | SceneCountOutputTypeCountAssetUsagesArgs
  }

  // Custom InputTypes
  /**
   * SceneCountOutputType without action
   */
  export type SceneCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SceneCountOutputType
     */
    select?: SceneCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SceneCountOutputType without action
   */
  export type SceneCountOutputTypeCountNodesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SceneNodeWhereInput
  }

  /**
   * SceneCountOutputType without action
   */
  export type SceneCountOutputTypeCountAssetUsagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SceneAssetUsageWhereInput
  }


  /**
   * Count Type SceneNodeCountOutputType
   */

  export type SceneNodeCountOutputType = {
    children: number
  }

  export type SceneNodeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    children?: boolean | SceneNodeCountOutputTypeCountChildrenArgs
  }

  // Custom InputTypes
  /**
   * SceneNodeCountOutputType without action
   */
  export type SceneNodeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SceneNodeCountOutputType
     */
    select?: SceneNodeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SceneNodeCountOutputType without action
   */
  export type SceneNodeCountOutputTypeCountChildrenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SceneNodeWhereInput
  }


  /**
   * Count Type ScriptCountOutputType
   */

  export type ScriptCountOutputType = {
    assetUsages: number
  }

  export type ScriptCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assetUsages?: boolean | ScriptCountOutputTypeCountAssetUsagesArgs
  }

  // Custom InputTypes
  /**
   * ScriptCountOutputType without action
   */
  export type ScriptCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScriptCountOutputType
     */
    select?: ScriptCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ScriptCountOutputType without action
   */
  export type ScriptCountOutputTypeCountAssetUsagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScriptAssetUsageWhereInput
  }


  /**
   * Count Type MaterialCountOutputType
   */

  export type MaterialCountOutputType = {
    assetUsages: number
  }

  export type MaterialCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assetUsages?: boolean | MaterialCountOutputTypeCountAssetUsagesArgs
  }

  // Custom InputTypes
  /**
   * MaterialCountOutputType without action
   */
  export type MaterialCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaterialCountOutputType
     */
    select?: MaterialCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MaterialCountOutputType without action
   */
  export type MaterialCountOutputTypeCountAssetUsagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MaterialAssetUsageWhereInput
  }


  /**
   * Count Type AssetCountOutputType
   */

  export type AssetCountOutputType = {
    versions: number
    sceneUsages: number
    scriptUsages: number
    materialUsages: number
  }

  export type AssetCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    versions?: boolean | AssetCountOutputTypeCountVersionsArgs
    sceneUsages?: boolean | AssetCountOutputTypeCountSceneUsagesArgs
    scriptUsages?: boolean | AssetCountOutputTypeCountScriptUsagesArgs
    materialUsages?: boolean | AssetCountOutputTypeCountMaterialUsagesArgs
  }

  // Custom InputTypes
  /**
   * AssetCountOutputType without action
   */
  export type AssetCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetCountOutputType
     */
    select?: AssetCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AssetCountOutputType without action
   */
  export type AssetCountOutputTypeCountVersionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssetWhereInput
  }

  /**
   * AssetCountOutputType without action
   */
  export type AssetCountOutputTypeCountSceneUsagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SceneAssetUsageWhereInput
  }

  /**
   * AssetCountOutputType without action
   */
  export type AssetCountOutputTypeCountScriptUsagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScriptAssetUsageWhereInput
  }

  /**
   * AssetCountOutputType without action
   */
  export type AssetCountOutputTypeCountMaterialUsagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MaterialAssetUsageWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    username: string | null
    firstName: string | null
    lastName: string | null
    password: string | null
    avatar: string | null
    isActive: boolean | null
    isVerified: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    lastLoginAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    username: string | null
    firstName: string | null
    lastName: string | null
    password: string | null
    avatar: string | null
    isActive: boolean | null
    isVerified: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    lastLoginAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    username: number
    firstName: number
    lastName: number
    password: number
    avatar: number
    isActive: number
    isVerified: number
    createdAt: number
    updatedAt: number
    lastLoginAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    username?: true
    firstName?: true
    lastName?: true
    password?: true
    avatar?: true
    isActive?: true
    isVerified?: true
    createdAt?: true
    updatedAt?: true
    lastLoginAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    username?: true
    firstName?: true
    lastName?: true
    password?: true
    avatar?: true
    isActive?: true
    isVerified?: true
    createdAt?: true
    updatedAt?: true
    lastLoginAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    username?: true
    firstName?: true
    lastName?: true
    password?: true
    avatar?: true
    isActive?: true
    isVerified?: true
    createdAt?: true
    updatedAt?: true
    lastLoginAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    username: string | null
    firstName: string | null
    lastName: string | null
    password: string
    avatar: string | null
    isActive: boolean
    isVerified: boolean
    createdAt: Date
    updatedAt: Date
    lastLoginAt: Date | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    username?: boolean
    firstName?: boolean
    lastName?: boolean
    password?: boolean
    avatar?: boolean
    isActive?: boolean
    isVerified?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastLoginAt?: boolean
    projects?: boolean | User$projectsArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    username?: boolean
    firstName?: boolean
    lastName?: boolean
    password?: boolean
    avatar?: boolean
    isActive?: boolean
    isVerified?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastLoginAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    username?: boolean
    firstName?: boolean
    lastName?: boolean
    password?: boolean
    avatar?: boolean
    isActive?: boolean
    isVerified?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastLoginAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    username?: boolean
    firstName?: boolean
    lastName?: boolean
    password?: boolean
    avatar?: boolean
    isActive?: boolean
    isVerified?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastLoginAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "username" | "firstName" | "lastName" | "password" | "avatar" | "isActive" | "isVerified" | "createdAt" | "updatedAt" | "lastLoginAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    projects?: boolean | User$projectsArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      projects: Prisma.$ProjectPayload<ExtArgs>[]
      sessions: Prisma.$UserSessionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      username: string | null
      firstName: string | null
      lastName: string | null
      password: string
      avatar: string | null
      isActive: boolean
      isVerified: boolean
      createdAt: Date
      updatedAt: Date
      lastLoginAt: Date | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    projects<T extends User$projectsArgs<ExtArgs> = {}>(args?: Subset<T, User$projectsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    sessions<T extends User$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly lastName: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly avatar: FieldRef<"User", 'String'>
    readonly isActive: FieldRef<"User", 'Boolean'>
    readonly isVerified: FieldRef<"User", 'Boolean'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly lastLoginAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.projects
   */
  export type User$projectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    where?: ProjectWhereInput
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    cursor?: ProjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * User.sessions
   */
  export type User$sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    where?: UserSessionWhereInput
    orderBy?: UserSessionOrderByWithRelationInput | UserSessionOrderByWithRelationInput[]
    cursor?: UserSessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserSessionScalarFieldEnum | UserSessionScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model UserSession
   */

  export type AggregateUserSession = {
    _count: UserSessionCountAggregateOutputType | null
    _min: UserSessionMinAggregateOutputType | null
    _max: UserSessionMaxAggregateOutputType | null
  }

  export type UserSessionMinAggregateOutputType = {
    id: string | null
    userId: string | null
    token: string | null
    refreshToken: string | null
    expiresAt: Date | null
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserSessionMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    token: string | null
    refreshToken: string | null
    expiresAt: Date | null
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserSessionCountAggregateOutputType = {
    id: number
    userId: number
    token: number
    refreshToken: number
    expiresAt: number
    ipAddress: number
    userAgent: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserSessionMinAggregateInputType = {
    id?: true
    userId?: true
    token?: true
    refreshToken?: true
    expiresAt?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserSessionMaxAggregateInputType = {
    id?: true
    userId?: true
    token?: true
    refreshToken?: true
    expiresAt?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserSessionCountAggregateInputType = {
    id?: true
    userId?: true
    token?: true
    refreshToken?: true
    expiresAt?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserSessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserSession to aggregate.
     */
    where?: UserSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSessions to fetch.
     */
    orderBy?: UserSessionOrderByWithRelationInput | UserSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserSessions
    **/
    _count?: true | UserSessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserSessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserSessionMaxAggregateInputType
  }

  export type GetUserSessionAggregateType<T extends UserSessionAggregateArgs> = {
        [P in keyof T & keyof AggregateUserSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserSession[P]>
      : GetScalarType<T[P], AggregateUserSession[P]>
  }




  export type UserSessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserSessionWhereInput
    orderBy?: UserSessionOrderByWithAggregationInput | UserSessionOrderByWithAggregationInput[]
    by: UserSessionScalarFieldEnum[] | UserSessionScalarFieldEnum
    having?: UserSessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserSessionCountAggregateInputType | true
    _min?: UserSessionMinAggregateInputType
    _max?: UserSessionMaxAggregateInputType
  }

  export type UserSessionGroupByOutputType = {
    id: string
    userId: string
    token: string
    refreshToken: string | null
    expiresAt: Date
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date
    updatedAt: Date
    _count: UserSessionCountAggregateOutputType | null
    _min: UserSessionMinAggregateOutputType | null
    _max: UserSessionMaxAggregateOutputType | null
  }

  type GetUserSessionGroupByPayload<T extends UserSessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserSessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserSessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserSessionGroupByOutputType[P]>
            : GetScalarType<T[P], UserSessionGroupByOutputType[P]>
        }
      >
    >


  export type UserSessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    token?: boolean
    refreshToken?: boolean
    expiresAt?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userSession"]>

  export type UserSessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    token?: boolean
    refreshToken?: boolean
    expiresAt?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userSession"]>

  export type UserSessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    token?: boolean
    refreshToken?: boolean
    expiresAt?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userSession"]>

  export type UserSessionSelectScalar = {
    id?: boolean
    userId?: boolean
    token?: boolean
    refreshToken?: boolean
    expiresAt?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserSessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "token" | "refreshToken" | "expiresAt" | "ipAddress" | "userAgent" | "createdAt" | "updatedAt", ExtArgs["result"]["userSession"]>
  export type UserSessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserSessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserSessionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserSessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserSession"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      token: string
      refreshToken: string | null
      expiresAt: Date
      ipAddress: string | null
      userAgent: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["userSession"]>
    composites: {}
  }

  type UserSessionGetPayload<S extends boolean | null | undefined | UserSessionDefaultArgs> = $Result.GetResult<Prisma.$UserSessionPayload, S>

  type UserSessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserSessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserSessionCountAggregateInputType | true
    }

  export interface UserSessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserSession'], meta: { name: 'UserSession' } }
    /**
     * Find zero or one UserSession that matches the filter.
     * @param {UserSessionFindUniqueArgs} args - Arguments to find a UserSession
     * @example
     * // Get one UserSession
     * const userSession = await prisma.userSession.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserSessionFindUniqueArgs>(args: SelectSubset<T, UserSessionFindUniqueArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserSession that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserSessionFindUniqueOrThrowArgs} args - Arguments to find a UserSession
     * @example
     * // Get one UserSession
     * const userSession = await prisma.userSession.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserSessionFindUniqueOrThrowArgs>(args: SelectSubset<T, UserSessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserSession that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionFindFirstArgs} args - Arguments to find a UserSession
     * @example
     * // Get one UserSession
     * const userSession = await prisma.userSession.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserSessionFindFirstArgs>(args?: SelectSubset<T, UserSessionFindFirstArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserSession that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionFindFirstOrThrowArgs} args - Arguments to find a UserSession
     * @example
     * // Get one UserSession
     * const userSession = await prisma.userSession.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserSessionFindFirstOrThrowArgs>(args?: SelectSubset<T, UserSessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserSessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserSessions
     * const userSessions = await prisma.userSession.findMany()
     * 
     * // Get first 10 UserSessions
     * const userSessions = await prisma.userSession.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userSessionWithIdOnly = await prisma.userSession.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserSessionFindManyArgs>(args?: SelectSubset<T, UserSessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserSession.
     * @param {UserSessionCreateArgs} args - Arguments to create a UserSession.
     * @example
     * // Create one UserSession
     * const UserSession = await prisma.userSession.create({
     *   data: {
     *     // ... data to create a UserSession
     *   }
     * })
     * 
     */
    create<T extends UserSessionCreateArgs>(args: SelectSubset<T, UserSessionCreateArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserSessions.
     * @param {UserSessionCreateManyArgs} args - Arguments to create many UserSessions.
     * @example
     * // Create many UserSessions
     * const userSession = await prisma.userSession.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserSessionCreateManyArgs>(args?: SelectSubset<T, UserSessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserSessions and returns the data saved in the database.
     * @param {UserSessionCreateManyAndReturnArgs} args - Arguments to create many UserSessions.
     * @example
     * // Create many UserSessions
     * const userSession = await prisma.userSession.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserSessions and only return the `id`
     * const userSessionWithIdOnly = await prisma.userSession.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserSessionCreateManyAndReturnArgs>(args?: SelectSubset<T, UserSessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserSession.
     * @param {UserSessionDeleteArgs} args - Arguments to delete one UserSession.
     * @example
     * // Delete one UserSession
     * const UserSession = await prisma.userSession.delete({
     *   where: {
     *     // ... filter to delete one UserSession
     *   }
     * })
     * 
     */
    delete<T extends UserSessionDeleteArgs>(args: SelectSubset<T, UserSessionDeleteArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserSession.
     * @param {UserSessionUpdateArgs} args - Arguments to update one UserSession.
     * @example
     * // Update one UserSession
     * const userSession = await prisma.userSession.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserSessionUpdateArgs>(args: SelectSubset<T, UserSessionUpdateArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserSessions.
     * @param {UserSessionDeleteManyArgs} args - Arguments to filter UserSessions to delete.
     * @example
     * // Delete a few UserSessions
     * const { count } = await prisma.userSession.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserSessionDeleteManyArgs>(args?: SelectSubset<T, UserSessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserSessions
     * const userSession = await prisma.userSession.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserSessionUpdateManyArgs>(args: SelectSubset<T, UserSessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserSessions and returns the data updated in the database.
     * @param {UserSessionUpdateManyAndReturnArgs} args - Arguments to update many UserSessions.
     * @example
     * // Update many UserSessions
     * const userSession = await prisma.userSession.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserSessions and only return the `id`
     * const userSessionWithIdOnly = await prisma.userSession.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserSessionUpdateManyAndReturnArgs>(args: SelectSubset<T, UserSessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserSession.
     * @param {UserSessionUpsertArgs} args - Arguments to update or create a UserSession.
     * @example
     * // Update or create a UserSession
     * const userSession = await prisma.userSession.upsert({
     *   create: {
     *     // ... data to create a UserSession
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserSession we want to update
     *   }
     * })
     */
    upsert<T extends UserSessionUpsertArgs>(args: SelectSubset<T, UserSessionUpsertArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionCountArgs} args - Arguments to filter UserSessions to count.
     * @example
     * // Count the number of UserSessions
     * const count = await prisma.userSession.count({
     *   where: {
     *     // ... the filter for the UserSessions we want to count
     *   }
     * })
    **/
    count<T extends UserSessionCountArgs>(
      args?: Subset<T, UserSessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserSessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserSessionAggregateArgs>(args: Subset<T, UserSessionAggregateArgs>): Prisma.PrismaPromise<GetUserSessionAggregateType<T>>

    /**
     * Group by UserSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserSessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserSessionGroupByArgs['orderBy'] }
        : { orderBy?: UserSessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserSessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserSession model
   */
  readonly fields: UserSessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserSession.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserSessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserSession model
   */
  interface UserSessionFieldRefs {
    readonly id: FieldRef<"UserSession", 'String'>
    readonly userId: FieldRef<"UserSession", 'String'>
    readonly token: FieldRef<"UserSession", 'String'>
    readonly refreshToken: FieldRef<"UserSession", 'String'>
    readonly expiresAt: FieldRef<"UserSession", 'DateTime'>
    readonly ipAddress: FieldRef<"UserSession", 'String'>
    readonly userAgent: FieldRef<"UserSession", 'String'>
    readonly createdAt: FieldRef<"UserSession", 'DateTime'>
    readonly updatedAt: FieldRef<"UserSession", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserSession findUnique
   */
  export type UserSessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * Filter, which UserSession to fetch.
     */
    where: UserSessionWhereUniqueInput
  }

  /**
   * UserSession findUniqueOrThrow
   */
  export type UserSessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * Filter, which UserSession to fetch.
     */
    where: UserSessionWhereUniqueInput
  }

  /**
   * UserSession findFirst
   */
  export type UserSessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * Filter, which UserSession to fetch.
     */
    where?: UserSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSessions to fetch.
     */
    orderBy?: UserSessionOrderByWithRelationInput | UserSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserSessions.
     */
    cursor?: UserSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserSessions.
     */
    distinct?: UserSessionScalarFieldEnum | UserSessionScalarFieldEnum[]
  }

  /**
   * UserSession findFirstOrThrow
   */
  export type UserSessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * Filter, which UserSession to fetch.
     */
    where?: UserSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSessions to fetch.
     */
    orderBy?: UserSessionOrderByWithRelationInput | UserSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserSessions.
     */
    cursor?: UserSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserSessions.
     */
    distinct?: UserSessionScalarFieldEnum | UserSessionScalarFieldEnum[]
  }

  /**
   * UserSession findMany
   */
  export type UserSessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * Filter, which UserSessions to fetch.
     */
    where?: UserSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSessions to fetch.
     */
    orderBy?: UserSessionOrderByWithRelationInput | UserSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserSessions.
     */
    cursor?: UserSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSessions.
     */
    skip?: number
    distinct?: UserSessionScalarFieldEnum | UserSessionScalarFieldEnum[]
  }

  /**
   * UserSession create
   */
  export type UserSessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * The data needed to create a UserSession.
     */
    data: XOR<UserSessionCreateInput, UserSessionUncheckedCreateInput>
  }

  /**
   * UserSession createMany
   */
  export type UserSessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserSessions.
     */
    data: UserSessionCreateManyInput | UserSessionCreateManyInput[]
  }

  /**
   * UserSession createManyAndReturn
   */
  export type UserSessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * The data used to create many UserSessions.
     */
    data: UserSessionCreateManyInput | UserSessionCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserSession update
   */
  export type UserSessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * The data needed to update a UserSession.
     */
    data: XOR<UserSessionUpdateInput, UserSessionUncheckedUpdateInput>
    /**
     * Choose, which UserSession to update.
     */
    where: UserSessionWhereUniqueInput
  }

  /**
   * UserSession updateMany
   */
  export type UserSessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserSessions.
     */
    data: XOR<UserSessionUpdateManyMutationInput, UserSessionUncheckedUpdateManyInput>
    /**
     * Filter which UserSessions to update
     */
    where?: UserSessionWhereInput
    /**
     * Limit how many UserSessions to update.
     */
    limit?: number
  }

  /**
   * UserSession updateManyAndReturn
   */
  export type UserSessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * The data used to update UserSessions.
     */
    data: XOR<UserSessionUpdateManyMutationInput, UserSessionUncheckedUpdateManyInput>
    /**
     * Filter which UserSessions to update
     */
    where?: UserSessionWhereInput
    /**
     * Limit how many UserSessions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserSession upsert
   */
  export type UserSessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * The filter to search for the UserSession to update in case it exists.
     */
    where: UserSessionWhereUniqueInput
    /**
     * In case the UserSession found by the `where` argument doesn't exist, create a new UserSession with this data.
     */
    create: XOR<UserSessionCreateInput, UserSessionUncheckedCreateInput>
    /**
     * In case the UserSession was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserSessionUpdateInput, UserSessionUncheckedUpdateInput>
  }

  /**
   * UserSession delete
   */
  export type UserSessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * Filter which UserSession to delete.
     */
    where: UserSessionWhereUniqueInput
  }

  /**
   * UserSession deleteMany
   */
  export type UserSessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserSessions to delete
     */
    where?: UserSessionWhereInput
    /**
     * Limit how many UserSessions to delete.
     */
    limit?: number
  }

  /**
   * UserSession without action
   */
  export type UserSessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
  }


  /**
   * Model Project
   */

  export type AggregateProject = {
    _count: ProjectCountAggregateOutputType | null
    _min: ProjectMinAggregateOutputType | null
    _max: ProjectMaxAggregateOutputType | null
  }

  export type ProjectMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    path: string | null
    version: string | null
    engineVersion: string | null
    userId: string | null
    isPublic: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    lastOpened: Date | null
  }

  export type ProjectMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    path: string | null
    version: string | null
    engineVersion: string | null
    userId: string | null
    isPublic: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    lastOpened: Date | null
  }

  export type ProjectCountAggregateOutputType = {
    id: number
    name: number
    description: number
    path: number
    version: number
    engineVersion: number
    userId: number
    isPublic: number
    createdAt: number
    updatedAt: number
    lastOpened: number
    settings: number
    _all: number
  }


  export type ProjectMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    path?: true
    version?: true
    engineVersion?: true
    userId?: true
    isPublic?: true
    createdAt?: true
    updatedAt?: true
    lastOpened?: true
  }

  export type ProjectMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    path?: true
    version?: true
    engineVersion?: true
    userId?: true
    isPublic?: true
    createdAt?: true
    updatedAt?: true
    lastOpened?: true
  }

  export type ProjectCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    path?: true
    version?: true
    engineVersion?: true
    userId?: true
    isPublic?: true
    createdAt?: true
    updatedAt?: true
    lastOpened?: true
    settings?: true
    _all?: true
  }

  export type ProjectAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Project to aggregate.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Projects
    **/
    _count?: true | ProjectCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProjectMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProjectMaxAggregateInputType
  }

  export type GetProjectAggregateType<T extends ProjectAggregateArgs> = {
        [P in keyof T & keyof AggregateProject]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProject[P]>
      : GetScalarType<T[P], AggregateProject[P]>
  }




  export type ProjectGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectWhereInput
    orderBy?: ProjectOrderByWithAggregationInput | ProjectOrderByWithAggregationInput[]
    by: ProjectScalarFieldEnum[] | ProjectScalarFieldEnum
    having?: ProjectScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProjectCountAggregateInputType | true
    _min?: ProjectMinAggregateInputType
    _max?: ProjectMaxAggregateInputType
  }

  export type ProjectGroupByOutputType = {
    id: string
    name: string
    description: string | null
    path: string
    version: string
    engineVersion: string
    userId: string
    isPublic: boolean
    createdAt: Date
    updatedAt: Date
    lastOpened: Date
    settings: JsonValue | null
    _count: ProjectCountAggregateOutputType | null
    _min: ProjectMinAggregateOutputType | null
    _max: ProjectMaxAggregateOutputType | null
  }

  type GetProjectGroupByPayload<T extends ProjectGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProjectGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProjectGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProjectGroupByOutputType[P]>
            : GetScalarType<T[P], ProjectGroupByOutputType[P]>
        }
      >
    >


  export type ProjectSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    path?: boolean
    version?: boolean
    engineVersion?: boolean
    userId?: boolean
    isPublic?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastOpened?: boolean
    settings?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    scenes?: boolean | Project$scenesArgs<ExtArgs>
    scripts?: boolean | Project$scriptsArgs<ExtArgs>
    materials?: boolean | Project$materialsArgs<ExtArgs>
    terrains?: boolean | Project$terrainsArgs<ExtArgs>
    animations?: boolean | Project$animationsArgs<ExtArgs>
    folders?: boolean | Project$foldersArgs<ExtArgs>
    projectSettings?: boolean | Project$projectSettingsArgs<ExtArgs>
    assets?: boolean | Project$assetsArgs<ExtArgs>
    _count?: boolean | ProjectCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["project"]>

  export type ProjectSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    path?: boolean
    version?: boolean
    engineVersion?: boolean
    userId?: boolean
    isPublic?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastOpened?: boolean
    settings?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["project"]>

  export type ProjectSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    path?: boolean
    version?: boolean
    engineVersion?: boolean
    userId?: boolean
    isPublic?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastOpened?: boolean
    settings?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["project"]>

  export type ProjectSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    path?: boolean
    version?: boolean
    engineVersion?: boolean
    userId?: boolean
    isPublic?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastOpened?: boolean
    settings?: boolean
  }

  export type ProjectOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "path" | "version" | "engineVersion" | "userId" | "isPublic" | "createdAt" | "updatedAt" | "lastOpened" | "settings", ExtArgs["result"]["project"]>
  export type ProjectInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    scenes?: boolean | Project$scenesArgs<ExtArgs>
    scripts?: boolean | Project$scriptsArgs<ExtArgs>
    materials?: boolean | Project$materialsArgs<ExtArgs>
    terrains?: boolean | Project$terrainsArgs<ExtArgs>
    animations?: boolean | Project$animationsArgs<ExtArgs>
    folders?: boolean | Project$foldersArgs<ExtArgs>
    projectSettings?: boolean | Project$projectSettingsArgs<ExtArgs>
    assets?: boolean | Project$assetsArgs<ExtArgs>
    _count?: boolean | ProjectCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProjectIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ProjectIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ProjectPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Project"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      scenes: Prisma.$ScenePayload<ExtArgs>[]
      scripts: Prisma.$ScriptPayload<ExtArgs>[]
      materials: Prisma.$MaterialPayload<ExtArgs>[]
      terrains: Prisma.$TerrainPayload<ExtArgs>[]
      animations: Prisma.$AnimationPayload<ExtArgs>[]
      folders: Prisma.$FolderPayload<ExtArgs>[]
      projectSettings: Prisma.$ProjectSettingPayload<ExtArgs>[]
      assets: Prisma.$AssetPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      path: string
      version: string
      engineVersion: string
      userId: string
      isPublic: boolean
      createdAt: Date
      updatedAt: Date
      lastOpened: Date
      settings: Prisma.JsonValue | null
    }, ExtArgs["result"]["project"]>
    composites: {}
  }

  type ProjectGetPayload<S extends boolean | null | undefined | ProjectDefaultArgs> = $Result.GetResult<Prisma.$ProjectPayload, S>

  type ProjectCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProjectFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProjectCountAggregateInputType | true
    }

  export interface ProjectDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Project'], meta: { name: 'Project' } }
    /**
     * Find zero or one Project that matches the filter.
     * @param {ProjectFindUniqueArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProjectFindUniqueArgs>(args: SelectSubset<T, ProjectFindUniqueArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Project that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProjectFindUniqueOrThrowArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProjectFindUniqueOrThrowArgs>(args: SelectSubset<T, ProjectFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Project that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindFirstArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProjectFindFirstArgs>(args?: SelectSubset<T, ProjectFindFirstArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Project that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindFirstOrThrowArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProjectFindFirstOrThrowArgs>(args?: SelectSubset<T, ProjectFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Projects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Projects
     * const projects = await prisma.project.findMany()
     * 
     * // Get first 10 Projects
     * const projects = await prisma.project.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const projectWithIdOnly = await prisma.project.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProjectFindManyArgs>(args?: SelectSubset<T, ProjectFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Project.
     * @param {ProjectCreateArgs} args - Arguments to create a Project.
     * @example
     * // Create one Project
     * const Project = await prisma.project.create({
     *   data: {
     *     // ... data to create a Project
     *   }
     * })
     * 
     */
    create<T extends ProjectCreateArgs>(args: SelectSubset<T, ProjectCreateArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Projects.
     * @param {ProjectCreateManyArgs} args - Arguments to create many Projects.
     * @example
     * // Create many Projects
     * const project = await prisma.project.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProjectCreateManyArgs>(args?: SelectSubset<T, ProjectCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Projects and returns the data saved in the database.
     * @param {ProjectCreateManyAndReturnArgs} args - Arguments to create many Projects.
     * @example
     * // Create many Projects
     * const project = await prisma.project.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Projects and only return the `id`
     * const projectWithIdOnly = await prisma.project.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProjectCreateManyAndReturnArgs>(args?: SelectSubset<T, ProjectCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Project.
     * @param {ProjectDeleteArgs} args - Arguments to delete one Project.
     * @example
     * // Delete one Project
     * const Project = await prisma.project.delete({
     *   where: {
     *     // ... filter to delete one Project
     *   }
     * })
     * 
     */
    delete<T extends ProjectDeleteArgs>(args: SelectSubset<T, ProjectDeleteArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Project.
     * @param {ProjectUpdateArgs} args - Arguments to update one Project.
     * @example
     * // Update one Project
     * const project = await prisma.project.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProjectUpdateArgs>(args: SelectSubset<T, ProjectUpdateArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Projects.
     * @param {ProjectDeleteManyArgs} args - Arguments to filter Projects to delete.
     * @example
     * // Delete a few Projects
     * const { count } = await prisma.project.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProjectDeleteManyArgs>(args?: SelectSubset<T, ProjectDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Projects
     * const project = await prisma.project.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProjectUpdateManyArgs>(args: SelectSubset<T, ProjectUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Projects and returns the data updated in the database.
     * @param {ProjectUpdateManyAndReturnArgs} args - Arguments to update many Projects.
     * @example
     * // Update many Projects
     * const project = await prisma.project.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Projects and only return the `id`
     * const projectWithIdOnly = await prisma.project.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProjectUpdateManyAndReturnArgs>(args: SelectSubset<T, ProjectUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Project.
     * @param {ProjectUpsertArgs} args - Arguments to update or create a Project.
     * @example
     * // Update or create a Project
     * const project = await prisma.project.upsert({
     *   create: {
     *     // ... data to create a Project
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Project we want to update
     *   }
     * })
     */
    upsert<T extends ProjectUpsertArgs>(args: SelectSubset<T, ProjectUpsertArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectCountArgs} args - Arguments to filter Projects to count.
     * @example
     * // Count the number of Projects
     * const count = await prisma.project.count({
     *   where: {
     *     // ... the filter for the Projects we want to count
     *   }
     * })
    **/
    count<T extends ProjectCountArgs>(
      args?: Subset<T, ProjectCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProjectCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Project.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProjectAggregateArgs>(args: Subset<T, ProjectAggregateArgs>): Prisma.PrismaPromise<GetProjectAggregateType<T>>

    /**
     * Group by Project.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProjectGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProjectGroupByArgs['orderBy'] }
        : { orderBy?: ProjectGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProjectGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProjectGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Project model
   */
  readonly fields: ProjectFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Project.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProjectClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    scenes<T extends Project$scenesArgs<ExtArgs> = {}>(args?: Subset<T, Project$scenesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScenePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    scripts<T extends Project$scriptsArgs<ExtArgs> = {}>(args?: Subset<T, Project$scriptsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScriptPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    materials<T extends Project$materialsArgs<ExtArgs> = {}>(args?: Subset<T, Project$materialsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MaterialPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    terrains<T extends Project$terrainsArgs<ExtArgs> = {}>(args?: Subset<T, Project$terrainsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TerrainPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    animations<T extends Project$animationsArgs<ExtArgs> = {}>(args?: Subset<T, Project$animationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnimationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    folders<T extends Project$foldersArgs<ExtArgs> = {}>(args?: Subset<T, Project$foldersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FolderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    projectSettings<T extends Project$projectSettingsArgs<ExtArgs> = {}>(args?: Subset<T, Project$projectSettingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectSettingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    assets<T extends Project$assetsArgs<ExtArgs> = {}>(args?: Subset<T, Project$assetsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Project model
   */
  interface ProjectFieldRefs {
    readonly id: FieldRef<"Project", 'String'>
    readonly name: FieldRef<"Project", 'String'>
    readonly description: FieldRef<"Project", 'String'>
    readonly path: FieldRef<"Project", 'String'>
    readonly version: FieldRef<"Project", 'String'>
    readonly engineVersion: FieldRef<"Project", 'String'>
    readonly userId: FieldRef<"Project", 'String'>
    readonly isPublic: FieldRef<"Project", 'Boolean'>
    readonly createdAt: FieldRef<"Project", 'DateTime'>
    readonly updatedAt: FieldRef<"Project", 'DateTime'>
    readonly lastOpened: FieldRef<"Project", 'DateTime'>
    readonly settings: FieldRef<"Project", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * Project findUnique
   */
  export type ProjectFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project findUniqueOrThrow
   */
  export type ProjectFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project findFirst
   */
  export type ProjectFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Projects.
     */
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Project findFirstOrThrow
   */
  export type ProjectFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Projects.
     */
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Project findMany
   */
  export type ProjectFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Projects to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Project create
   */
  export type ProjectCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The data needed to create a Project.
     */
    data: XOR<ProjectCreateInput, ProjectUncheckedCreateInput>
  }

  /**
   * Project createMany
   */
  export type ProjectCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Projects.
     */
    data: ProjectCreateManyInput | ProjectCreateManyInput[]
  }

  /**
   * Project createManyAndReturn
   */
  export type ProjectCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * The data used to create many Projects.
     */
    data: ProjectCreateManyInput | ProjectCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Project update
   */
  export type ProjectUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The data needed to update a Project.
     */
    data: XOR<ProjectUpdateInput, ProjectUncheckedUpdateInput>
    /**
     * Choose, which Project to update.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project updateMany
   */
  export type ProjectUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Projects.
     */
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyInput>
    /**
     * Filter which Projects to update
     */
    where?: ProjectWhereInput
    /**
     * Limit how many Projects to update.
     */
    limit?: number
  }

  /**
   * Project updateManyAndReturn
   */
  export type ProjectUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * The data used to update Projects.
     */
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyInput>
    /**
     * Filter which Projects to update
     */
    where?: ProjectWhereInput
    /**
     * Limit how many Projects to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Project upsert
   */
  export type ProjectUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The filter to search for the Project to update in case it exists.
     */
    where: ProjectWhereUniqueInput
    /**
     * In case the Project found by the `where` argument doesn't exist, create a new Project with this data.
     */
    create: XOR<ProjectCreateInput, ProjectUncheckedCreateInput>
    /**
     * In case the Project was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProjectUpdateInput, ProjectUncheckedUpdateInput>
  }

  /**
   * Project delete
   */
  export type ProjectDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter which Project to delete.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project deleteMany
   */
  export type ProjectDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Projects to delete
     */
    where?: ProjectWhereInput
    /**
     * Limit how many Projects to delete.
     */
    limit?: number
  }

  /**
   * Project.scenes
   */
  export type Project$scenesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Scene
     */
    select?: SceneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Scene
     */
    omit?: SceneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SceneInclude<ExtArgs> | null
    where?: SceneWhereInput
    orderBy?: SceneOrderByWithRelationInput | SceneOrderByWithRelationInput[]
    cursor?: SceneWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SceneScalarFieldEnum | SceneScalarFieldEnum[]
  }

  /**
   * Project.scripts
   */
  export type Project$scriptsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Script
     */
    select?: ScriptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Script
     */
    omit?: ScriptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScriptInclude<ExtArgs> | null
    where?: ScriptWhereInput
    orderBy?: ScriptOrderByWithRelationInput | ScriptOrderByWithRelationInput[]
    cursor?: ScriptWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ScriptScalarFieldEnum | ScriptScalarFieldEnum[]
  }

  /**
   * Project.materials
   */
  export type Project$materialsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Material
     */
    select?: MaterialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Material
     */
    omit?: MaterialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialInclude<ExtArgs> | null
    where?: MaterialWhereInput
    orderBy?: MaterialOrderByWithRelationInput | MaterialOrderByWithRelationInput[]
    cursor?: MaterialWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MaterialScalarFieldEnum | MaterialScalarFieldEnum[]
  }

  /**
   * Project.terrains
   */
  export type Project$terrainsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Terrain
     */
    select?: TerrainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Terrain
     */
    omit?: TerrainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TerrainInclude<ExtArgs> | null
    where?: TerrainWhereInput
    orderBy?: TerrainOrderByWithRelationInput | TerrainOrderByWithRelationInput[]
    cursor?: TerrainWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TerrainScalarFieldEnum | TerrainScalarFieldEnum[]
  }

  /**
   * Project.animations
   */
  export type Project$animationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Animation
     */
    select?: AnimationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Animation
     */
    omit?: AnimationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimationInclude<ExtArgs> | null
    where?: AnimationWhereInput
    orderBy?: AnimationOrderByWithRelationInput | AnimationOrderByWithRelationInput[]
    cursor?: AnimationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AnimationScalarFieldEnum | AnimationScalarFieldEnum[]
  }

  /**
   * Project.folders
   */
  export type Project$foldersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Folder
     */
    select?: FolderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Folder
     */
    omit?: FolderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FolderInclude<ExtArgs> | null
    where?: FolderWhereInput
    orderBy?: FolderOrderByWithRelationInput | FolderOrderByWithRelationInput[]
    cursor?: FolderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FolderScalarFieldEnum | FolderScalarFieldEnum[]
  }

  /**
   * Project.projectSettings
   */
  export type Project$projectSettingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectSetting
     */
    select?: ProjectSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectSetting
     */
    omit?: ProjectSettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectSettingInclude<ExtArgs> | null
    where?: ProjectSettingWhereInput
    orderBy?: ProjectSettingOrderByWithRelationInput | ProjectSettingOrderByWithRelationInput[]
    cursor?: ProjectSettingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProjectSettingScalarFieldEnum | ProjectSettingScalarFieldEnum[]
  }

  /**
   * Project.assets
   */
  export type Project$assetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Asset
     */
    omit?: AssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    where?: AssetWhereInput
    orderBy?: AssetOrderByWithRelationInput | AssetOrderByWithRelationInput[]
    cursor?: AssetWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AssetScalarFieldEnum | AssetScalarFieldEnum[]
  }

  /**
   * Project without action
   */
  export type ProjectDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
  }


  /**
   * Model Folder
   */

  export type AggregateFolder = {
    _count: FolderCountAggregateOutputType | null
    _min: FolderMinAggregateOutputType | null
    _max: FolderMaxAggregateOutputType | null
  }

  export type FolderMinAggregateOutputType = {
    id: string | null
    name: string | null
    path: string | null
    parentId: string | null
    projectId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FolderMaxAggregateOutputType = {
    id: string | null
    name: string | null
    path: string | null
    parentId: string | null
    projectId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FolderCountAggregateOutputType = {
    id: number
    name: number
    path: number
    parentId: number
    projectId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FolderMinAggregateInputType = {
    id?: true
    name?: true
    path?: true
    parentId?: true
    projectId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FolderMaxAggregateInputType = {
    id?: true
    name?: true
    path?: true
    parentId?: true
    projectId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FolderCountAggregateInputType = {
    id?: true
    name?: true
    path?: true
    parentId?: true
    projectId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FolderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Folder to aggregate.
     */
    where?: FolderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Folders to fetch.
     */
    orderBy?: FolderOrderByWithRelationInput | FolderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FolderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Folders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Folders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Folders
    **/
    _count?: true | FolderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FolderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FolderMaxAggregateInputType
  }

  export type GetFolderAggregateType<T extends FolderAggregateArgs> = {
        [P in keyof T & keyof AggregateFolder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFolder[P]>
      : GetScalarType<T[P], AggregateFolder[P]>
  }




  export type FolderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FolderWhereInput
    orderBy?: FolderOrderByWithAggregationInput | FolderOrderByWithAggregationInput[]
    by: FolderScalarFieldEnum[] | FolderScalarFieldEnum
    having?: FolderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FolderCountAggregateInputType | true
    _min?: FolderMinAggregateInputType
    _max?: FolderMaxAggregateInputType
  }

  export type FolderGroupByOutputType = {
    id: string
    name: string
    path: string
    parentId: string | null
    projectId: string
    createdAt: Date
    updatedAt: Date
    _count: FolderCountAggregateOutputType | null
    _min: FolderMinAggregateOutputType | null
    _max: FolderMaxAggregateOutputType | null
  }

  type GetFolderGroupByPayload<T extends FolderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FolderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FolderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FolderGroupByOutputType[P]>
            : GetScalarType<T[P], FolderGroupByOutputType[P]>
        }
      >
    >


  export type FolderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    path?: boolean
    parentId?: boolean
    projectId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    parent?: boolean | Folder$parentArgs<ExtArgs>
    children?: boolean | Folder$childrenArgs<ExtArgs>
    assets?: boolean | Folder$assetsArgs<ExtArgs>
    _count?: boolean | FolderCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["folder"]>

  export type FolderSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    path?: boolean
    parentId?: boolean
    projectId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    parent?: boolean | Folder$parentArgs<ExtArgs>
  }, ExtArgs["result"]["folder"]>

  export type FolderSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    path?: boolean
    parentId?: boolean
    projectId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    parent?: boolean | Folder$parentArgs<ExtArgs>
  }, ExtArgs["result"]["folder"]>

  export type FolderSelectScalar = {
    id?: boolean
    name?: boolean
    path?: boolean
    parentId?: boolean
    projectId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type FolderOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "path" | "parentId" | "projectId" | "createdAt" | "updatedAt", ExtArgs["result"]["folder"]>
  export type FolderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    parent?: boolean | Folder$parentArgs<ExtArgs>
    children?: boolean | Folder$childrenArgs<ExtArgs>
    assets?: boolean | Folder$assetsArgs<ExtArgs>
    _count?: boolean | FolderCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type FolderIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    parent?: boolean | Folder$parentArgs<ExtArgs>
  }
  export type FolderIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    parent?: boolean | Folder$parentArgs<ExtArgs>
  }

  export type $FolderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Folder"
    objects: {
      project: Prisma.$ProjectPayload<ExtArgs>
      parent: Prisma.$FolderPayload<ExtArgs> | null
      children: Prisma.$FolderPayload<ExtArgs>[]
      assets: Prisma.$AssetPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      path: string
      parentId: string | null
      projectId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["folder"]>
    composites: {}
  }

  type FolderGetPayload<S extends boolean | null | undefined | FolderDefaultArgs> = $Result.GetResult<Prisma.$FolderPayload, S>

  type FolderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FolderFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FolderCountAggregateInputType | true
    }

  export interface FolderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Folder'], meta: { name: 'Folder' } }
    /**
     * Find zero or one Folder that matches the filter.
     * @param {FolderFindUniqueArgs} args - Arguments to find a Folder
     * @example
     * // Get one Folder
     * const folder = await prisma.folder.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FolderFindUniqueArgs>(args: SelectSubset<T, FolderFindUniqueArgs<ExtArgs>>): Prisma__FolderClient<$Result.GetResult<Prisma.$FolderPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Folder that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FolderFindUniqueOrThrowArgs} args - Arguments to find a Folder
     * @example
     * // Get one Folder
     * const folder = await prisma.folder.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FolderFindUniqueOrThrowArgs>(args: SelectSubset<T, FolderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FolderClient<$Result.GetResult<Prisma.$FolderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Folder that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FolderFindFirstArgs} args - Arguments to find a Folder
     * @example
     * // Get one Folder
     * const folder = await prisma.folder.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FolderFindFirstArgs>(args?: SelectSubset<T, FolderFindFirstArgs<ExtArgs>>): Prisma__FolderClient<$Result.GetResult<Prisma.$FolderPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Folder that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FolderFindFirstOrThrowArgs} args - Arguments to find a Folder
     * @example
     * // Get one Folder
     * const folder = await prisma.folder.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FolderFindFirstOrThrowArgs>(args?: SelectSubset<T, FolderFindFirstOrThrowArgs<ExtArgs>>): Prisma__FolderClient<$Result.GetResult<Prisma.$FolderPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Folders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FolderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Folders
     * const folders = await prisma.folder.findMany()
     * 
     * // Get first 10 Folders
     * const folders = await prisma.folder.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const folderWithIdOnly = await prisma.folder.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FolderFindManyArgs>(args?: SelectSubset<T, FolderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FolderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Folder.
     * @param {FolderCreateArgs} args - Arguments to create a Folder.
     * @example
     * // Create one Folder
     * const Folder = await prisma.folder.create({
     *   data: {
     *     // ... data to create a Folder
     *   }
     * })
     * 
     */
    create<T extends FolderCreateArgs>(args: SelectSubset<T, FolderCreateArgs<ExtArgs>>): Prisma__FolderClient<$Result.GetResult<Prisma.$FolderPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Folders.
     * @param {FolderCreateManyArgs} args - Arguments to create many Folders.
     * @example
     * // Create many Folders
     * const folder = await prisma.folder.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FolderCreateManyArgs>(args?: SelectSubset<T, FolderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Folders and returns the data saved in the database.
     * @param {FolderCreateManyAndReturnArgs} args - Arguments to create many Folders.
     * @example
     * // Create many Folders
     * const folder = await prisma.folder.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Folders and only return the `id`
     * const folderWithIdOnly = await prisma.folder.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FolderCreateManyAndReturnArgs>(args?: SelectSubset<T, FolderCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FolderPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Folder.
     * @param {FolderDeleteArgs} args - Arguments to delete one Folder.
     * @example
     * // Delete one Folder
     * const Folder = await prisma.folder.delete({
     *   where: {
     *     // ... filter to delete one Folder
     *   }
     * })
     * 
     */
    delete<T extends FolderDeleteArgs>(args: SelectSubset<T, FolderDeleteArgs<ExtArgs>>): Prisma__FolderClient<$Result.GetResult<Prisma.$FolderPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Folder.
     * @param {FolderUpdateArgs} args - Arguments to update one Folder.
     * @example
     * // Update one Folder
     * const folder = await prisma.folder.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FolderUpdateArgs>(args: SelectSubset<T, FolderUpdateArgs<ExtArgs>>): Prisma__FolderClient<$Result.GetResult<Prisma.$FolderPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Folders.
     * @param {FolderDeleteManyArgs} args - Arguments to filter Folders to delete.
     * @example
     * // Delete a few Folders
     * const { count } = await prisma.folder.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FolderDeleteManyArgs>(args?: SelectSubset<T, FolderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Folders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FolderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Folders
     * const folder = await prisma.folder.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FolderUpdateManyArgs>(args: SelectSubset<T, FolderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Folders and returns the data updated in the database.
     * @param {FolderUpdateManyAndReturnArgs} args - Arguments to update many Folders.
     * @example
     * // Update many Folders
     * const folder = await prisma.folder.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Folders and only return the `id`
     * const folderWithIdOnly = await prisma.folder.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FolderUpdateManyAndReturnArgs>(args: SelectSubset<T, FolderUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FolderPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Folder.
     * @param {FolderUpsertArgs} args - Arguments to update or create a Folder.
     * @example
     * // Update or create a Folder
     * const folder = await prisma.folder.upsert({
     *   create: {
     *     // ... data to create a Folder
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Folder we want to update
     *   }
     * })
     */
    upsert<T extends FolderUpsertArgs>(args: SelectSubset<T, FolderUpsertArgs<ExtArgs>>): Prisma__FolderClient<$Result.GetResult<Prisma.$FolderPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Folders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FolderCountArgs} args - Arguments to filter Folders to count.
     * @example
     * // Count the number of Folders
     * const count = await prisma.folder.count({
     *   where: {
     *     // ... the filter for the Folders we want to count
     *   }
     * })
    **/
    count<T extends FolderCountArgs>(
      args?: Subset<T, FolderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FolderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Folder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FolderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FolderAggregateArgs>(args: Subset<T, FolderAggregateArgs>): Prisma.PrismaPromise<GetFolderAggregateType<T>>

    /**
     * Group by Folder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FolderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FolderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FolderGroupByArgs['orderBy'] }
        : { orderBy?: FolderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FolderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFolderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Folder model
   */
  readonly fields: FolderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Folder.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FolderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    project<T extends ProjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectDefaultArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    parent<T extends Folder$parentArgs<ExtArgs> = {}>(args?: Subset<T, Folder$parentArgs<ExtArgs>>): Prisma__FolderClient<$Result.GetResult<Prisma.$FolderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    children<T extends Folder$childrenArgs<ExtArgs> = {}>(args?: Subset<T, Folder$childrenArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FolderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    assets<T extends Folder$assetsArgs<ExtArgs> = {}>(args?: Subset<T, Folder$assetsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Folder model
   */
  interface FolderFieldRefs {
    readonly id: FieldRef<"Folder", 'String'>
    readonly name: FieldRef<"Folder", 'String'>
    readonly path: FieldRef<"Folder", 'String'>
    readonly parentId: FieldRef<"Folder", 'String'>
    readonly projectId: FieldRef<"Folder", 'String'>
    readonly createdAt: FieldRef<"Folder", 'DateTime'>
    readonly updatedAt: FieldRef<"Folder", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Folder findUnique
   */
  export type FolderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Folder
     */
    select?: FolderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Folder
     */
    omit?: FolderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FolderInclude<ExtArgs> | null
    /**
     * Filter, which Folder to fetch.
     */
    where: FolderWhereUniqueInput
  }

  /**
   * Folder findUniqueOrThrow
   */
  export type FolderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Folder
     */
    select?: FolderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Folder
     */
    omit?: FolderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FolderInclude<ExtArgs> | null
    /**
     * Filter, which Folder to fetch.
     */
    where: FolderWhereUniqueInput
  }

  /**
   * Folder findFirst
   */
  export type FolderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Folder
     */
    select?: FolderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Folder
     */
    omit?: FolderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FolderInclude<ExtArgs> | null
    /**
     * Filter, which Folder to fetch.
     */
    where?: FolderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Folders to fetch.
     */
    orderBy?: FolderOrderByWithRelationInput | FolderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Folders.
     */
    cursor?: FolderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Folders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Folders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Folders.
     */
    distinct?: FolderScalarFieldEnum | FolderScalarFieldEnum[]
  }

  /**
   * Folder findFirstOrThrow
   */
  export type FolderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Folder
     */
    select?: FolderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Folder
     */
    omit?: FolderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FolderInclude<ExtArgs> | null
    /**
     * Filter, which Folder to fetch.
     */
    where?: FolderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Folders to fetch.
     */
    orderBy?: FolderOrderByWithRelationInput | FolderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Folders.
     */
    cursor?: FolderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Folders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Folders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Folders.
     */
    distinct?: FolderScalarFieldEnum | FolderScalarFieldEnum[]
  }

  /**
   * Folder findMany
   */
  export type FolderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Folder
     */
    select?: FolderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Folder
     */
    omit?: FolderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FolderInclude<ExtArgs> | null
    /**
     * Filter, which Folders to fetch.
     */
    where?: FolderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Folders to fetch.
     */
    orderBy?: FolderOrderByWithRelationInput | FolderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Folders.
     */
    cursor?: FolderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Folders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Folders.
     */
    skip?: number
    distinct?: FolderScalarFieldEnum | FolderScalarFieldEnum[]
  }

  /**
   * Folder create
   */
  export type FolderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Folder
     */
    select?: FolderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Folder
     */
    omit?: FolderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FolderInclude<ExtArgs> | null
    /**
     * The data needed to create a Folder.
     */
    data: XOR<FolderCreateInput, FolderUncheckedCreateInput>
  }

  /**
   * Folder createMany
   */
  export type FolderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Folders.
     */
    data: FolderCreateManyInput | FolderCreateManyInput[]
  }

  /**
   * Folder createManyAndReturn
   */
  export type FolderCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Folder
     */
    select?: FolderSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Folder
     */
    omit?: FolderOmit<ExtArgs> | null
    /**
     * The data used to create many Folders.
     */
    data: FolderCreateManyInput | FolderCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FolderIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Folder update
   */
  export type FolderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Folder
     */
    select?: FolderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Folder
     */
    omit?: FolderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FolderInclude<ExtArgs> | null
    /**
     * The data needed to update a Folder.
     */
    data: XOR<FolderUpdateInput, FolderUncheckedUpdateInput>
    /**
     * Choose, which Folder to update.
     */
    where: FolderWhereUniqueInput
  }

  /**
   * Folder updateMany
   */
  export type FolderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Folders.
     */
    data: XOR<FolderUpdateManyMutationInput, FolderUncheckedUpdateManyInput>
    /**
     * Filter which Folders to update
     */
    where?: FolderWhereInput
    /**
     * Limit how many Folders to update.
     */
    limit?: number
  }

  /**
   * Folder updateManyAndReturn
   */
  export type FolderUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Folder
     */
    select?: FolderSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Folder
     */
    omit?: FolderOmit<ExtArgs> | null
    /**
     * The data used to update Folders.
     */
    data: XOR<FolderUpdateManyMutationInput, FolderUncheckedUpdateManyInput>
    /**
     * Filter which Folders to update
     */
    where?: FolderWhereInput
    /**
     * Limit how many Folders to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FolderIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Folder upsert
   */
  export type FolderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Folder
     */
    select?: FolderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Folder
     */
    omit?: FolderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FolderInclude<ExtArgs> | null
    /**
     * The filter to search for the Folder to update in case it exists.
     */
    where: FolderWhereUniqueInput
    /**
     * In case the Folder found by the `where` argument doesn't exist, create a new Folder with this data.
     */
    create: XOR<FolderCreateInput, FolderUncheckedCreateInput>
    /**
     * In case the Folder was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FolderUpdateInput, FolderUncheckedUpdateInput>
  }

  /**
   * Folder delete
   */
  export type FolderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Folder
     */
    select?: FolderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Folder
     */
    omit?: FolderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FolderInclude<ExtArgs> | null
    /**
     * Filter which Folder to delete.
     */
    where: FolderWhereUniqueInput
  }

  /**
   * Folder deleteMany
   */
  export type FolderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Folders to delete
     */
    where?: FolderWhereInput
    /**
     * Limit how many Folders to delete.
     */
    limit?: number
  }

  /**
   * Folder.parent
   */
  export type Folder$parentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Folder
     */
    select?: FolderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Folder
     */
    omit?: FolderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FolderInclude<ExtArgs> | null
    where?: FolderWhereInput
  }

  /**
   * Folder.children
   */
  export type Folder$childrenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Folder
     */
    select?: FolderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Folder
     */
    omit?: FolderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FolderInclude<ExtArgs> | null
    where?: FolderWhereInput
    orderBy?: FolderOrderByWithRelationInput | FolderOrderByWithRelationInput[]
    cursor?: FolderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FolderScalarFieldEnum | FolderScalarFieldEnum[]
  }

  /**
   * Folder.assets
   */
  export type Folder$assetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Asset
     */
    omit?: AssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    where?: AssetWhereInput
    orderBy?: AssetOrderByWithRelationInput | AssetOrderByWithRelationInput[]
    cursor?: AssetWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AssetScalarFieldEnum | AssetScalarFieldEnum[]
  }

  /**
   * Folder without action
   */
  export type FolderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Folder
     */
    select?: FolderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Folder
     */
    omit?: FolderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FolderInclude<ExtArgs> | null
  }


  /**
   * Model Scene
   */

  export type AggregateScene = {
    _count: SceneCountAggregateOutputType | null
    _min: SceneMinAggregateOutputType | null
    _max: SceneMaxAggregateOutputType | null
  }

  export type SceneMinAggregateOutputType = {
    id: string | null
    name: string | null
    path: string | null
    type: string | null
    projectId: string | null
    description: string | null
    isMain: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SceneMaxAggregateOutputType = {
    id: string | null
    name: string | null
    path: string | null
    type: string | null
    projectId: string | null
    description: string | null
    isMain: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SceneCountAggregateOutputType = {
    id: number
    name: number
    path: number
    type: number
    projectId: number
    description: number
    isMain: number
    createdAt: number
    updatedAt: number
    sceneData: number
    _all: number
  }


  export type SceneMinAggregateInputType = {
    id?: true
    name?: true
    path?: true
    type?: true
    projectId?: true
    description?: true
    isMain?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SceneMaxAggregateInputType = {
    id?: true
    name?: true
    path?: true
    type?: true
    projectId?: true
    description?: true
    isMain?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SceneCountAggregateInputType = {
    id?: true
    name?: true
    path?: true
    type?: true
    projectId?: true
    description?: true
    isMain?: true
    createdAt?: true
    updatedAt?: true
    sceneData?: true
    _all?: true
  }

  export type SceneAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Scene to aggregate.
     */
    where?: SceneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Scenes to fetch.
     */
    orderBy?: SceneOrderByWithRelationInput | SceneOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SceneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Scenes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Scenes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Scenes
    **/
    _count?: true | SceneCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SceneMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SceneMaxAggregateInputType
  }

  export type GetSceneAggregateType<T extends SceneAggregateArgs> = {
        [P in keyof T & keyof AggregateScene]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateScene[P]>
      : GetScalarType<T[P], AggregateScene[P]>
  }




  export type SceneGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SceneWhereInput
    orderBy?: SceneOrderByWithAggregationInput | SceneOrderByWithAggregationInput[]
    by: SceneScalarFieldEnum[] | SceneScalarFieldEnum
    having?: SceneScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SceneCountAggregateInputType | true
    _min?: SceneMinAggregateInputType
    _max?: SceneMaxAggregateInputType
  }

  export type SceneGroupByOutputType = {
    id: string
    name: string
    path: string
    type: string
    projectId: string
    description: string | null
    isMain: boolean
    createdAt: Date
    updatedAt: Date
    sceneData: JsonValue | null
    _count: SceneCountAggregateOutputType | null
    _min: SceneMinAggregateOutputType | null
    _max: SceneMaxAggregateOutputType | null
  }

  type GetSceneGroupByPayload<T extends SceneGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SceneGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SceneGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SceneGroupByOutputType[P]>
            : GetScalarType<T[P], SceneGroupByOutputType[P]>
        }
      >
    >


  export type SceneSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    path?: boolean
    type?: boolean
    projectId?: boolean
    description?: boolean
    isMain?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    sceneData?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    nodes?: boolean | Scene$nodesArgs<ExtArgs>
    assetUsages?: boolean | Scene$assetUsagesArgs<ExtArgs>
    _count?: boolean | SceneCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["scene"]>

  export type SceneSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    path?: boolean
    type?: boolean
    projectId?: boolean
    description?: boolean
    isMain?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    sceneData?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["scene"]>

  export type SceneSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    path?: boolean
    type?: boolean
    projectId?: boolean
    description?: boolean
    isMain?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    sceneData?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["scene"]>

  export type SceneSelectScalar = {
    id?: boolean
    name?: boolean
    path?: boolean
    type?: boolean
    projectId?: boolean
    description?: boolean
    isMain?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    sceneData?: boolean
  }

  export type SceneOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "path" | "type" | "projectId" | "description" | "isMain" | "createdAt" | "updatedAt" | "sceneData", ExtArgs["result"]["scene"]>
  export type SceneInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    nodes?: boolean | Scene$nodesArgs<ExtArgs>
    assetUsages?: boolean | Scene$assetUsagesArgs<ExtArgs>
    _count?: boolean | SceneCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SceneIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }
  export type SceneIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }

  export type $ScenePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Scene"
    objects: {
      project: Prisma.$ProjectPayload<ExtArgs>
      nodes: Prisma.$SceneNodePayload<ExtArgs>[]
      assetUsages: Prisma.$SceneAssetUsagePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      path: string
      type: string
      projectId: string
      description: string | null
      isMain: boolean
      createdAt: Date
      updatedAt: Date
      sceneData: Prisma.JsonValue | null
    }, ExtArgs["result"]["scene"]>
    composites: {}
  }

  type SceneGetPayload<S extends boolean | null | undefined | SceneDefaultArgs> = $Result.GetResult<Prisma.$ScenePayload, S>

  type SceneCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SceneFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SceneCountAggregateInputType | true
    }

  export interface SceneDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Scene'], meta: { name: 'Scene' } }
    /**
     * Find zero or one Scene that matches the filter.
     * @param {SceneFindUniqueArgs} args - Arguments to find a Scene
     * @example
     * // Get one Scene
     * const scene = await prisma.scene.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SceneFindUniqueArgs>(args: SelectSubset<T, SceneFindUniqueArgs<ExtArgs>>): Prisma__SceneClient<$Result.GetResult<Prisma.$ScenePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Scene that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SceneFindUniqueOrThrowArgs} args - Arguments to find a Scene
     * @example
     * // Get one Scene
     * const scene = await prisma.scene.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SceneFindUniqueOrThrowArgs>(args: SelectSubset<T, SceneFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SceneClient<$Result.GetResult<Prisma.$ScenePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Scene that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SceneFindFirstArgs} args - Arguments to find a Scene
     * @example
     * // Get one Scene
     * const scene = await prisma.scene.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SceneFindFirstArgs>(args?: SelectSubset<T, SceneFindFirstArgs<ExtArgs>>): Prisma__SceneClient<$Result.GetResult<Prisma.$ScenePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Scene that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SceneFindFirstOrThrowArgs} args - Arguments to find a Scene
     * @example
     * // Get one Scene
     * const scene = await prisma.scene.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SceneFindFirstOrThrowArgs>(args?: SelectSubset<T, SceneFindFirstOrThrowArgs<ExtArgs>>): Prisma__SceneClient<$Result.GetResult<Prisma.$ScenePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Scenes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SceneFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Scenes
     * const scenes = await prisma.scene.findMany()
     * 
     * // Get first 10 Scenes
     * const scenes = await prisma.scene.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sceneWithIdOnly = await prisma.scene.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SceneFindManyArgs>(args?: SelectSubset<T, SceneFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScenePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Scene.
     * @param {SceneCreateArgs} args - Arguments to create a Scene.
     * @example
     * // Create one Scene
     * const Scene = await prisma.scene.create({
     *   data: {
     *     // ... data to create a Scene
     *   }
     * })
     * 
     */
    create<T extends SceneCreateArgs>(args: SelectSubset<T, SceneCreateArgs<ExtArgs>>): Prisma__SceneClient<$Result.GetResult<Prisma.$ScenePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Scenes.
     * @param {SceneCreateManyArgs} args - Arguments to create many Scenes.
     * @example
     * // Create many Scenes
     * const scene = await prisma.scene.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SceneCreateManyArgs>(args?: SelectSubset<T, SceneCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Scenes and returns the data saved in the database.
     * @param {SceneCreateManyAndReturnArgs} args - Arguments to create many Scenes.
     * @example
     * // Create many Scenes
     * const scene = await prisma.scene.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Scenes and only return the `id`
     * const sceneWithIdOnly = await prisma.scene.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SceneCreateManyAndReturnArgs>(args?: SelectSubset<T, SceneCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScenePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Scene.
     * @param {SceneDeleteArgs} args - Arguments to delete one Scene.
     * @example
     * // Delete one Scene
     * const Scene = await prisma.scene.delete({
     *   where: {
     *     // ... filter to delete one Scene
     *   }
     * })
     * 
     */
    delete<T extends SceneDeleteArgs>(args: SelectSubset<T, SceneDeleteArgs<ExtArgs>>): Prisma__SceneClient<$Result.GetResult<Prisma.$ScenePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Scene.
     * @param {SceneUpdateArgs} args - Arguments to update one Scene.
     * @example
     * // Update one Scene
     * const scene = await prisma.scene.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SceneUpdateArgs>(args: SelectSubset<T, SceneUpdateArgs<ExtArgs>>): Prisma__SceneClient<$Result.GetResult<Prisma.$ScenePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Scenes.
     * @param {SceneDeleteManyArgs} args - Arguments to filter Scenes to delete.
     * @example
     * // Delete a few Scenes
     * const { count } = await prisma.scene.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SceneDeleteManyArgs>(args?: SelectSubset<T, SceneDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Scenes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SceneUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Scenes
     * const scene = await prisma.scene.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SceneUpdateManyArgs>(args: SelectSubset<T, SceneUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Scenes and returns the data updated in the database.
     * @param {SceneUpdateManyAndReturnArgs} args - Arguments to update many Scenes.
     * @example
     * // Update many Scenes
     * const scene = await prisma.scene.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Scenes and only return the `id`
     * const sceneWithIdOnly = await prisma.scene.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SceneUpdateManyAndReturnArgs>(args: SelectSubset<T, SceneUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScenePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Scene.
     * @param {SceneUpsertArgs} args - Arguments to update or create a Scene.
     * @example
     * // Update or create a Scene
     * const scene = await prisma.scene.upsert({
     *   create: {
     *     // ... data to create a Scene
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Scene we want to update
     *   }
     * })
     */
    upsert<T extends SceneUpsertArgs>(args: SelectSubset<T, SceneUpsertArgs<ExtArgs>>): Prisma__SceneClient<$Result.GetResult<Prisma.$ScenePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Scenes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SceneCountArgs} args - Arguments to filter Scenes to count.
     * @example
     * // Count the number of Scenes
     * const count = await prisma.scene.count({
     *   where: {
     *     // ... the filter for the Scenes we want to count
     *   }
     * })
    **/
    count<T extends SceneCountArgs>(
      args?: Subset<T, SceneCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SceneCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Scene.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SceneAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SceneAggregateArgs>(args: Subset<T, SceneAggregateArgs>): Prisma.PrismaPromise<GetSceneAggregateType<T>>

    /**
     * Group by Scene.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SceneGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SceneGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SceneGroupByArgs['orderBy'] }
        : { orderBy?: SceneGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SceneGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSceneGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Scene model
   */
  readonly fields: SceneFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Scene.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SceneClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    project<T extends ProjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectDefaultArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    nodes<T extends Scene$nodesArgs<ExtArgs> = {}>(args?: Subset<T, Scene$nodesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SceneNodePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    assetUsages<T extends Scene$assetUsagesArgs<ExtArgs> = {}>(args?: Subset<T, Scene$assetUsagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SceneAssetUsagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Scene model
   */
  interface SceneFieldRefs {
    readonly id: FieldRef<"Scene", 'String'>
    readonly name: FieldRef<"Scene", 'String'>
    readonly path: FieldRef<"Scene", 'String'>
    readonly type: FieldRef<"Scene", 'String'>
    readonly projectId: FieldRef<"Scene", 'String'>
    readonly description: FieldRef<"Scene", 'String'>
    readonly isMain: FieldRef<"Scene", 'Boolean'>
    readonly createdAt: FieldRef<"Scene", 'DateTime'>
    readonly updatedAt: FieldRef<"Scene", 'DateTime'>
    readonly sceneData: FieldRef<"Scene", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * Scene findUnique
   */
  export type SceneFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Scene
     */
    select?: SceneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Scene
     */
    omit?: SceneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SceneInclude<ExtArgs> | null
    /**
     * Filter, which Scene to fetch.
     */
    where: SceneWhereUniqueInput
  }

  /**
   * Scene findUniqueOrThrow
   */
  export type SceneFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Scene
     */
    select?: SceneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Scene
     */
    omit?: SceneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SceneInclude<ExtArgs> | null
    /**
     * Filter, which Scene to fetch.
     */
    where: SceneWhereUniqueInput
  }

  /**
   * Scene findFirst
   */
  export type SceneFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Scene
     */
    select?: SceneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Scene
     */
    omit?: SceneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SceneInclude<ExtArgs> | null
    /**
     * Filter, which Scene to fetch.
     */
    where?: SceneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Scenes to fetch.
     */
    orderBy?: SceneOrderByWithRelationInput | SceneOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Scenes.
     */
    cursor?: SceneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Scenes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Scenes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Scenes.
     */
    distinct?: SceneScalarFieldEnum | SceneScalarFieldEnum[]
  }

  /**
   * Scene findFirstOrThrow
   */
  export type SceneFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Scene
     */
    select?: SceneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Scene
     */
    omit?: SceneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SceneInclude<ExtArgs> | null
    /**
     * Filter, which Scene to fetch.
     */
    where?: SceneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Scenes to fetch.
     */
    orderBy?: SceneOrderByWithRelationInput | SceneOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Scenes.
     */
    cursor?: SceneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Scenes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Scenes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Scenes.
     */
    distinct?: SceneScalarFieldEnum | SceneScalarFieldEnum[]
  }

  /**
   * Scene findMany
   */
  export type SceneFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Scene
     */
    select?: SceneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Scene
     */
    omit?: SceneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SceneInclude<ExtArgs> | null
    /**
     * Filter, which Scenes to fetch.
     */
    where?: SceneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Scenes to fetch.
     */
    orderBy?: SceneOrderByWithRelationInput | SceneOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Scenes.
     */
    cursor?: SceneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Scenes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Scenes.
     */
    skip?: number
    distinct?: SceneScalarFieldEnum | SceneScalarFieldEnum[]
  }

  /**
   * Scene create
   */
  export type SceneCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Scene
     */
    select?: SceneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Scene
     */
    omit?: SceneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SceneInclude<ExtArgs> | null
    /**
     * The data needed to create a Scene.
     */
    data: XOR<SceneCreateInput, SceneUncheckedCreateInput>
  }

  /**
   * Scene createMany
   */
  export type SceneCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Scenes.
     */
    data: SceneCreateManyInput | SceneCreateManyInput[]
  }

  /**
   * Scene createManyAndReturn
   */
  export type SceneCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Scene
     */
    select?: SceneSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Scene
     */
    omit?: SceneOmit<ExtArgs> | null
    /**
     * The data used to create many Scenes.
     */
    data: SceneCreateManyInput | SceneCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SceneIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Scene update
   */
  export type SceneUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Scene
     */
    select?: SceneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Scene
     */
    omit?: SceneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SceneInclude<ExtArgs> | null
    /**
     * The data needed to update a Scene.
     */
    data: XOR<SceneUpdateInput, SceneUncheckedUpdateInput>
    /**
     * Choose, which Scene to update.
     */
    where: SceneWhereUniqueInput
  }

  /**
   * Scene updateMany
   */
  export type SceneUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Scenes.
     */
    data: XOR<SceneUpdateManyMutationInput, SceneUncheckedUpdateManyInput>
    /**
     * Filter which Scenes to update
     */
    where?: SceneWhereInput
    /**
     * Limit how many Scenes to update.
     */
    limit?: number
  }

  /**
   * Scene updateManyAndReturn
   */
  export type SceneUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Scene
     */
    select?: SceneSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Scene
     */
    omit?: SceneOmit<ExtArgs> | null
    /**
     * The data used to update Scenes.
     */
    data: XOR<SceneUpdateManyMutationInput, SceneUncheckedUpdateManyInput>
    /**
     * Filter which Scenes to update
     */
    where?: SceneWhereInput
    /**
     * Limit how many Scenes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SceneIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Scene upsert
   */
  export type SceneUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Scene
     */
    select?: SceneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Scene
     */
    omit?: SceneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SceneInclude<ExtArgs> | null
    /**
     * The filter to search for the Scene to update in case it exists.
     */
    where: SceneWhereUniqueInput
    /**
     * In case the Scene found by the `where` argument doesn't exist, create a new Scene with this data.
     */
    create: XOR<SceneCreateInput, SceneUncheckedCreateInput>
    /**
     * In case the Scene was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SceneUpdateInput, SceneUncheckedUpdateInput>
  }

  /**
   * Scene delete
   */
  export type SceneDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Scene
     */
    select?: SceneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Scene
     */
    omit?: SceneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SceneInclude<ExtArgs> | null
    /**
     * Filter which Scene to delete.
     */
    where: SceneWhereUniqueInput
  }

  /**
   * Scene deleteMany
   */
  export type SceneDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Scenes to delete
     */
    where?: SceneWhereInput
    /**
     * Limit how many Scenes to delete.
     */
    limit?: number
  }

  /**
   * Scene.nodes
   */
  export type Scene$nodesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SceneNode
     */
    select?: SceneNodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SceneNode
     */
    omit?: SceneNodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SceneNodeInclude<ExtArgs> | null
    where?: SceneNodeWhereInput
    orderBy?: SceneNodeOrderByWithRelationInput | SceneNodeOrderByWithRelationInput[]
    cursor?: SceneNodeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SceneNodeScalarFieldEnum | SceneNodeScalarFieldEnum[]
  }

  /**
   * Scene.assetUsages
   */
  export type Scene$assetUsagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SceneAssetUsage
     */
    select?: SceneAssetUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SceneAssetUsage
     */
    omit?: SceneAssetUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SceneAssetUsageInclude<ExtArgs> | null
    where?: SceneAssetUsageWhereInput
    orderBy?: SceneAssetUsageOrderByWithRelationInput | SceneAssetUsageOrderByWithRelationInput[]
    cursor?: SceneAssetUsageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SceneAssetUsageScalarFieldEnum | SceneAssetUsageScalarFieldEnum[]
  }

  /**
   * Scene without action
   */
  export type SceneDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Scene
     */
    select?: SceneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Scene
     */
    omit?: SceneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SceneInclude<ExtArgs> | null
  }


  /**
   * Model SceneNode
   */

  export type AggregateSceneNode = {
    _count: SceneNodeCountAggregateOutputType | null
    _min: SceneNodeMinAggregateOutputType | null
    _max: SceneNodeMaxAggregateOutputType | null
  }

  export type SceneNodeMinAggregateOutputType = {
    id: string | null
    uuid: string | null
    name: string | null
    type: string | null
    sceneId: string | null
    parentId: string | null
    visible: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SceneNodeMaxAggregateOutputType = {
    id: string | null
    uuid: string | null
    name: string | null
    type: string | null
    sceneId: string | null
    parentId: string | null
    visible: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SceneNodeCountAggregateOutputType = {
    id: number
    uuid: number
    name: number
    type: number
    sceneId: number
    parentId: number
    position: number
    rotation: number
    scale: number
    visible: number
    properties: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SceneNodeMinAggregateInputType = {
    id?: true
    uuid?: true
    name?: true
    type?: true
    sceneId?: true
    parentId?: true
    visible?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SceneNodeMaxAggregateInputType = {
    id?: true
    uuid?: true
    name?: true
    type?: true
    sceneId?: true
    parentId?: true
    visible?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SceneNodeCountAggregateInputType = {
    id?: true
    uuid?: true
    name?: true
    type?: true
    sceneId?: true
    parentId?: true
    position?: true
    rotation?: true
    scale?: true
    visible?: true
    properties?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SceneNodeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SceneNode to aggregate.
     */
    where?: SceneNodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SceneNodes to fetch.
     */
    orderBy?: SceneNodeOrderByWithRelationInput | SceneNodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SceneNodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SceneNodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SceneNodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SceneNodes
    **/
    _count?: true | SceneNodeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SceneNodeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SceneNodeMaxAggregateInputType
  }

  export type GetSceneNodeAggregateType<T extends SceneNodeAggregateArgs> = {
        [P in keyof T & keyof AggregateSceneNode]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSceneNode[P]>
      : GetScalarType<T[P], AggregateSceneNode[P]>
  }




  export type SceneNodeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SceneNodeWhereInput
    orderBy?: SceneNodeOrderByWithAggregationInput | SceneNodeOrderByWithAggregationInput[]
    by: SceneNodeScalarFieldEnum[] | SceneNodeScalarFieldEnum
    having?: SceneNodeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SceneNodeCountAggregateInputType | true
    _min?: SceneNodeMinAggregateInputType
    _max?: SceneNodeMaxAggregateInputType
  }

  export type SceneNodeGroupByOutputType = {
    id: string
    uuid: string
    name: string
    type: string
    sceneId: string
    parentId: string | null
    position: JsonValue
    rotation: JsonValue
    scale: JsonValue
    visible: boolean
    properties: JsonValue | null
    createdAt: Date
    updatedAt: Date
    _count: SceneNodeCountAggregateOutputType | null
    _min: SceneNodeMinAggregateOutputType | null
    _max: SceneNodeMaxAggregateOutputType | null
  }

  type GetSceneNodeGroupByPayload<T extends SceneNodeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SceneNodeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SceneNodeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SceneNodeGroupByOutputType[P]>
            : GetScalarType<T[P], SceneNodeGroupByOutputType[P]>
        }
      >
    >


  export type SceneNodeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    uuid?: boolean
    name?: boolean
    type?: boolean
    sceneId?: boolean
    parentId?: boolean
    position?: boolean
    rotation?: boolean
    scale?: boolean
    visible?: boolean
    properties?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    scene?: boolean | SceneDefaultArgs<ExtArgs>
    parent?: boolean | SceneNode$parentArgs<ExtArgs>
    children?: boolean | SceneNode$childrenArgs<ExtArgs>
    _count?: boolean | SceneNodeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sceneNode"]>

  export type SceneNodeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    uuid?: boolean
    name?: boolean
    type?: boolean
    sceneId?: boolean
    parentId?: boolean
    position?: boolean
    rotation?: boolean
    scale?: boolean
    visible?: boolean
    properties?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    scene?: boolean | SceneDefaultArgs<ExtArgs>
    parent?: boolean | SceneNode$parentArgs<ExtArgs>
  }, ExtArgs["result"]["sceneNode"]>

  export type SceneNodeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    uuid?: boolean
    name?: boolean
    type?: boolean
    sceneId?: boolean
    parentId?: boolean
    position?: boolean
    rotation?: boolean
    scale?: boolean
    visible?: boolean
    properties?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    scene?: boolean | SceneDefaultArgs<ExtArgs>
    parent?: boolean | SceneNode$parentArgs<ExtArgs>
  }, ExtArgs["result"]["sceneNode"]>

  export type SceneNodeSelectScalar = {
    id?: boolean
    uuid?: boolean
    name?: boolean
    type?: boolean
    sceneId?: boolean
    parentId?: boolean
    position?: boolean
    rotation?: boolean
    scale?: boolean
    visible?: boolean
    properties?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SceneNodeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "uuid" | "name" | "type" | "sceneId" | "parentId" | "position" | "rotation" | "scale" | "visible" | "properties" | "createdAt" | "updatedAt", ExtArgs["result"]["sceneNode"]>
  export type SceneNodeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    scene?: boolean | SceneDefaultArgs<ExtArgs>
    parent?: boolean | SceneNode$parentArgs<ExtArgs>
    children?: boolean | SceneNode$childrenArgs<ExtArgs>
    _count?: boolean | SceneNodeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SceneNodeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    scene?: boolean | SceneDefaultArgs<ExtArgs>
    parent?: boolean | SceneNode$parentArgs<ExtArgs>
  }
  export type SceneNodeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    scene?: boolean | SceneDefaultArgs<ExtArgs>
    parent?: boolean | SceneNode$parentArgs<ExtArgs>
  }

  export type $SceneNodePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SceneNode"
    objects: {
      scene: Prisma.$ScenePayload<ExtArgs>
      parent: Prisma.$SceneNodePayload<ExtArgs> | null
      children: Prisma.$SceneNodePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      uuid: string
      name: string
      type: string
      sceneId: string
      parentId: string | null
      position: Prisma.JsonValue
      rotation: Prisma.JsonValue
      scale: Prisma.JsonValue
      visible: boolean
      properties: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["sceneNode"]>
    composites: {}
  }

  type SceneNodeGetPayload<S extends boolean | null | undefined | SceneNodeDefaultArgs> = $Result.GetResult<Prisma.$SceneNodePayload, S>

  type SceneNodeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SceneNodeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SceneNodeCountAggregateInputType | true
    }

  export interface SceneNodeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SceneNode'], meta: { name: 'SceneNode' } }
    /**
     * Find zero or one SceneNode that matches the filter.
     * @param {SceneNodeFindUniqueArgs} args - Arguments to find a SceneNode
     * @example
     * // Get one SceneNode
     * const sceneNode = await prisma.sceneNode.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SceneNodeFindUniqueArgs>(args: SelectSubset<T, SceneNodeFindUniqueArgs<ExtArgs>>): Prisma__SceneNodeClient<$Result.GetResult<Prisma.$SceneNodePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SceneNode that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SceneNodeFindUniqueOrThrowArgs} args - Arguments to find a SceneNode
     * @example
     * // Get one SceneNode
     * const sceneNode = await prisma.sceneNode.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SceneNodeFindUniqueOrThrowArgs>(args: SelectSubset<T, SceneNodeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SceneNodeClient<$Result.GetResult<Prisma.$SceneNodePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SceneNode that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SceneNodeFindFirstArgs} args - Arguments to find a SceneNode
     * @example
     * // Get one SceneNode
     * const sceneNode = await prisma.sceneNode.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SceneNodeFindFirstArgs>(args?: SelectSubset<T, SceneNodeFindFirstArgs<ExtArgs>>): Prisma__SceneNodeClient<$Result.GetResult<Prisma.$SceneNodePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SceneNode that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SceneNodeFindFirstOrThrowArgs} args - Arguments to find a SceneNode
     * @example
     * // Get one SceneNode
     * const sceneNode = await prisma.sceneNode.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SceneNodeFindFirstOrThrowArgs>(args?: SelectSubset<T, SceneNodeFindFirstOrThrowArgs<ExtArgs>>): Prisma__SceneNodeClient<$Result.GetResult<Prisma.$SceneNodePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SceneNodes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SceneNodeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SceneNodes
     * const sceneNodes = await prisma.sceneNode.findMany()
     * 
     * // Get first 10 SceneNodes
     * const sceneNodes = await prisma.sceneNode.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sceneNodeWithIdOnly = await prisma.sceneNode.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SceneNodeFindManyArgs>(args?: SelectSubset<T, SceneNodeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SceneNodePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SceneNode.
     * @param {SceneNodeCreateArgs} args - Arguments to create a SceneNode.
     * @example
     * // Create one SceneNode
     * const SceneNode = await prisma.sceneNode.create({
     *   data: {
     *     // ... data to create a SceneNode
     *   }
     * })
     * 
     */
    create<T extends SceneNodeCreateArgs>(args: SelectSubset<T, SceneNodeCreateArgs<ExtArgs>>): Prisma__SceneNodeClient<$Result.GetResult<Prisma.$SceneNodePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SceneNodes.
     * @param {SceneNodeCreateManyArgs} args - Arguments to create many SceneNodes.
     * @example
     * // Create many SceneNodes
     * const sceneNode = await prisma.sceneNode.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SceneNodeCreateManyArgs>(args?: SelectSubset<T, SceneNodeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SceneNodes and returns the data saved in the database.
     * @param {SceneNodeCreateManyAndReturnArgs} args - Arguments to create many SceneNodes.
     * @example
     * // Create many SceneNodes
     * const sceneNode = await prisma.sceneNode.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SceneNodes and only return the `id`
     * const sceneNodeWithIdOnly = await prisma.sceneNode.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SceneNodeCreateManyAndReturnArgs>(args?: SelectSubset<T, SceneNodeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SceneNodePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SceneNode.
     * @param {SceneNodeDeleteArgs} args - Arguments to delete one SceneNode.
     * @example
     * // Delete one SceneNode
     * const SceneNode = await prisma.sceneNode.delete({
     *   where: {
     *     // ... filter to delete one SceneNode
     *   }
     * })
     * 
     */
    delete<T extends SceneNodeDeleteArgs>(args: SelectSubset<T, SceneNodeDeleteArgs<ExtArgs>>): Prisma__SceneNodeClient<$Result.GetResult<Prisma.$SceneNodePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SceneNode.
     * @param {SceneNodeUpdateArgs} args - Arguments to update one SceneNode.
     * @example
     * // Update one SceneNode
     * const sceneNode = await prisma.sceneNode.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SceneNodeUpdateArgs>(args: SelectSubset<T, SceneNodeUpdateArgs<ExtArgs>>): Prisma__SceneNodeClient<$Result.GetResult<Prisma.$SceneNodePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SceneNodes.
     * @param {SceneNodeDeleteManyArgs} args - Arguments to filter SceneNodes to delete.
     * @example
     * // Delete a few SceneNodes
     * const { count } = await prisma.sceneNode.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SceneNodeDeleteManyArgs>(args?: SelectSubset<T, SceneNodeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SceneNodes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SceneNodeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SceneNodes
     * const sceneNode = await prisma.sceneNode.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SceneNodeUpdateManyArgs>(args: SelectSubset<T, SceneNodeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SceneNodes and returns the data updated in the database.
     * @param {SceneNodeUpdateManyAndReturnArgs} args - Arguments to update many SceneNodes.
     * @example
     * // Update many SceneNodes
     * const sceneNode = await prisma.sceneNode.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SceneNodes and only return the `id`
     * const sceneNodeWithIdOnly = await prisma.sceneNode.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SceneNodeUpdateManyAndReturnArgs>(args: SelectSubset<T, SceneNodeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SceneNodePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SceneNode.
     * @param {SceneNodeUpsertArgs} args - Arguments to update or create a SceneNode.
     * @example
     * // Update or create a SceneNode
     * const sceneNode = await prisma.sceneNode.upsert({
     *   create: {
     *     // ... data to create a SceneNode
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SceneNode we want to update
     *   }
     * })
     */
    upsert<T extends SceneNodeUpsertArgs>(args: SelectSubset<T, SceneNodeUpsertArgs<ExtArgs>>): Prisma__SceneNodeClient<$Result.GetResult<Prisma.$SceneNodePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SceneNodes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SceneNodeCountArgs} args - Arguments to filter SceneNodes to count.
     * @example
     * // Count the number of SceneNodes
     * const count = await prisma.sceneNode.count({
     *   where: {
     *     // ... the filter for the SceneNodes we want to count
     *   }
     * })
    **/
    count<T extends SceneNodeCountArgs>(
      args?: Subset<T, SceneNodeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SceneNodeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SceneNode.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SceneNodeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SceneNodeAggregateArgs>(args: Subset<T, SceneNodeAggregateArgs>): Prisma.PrismaPromise<GetSceneNodeAggregateType<T>>

    /**
     * Group by SceneNode.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SceneNodeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SceneNodeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SceneNodeGroupByArgs['orderBy'] }
        : { orderBy?: SceneNodeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SceneNodeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSceneNodeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SceneNode model
   */
  readonly fields: SceneNodeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SceneNode.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SceneNodeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    scene<T extends SceneDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SceneDefaultArgs<ExtArgs>>): Prisma__SceneClient<$Result.GetResult<Prisma.$ScenePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    parent<T extends SceneNode$parentArgs<ExtArgs> = {}>(args?: Subset<T, SceneNode$parentArgs<ExtArgs>>): Prisma__SceneNodeClient<$Result.GetResult<Prisma.$SceneNodePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    children<T extends SceneNode$childrenArgs<ExtArgs> = {}>(args?: Subset<T, SceneNode$childrenArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SceneNodePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SceneNode model
   */
  interface SceneNodeFieldRefs {
    readonly id: FieldRef<"SceneNode", 'String'>
    readonly uuid: FieldRef<"SceneNode", 'String'>
    readonly name: FieldRef<"SceneNode", 'String'>
    readonly type: FieldRef<"SceneNode", 'String'>
    readonly sceneId: FieldRef<"SceneNode", 'String'>
    readonly parentId: FieldRef<"SceneNode", 'String'>
    readonly position: FieldRef<"SceneNode", 'Json'>
    readonly rotation: FieldRef<"SceneNode", 'Json'>
    readonly scale: FieldRef<"SceneNode", 'Json'>
    readonly visible: FieldRef<"SceneNode", 'Boolean'>
    readonly properties: FieldRef<"SceneNode", 'Json'>
    readonly createdAt: FieldRef<"SceneNode", 'DateTime'>
    readonly updatedAt: FieldRef<"SceneNode", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SceneNode findUnique
   */
  export type SceneNodeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SceneNode
     */
    select?: SceneNodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SceneNode
     */
    omit?: SceneNodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SceneNodeInclude<ExtArgs> | null
    /**
     * Filter, which SceneNode to fetch.
     */
    where: SceneNodeWhereUniqueInput
  }

  /**
   * SceneNode findUniqueOrThrow
   */
  export type SceneNodeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SceneNode
     */
    select?: SceneNodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SceneNode
     */
    omit?: SceneNodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SceneNodeInclude<ExtArgs> | null
    /**
     * Filter, which SceneNode to fetch.
     */
    where: SceneNodeWhereUniqueInput
  }

  /**
   * SceneNode findFirst
   */
  export type SceneNodeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SceneNode
     */
    select?: SceneNodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SceneNode
     */
    omit?: SceneNodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SceneNodeInclude<ExtArgs> | null
    /**
     * Filter, which SceneNode to fetch.
     */
    where?: SceneNodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SceneNodes to fetch.
     */
    orderBy?: SceneNodeOrderByWithRelationInput | SceneNodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SceneNodes.
     */
    cursor?: SceneNodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SceneNodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SceneNodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SceneNodes.
     */
    distinct?: SceneNodeScalarFieldEnum | SceneNodeScalarFieldEnum[]
  }

  /**
   * SceneNode findFirstOrThrow
   */
  export type SceneNodeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SceneNode
     */
    select?: SceneNodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SceneNode
     */
    omit?: SceneNodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SceneNodeInclude<ExtArgs> | null
    /**
     * Filter, which SceneNode to fetch.
     */
    where?: SceneNodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SceneNodes to fetch.
     */
    orderBy?: SceneNodeOrderByWithRelationInput | SceneNodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SceneNodes.
     */
    cursor?: SceneNodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SceneNodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SceneNodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SceneNodes.
     */
    distinct?: SceneNodeScalarFieldEnum | SceneNodeScalarFieldEnum[]
  }

  /**
   * SceneNode findMany
   */
  export type SceneNodeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SceneNode
     */
    select?: SceneNodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SceneNode
     */
    omit?: SceneNodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SceneNodeInclude<ExtArgs> | null
    /**
     * Filter, which SceneNodes to fetch.
     */
    where?: SceneNodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SceneNodes to fetch.
     */
    orderBy?: SceneNodeOrderByWithRelationInput | SceneNodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SceneNodes.
     */
    cursor?: SceneNodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SceneNodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SceneNodes.
     */
    skip?: number
    distinct?: SceneNodeScalarFieldEnum | SceneNodeScalarFieldEnum[]
  }

  /**
   * SceneNode create
   */
  export type SceneNodeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SceneNode
     */
    select?: SceneNodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SceneNode
     */
    omit?: SceneNodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SceneNodeInclude<ExtArgs> | null
    /**
     * The data needed to create a SceneNode.
     */
    data: XOR<SceneNodeCreateInput, SceneNodeUncheckedCreateInput>
  }

  /**
   * SceneNode createMany
   */
  export type SceneNodeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SceneNodes.
     */
    data: SceneNodeCreateManyInput | SceneNodeCreateManyInput[]
  }

  /**
   * SceneNode createManyAndReturn
   */
  export type SceneNodeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SceneNode
     */
    select?: SceneNodeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SceneNode
     */
    omit?: SceneNodeOmit<ExtArgs> | null
    /**
     * The data used to create many SceneNodes.
     */
    data: SceneNodeCreateManyInput | SceneNodeCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SceneNodeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SceneNode update
   */
  export type SceneNodeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SceneNode
     */
    select?: SceneNodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SceneNode
     */
    omit?: SceneNodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SceneNodeInclude<ExtArgs> | null
    /**
     * The data needed to update a SceneNode.
     */
    data: XOR<SceneNodeUpdateInput, SceneNodeUncheckedUpdateInput>
    /**
     * Choose, which SceneNode to update.
     */
    where: SceneNodeWhereUniqueInput
  }

  /**
   * SceneNode updateMany
   */
  export type SceneNodeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SceneNodes.
     */
    data: XOR<SceneNodeUpdateManyMutationInput, SceneNodeUncheckedUpdateManyInput>
    /**
     * Filter which SceneNodes to update
     */
    where?: SceneNodeWhereInput
    /**
     * Limit how many SceneNodes to update.
     */
    limit?: number
  }

  /**
   * SceneNode updateManyAndReturn
   */
  export type SceneNodeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SceneNode
     */
    select?: SceneNodeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SceneNode
     */
    omit?: SceneNodeOmit<ExtArgs> | null
    /**
     * The data used to update SceneNodes.
     */
    data: XOR<SceneNodeUpdateManyMutationInput, SceneNodeUncheckedUpdateManyInput>
    /**
     * Filter which SceneNodes to update
     */
    where?: SceneNodeWhereInput
    /**
     * Limit how many SceneNodes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SceneNodeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * SceneNode upsert
   */
  export type SceneNodeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SceneNode
     */
    select?: SceneNodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SceneNode
     */
    omit?: SceneNodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SceneNodeInclude<ExtArgs> | null
    /**
     * The filter to search for the SceneNode to update in case it exists.
     */
    where: SceneNodeWhereUniqueInput
    /**
     * In case the SceneNode found by the `where` argument doesn't exist, create a new SceneNode with this data.
     */
    create: XOR<SceneNodeCreateInput, SceneNodeUncheckedCreateInput>
    /**
     * In case the SceneNode was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SceneNodeUpdateInput, SceneNodeUncheckedUpdateInput>
  }

  /**
   * SceneNode delete
   */
  export type SceneNodeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SceneNode
     */
    select?: SceneNodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SceneNode
     */
    omit?: SceneNodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SceneNodeInclude<ExtArgs> | null
    /**
     * Filter which SceneNode to delete.
     */
    where: SceneNodeWhereUniqueInput
  }

  /**
   * SceneNode deleteMany
   */
  export type SceneNodeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SceneNodes to delete
     */
    where?: SceneNodeWhereInput
    /**
     * Limit how many SceneNodes to delete.
     */
    limit?: number
  }

  /**
   * SceneNode.parent
   */
  export type SceneNode$parentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SceneNode
     */
    select?: SceneNodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SceneNode
     */
    omit?: SceneNodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SceneNodeInclude<ExtArgs> | null
    where?: SceneNodeWhereInput
  }

  /**
   * SceneNode.children
   */
  export type SceneNode$childrenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SceneNode
     */
    select?: SceneNodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SceneNode
     */
    omit?: SceneNodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SceneNodeInclude<ExtArgs> | null
    where?: SceneNodeWhereInput
    orderBy?: SceneNodeOrderByWithRelationInput | SceneNodeOrderByWithRelationInput[]
    cursor?: SceneNodeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SceneNodeScalarFieldEnum | SceneNodeScalarFieldEnum[]
  }

  /**
   * SceneNode without action
   */
  export type SceneNodeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SceneNode
     */
    select?: SceneNodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SceneNode
     */
    omit?: SceneNodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SceneNodeInclude<ExtArgs> | null
  }


  /**
   * Model Script
   */

  export type AggregateScript = {
    _count: ScriptCountAggregateOutputType | null
    _min: ScriptMinAggregateOutputType | null
    _max: ScriptMaxAggregateOutputType | null
  }

  export type ScriptMinAggregateOutputType = {
    id: string | null
    name: string | null
    path: string | null
    language: string | null
    content: string | null
    projectId: string | null
    description: string | null
    isTemplate: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ScriptMaxAggregateOutputType = {
    id: string | null
    name: string | null
    path: string | null
    language: string | null
    content: string | null
    projectId: string | null
    description: string | null
    isTemplate: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ScriptCountAggregateOutputType = {
    id: number
    name: number
    path: number
    language: number
    content: number
    projectId: number
    description: number
    isTemplate: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ScriptMinAggregateInputType = {
    id?: true
    name?: true
    path?: true
    language?: true
    content?: true
    projectId?: true
    description?: true
    isTemplate?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ScriptMaxAggregateInputType = {
    id?: true
    name?: true
    path?: true
    language?: true
    content?: true
    projectId?: true
    description?: true
    isTemplate?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ScriptCountAggregateInputType = {
    id?: true
    name?: true
    path?: true
    language?: true
    content?: true
    projectId?: true
    description?: true
    isTemplate?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ScriptAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Script to aggregate.
     */
    where?: ScriptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Scripts to fetch.
     */
    orderBy?: ScriptOrderByWithRelationInput | ScriptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ScriptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Scripts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Scripts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Scripts
    **/
    _count?: true | ScriptCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ScriptMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ScriptMaxAggregateInputType
  }

  export type GetScriptAggregateType<T extends ScriptAggregateArgs> = {
        [P in keyof T & keyof AggregateScript]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateScript[P]>
      : GetScalarType<T[P], AggregateScript[P]>
  }




  export type ScriptGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScriptWhereInput
    orderBy?: ScriptOrderByWithAggregationInput | ScriptOrderByWithAggregationInput[]
    by: ScriptScalarFieldEnum[] | ScriptScalarFieldEnum
    having?: ScriptScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ScriptCountAggregateInputType | true
    _min?: ScriptMinAggregateInputType
    _max?: ScriptMaxAggregateInputType
  }

  export type ScriptGroupByOutputType = {
    id: string
    name: string
    path: string
    language: string
    content: string
    projectId: string
    description: string | null
    isTemplate: boolean
    createdAt: Date
    updatedAt: Date
    _count: ScriptCountAggregateOutputType | null
    _min: ScriptMinAggregateOutputType | null
    _max: ScriptMaxAggregateOutputType | null
  }

  type GetScriptGroupByPayload<T extends ScriptGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ScriptGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ScriptGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ScriptGroupByOutputType[P]>
            : GetScalarType<T[P], ScriptGroupByOutputType[P]>
        }
      >
    >


  export type ScriptSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    path?: boolean
    language?: boolean
    content?: boolean
    projectId?: boolean
    description?: boolean
    isTemplate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    assetUsages?: boolean | Script$assetUsagesArgs<ExtArgs>
    _count?: boolean | ScriptCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["script"]>

  export type ScriptSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    path?: boolean
    language?: boolean
    content?: boolean
    projectId?: boolean
    description?: boolean
    isTemplate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["script"]>

  export type ScriptSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    path?: boolean
    language?: boolean
    content?: boolean
    projectId?: boolean
    description?: boolean
    isTemplate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["script"]>

  export type ScriptSelectScalar = {
    id?: boolean
    name?: boolean
    path?: boolean
    language?: boolean
    content?: boolean
    projectId?: boolean
    description?: boolean
    isTemplate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ScriptOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "path" | "language" | "content" | "projectId" | "description" | "isTemplate" | "createdAt" | "updatedAt", ExtArgs["result"]["script"]>
  export type ScriptInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    assetUsages?: boolean | Script$assetUsagesArgs<ExtArgs>
    _count?: boolean | ScriptCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ScriptIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }
  export type ScriptIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }

  export type $ScriptPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Script"
    objects: {
      project: Prisma.$ProjectPayload<ExtArgs>
      assetUsages: Prisma.$ScriptAssetUsagePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      path: string
      language: string
      content: string
      projectId: string
      description: string | null
      isTemplate: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["script"]>
    composites: {}
  }

  type ScriptGetPayload<S extends boolean | null | undefined | ScriptDefaultArgs> = $Result.GetResult<Prisma.$ScriptPayload, S>

  type ScriptCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ScriptFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ScriptCountAggregateInputType | true
    }

  export interface ScriptDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Script'], meta: { name: 'Script' } }
    /**
     * Find zero or one Script that matches the filter.
     * @param {ScriptFindUniqueArgs} args - Arguments to find a Script
     * @example
     * // Get one Script
     * const script = await prisma.script.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ScriptFindUniqueArgs>(args: SelectSubset<T, ScriptFindUniqueArgs<ExtArgs>>): Prisma__ScriptClient<$Result.GetResult<Prisma.$ScriptPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Script that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ScriptFindUniqueOrThrowArgs} args - Arguments to find a Script
     * @example
     * // Get one Script
     * const script = await prisma.script.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ScriptFindUniqueOrThrowArgs>(args: SelectSubset<T, ScriptFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ScriptClient<$Result.GetResult<Prisma.$ScriptPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Script that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScriptFindFirstArgs} args - Arguments to find a Script
     * @example
     * // Get one Script
     * const script = await prisma.script.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ScriptFindFirstArgs>(args?: SelectSubset<T, ScriptFindFirstArgs<ExtArgs>>): Prisma__ScriptClient<$Result.GetResult<Prisma.$ScriptPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Script that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScriptFindFirstOrThrowArgs} args - Arguments to find a Script
     * @example
     * // Get one Script
     * const script = await prisma.script.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ScriptFindFirstOrThrowArgs>(args?: SelectSubset<T, ScriptFindFirstOrThrowArgs<ExtArgs>>): Prisma__ScriptClient<$Result.GetResult<Prisma.$ScriptPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Scripts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScriptFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Scripts
     * const scripts = await prisma.script.findMany()
     * 
     * // Get first 10 Scripts
     * const scripts = await prisma.script.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const scriptWithIdOnly = await prisma.script.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ScriptFindManyArgs>(args?: SelectSubset<T, ScriptFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScriptPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Script.
     * @param {ScriptCreateArgs} args - Arguments to create a Script.
     * @example
     * // Create one Script
     * const Script = await prisma.script.create({
     *   data: {
     *     // ... data to create a Script
     *   }
     * })
     * 
     */
    create<T extends ScriptCreateArgs>(args: SelectSubset<T, ScriptCreateArgs<ExtArgs>>): Prisma__ScriptClient<$Result.GetResult<Prisma.$ScriptPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Scripts.
     * @param {ScriptCreateManyArgs} args - Arguments to create many Scripts.
     * @example
     * // Create many Scripts
     * const script = await prisma.script.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ScriptCreateManyArgs>(args?: SelectSubset<T, ScriptCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Scripts and returns the data saved in the database.
     * @param {ScriptCreateManyAndReturnArgs} args - Arguments to create many Scripts.
     * @example
     * // Create many Scripts
     * const script = await prisma.script.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Scripts and only return the `id`
     * const scriptWithIdOnly = await prisma.script.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ScriptCreateManyAndReturnArgs>(args?: SelectSubset<T, ScriptCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScriptPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Script.
     * @param {ScriptDeleteArgs} args - Arguments to delete one Script.
     * @example
     * // Delete one Script
     * const Script = await prisma.script.delete({
     *   where: {
     *     // ... filter to delete one Script
     *   }
     * })
     * 
     */
    delete<T extends ScriptDeleteArgs>(args: SelectSubset<T, ScriptDeleteArgs<ExtArgs>>): Prisma__ScriptClient<$Result.GetResult<Prisma.$ScriptPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Script.
     * @param {ScriptUpdateArgs} args - Arguments to update one Script.
     * @example
     * // Update one Script
     * const script = await prisma.script.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ScriptUpdateArgs>(args: SelectSubset<T, ScriptUpdateArgs<ExtArgs>>): Prisma__ScriptClient<$Result.GetResult<Prisma.$ScriptPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Scripts.
     * @param {ScriptDeleteManyArgs} args - Arguments to filter Scripts to delete.
     * @example
     * // Delete a few Scripts
     * const { count } = await prisma.script.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ScriptDeleteManyArgs>(args?: SelectSubset<T, ScriptDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Scripts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScriptUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Scripts
     * const script = await prisma.script.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ScriptUpdateManyArgs>(args: SelectSubset<T, ScriptUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Scripts and returns the data updated in the database.
     * @param {ScriptUpdateManyAndReturnArgs} args - Arguments to update many Scripts.
     * @example
     * // Update many Scripts
     * const script = await prisma.script.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Scripts and only return the `id`
     * const scriptWithIdOnly = await prisma.script.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ScriptUpdateManyAndReturnArgs>(args: SelectSubset<T, ScriptUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScriptPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Script.
     * @param {ScriptUpsertArgs} args - Arguments to update or create a Script.
     * @example
     * // Update or create a Script
     * const script = await prisma.script.upsert({
     *   create: {
     *     // ... data to create a Script
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Script we want to update
     *   }
     * })
     */
    upsert<T extends ScriptUpsertArgs>(args: SelectSubset<T, ScriptUpsertArgs<ExtArgs>>): Prisma__ScriptClient<$Result.GetResult<Prisma.$ScriptPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Scripts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScriptCountArgs} args - Arguments to filter Scripts to count.
     * @example
     * // Count the number of Scripts
     * const count = await prisma.script.count({
     *   where: {
     *     // ... the filter for the Scripts we want to count
     *   }
     * })
    **/
    count<T extends ScriptCountArgs>(
      args?: Subset<T, ScriptCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ScriptCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Script.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScriptAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ScriptAggregateArgs>(args: Subset<T, ScriptAggregateArgs>): Prisma.PrismaPromise<GetScriptAggregateType<T>>

    /**
     * Group by Script.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScriptGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ScriptGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ScriptGroupByArgs['orderBy'] }
        : { orderBy?: ScriptGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ScriptGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetScriptGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Script model
   */
  readonly fields: ScriptFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Script.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ScriptClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    project<T extends ProjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectDefaultArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    assetUsages<T extends Script$assetUsagesArgs<ExtArgs> = {}>(args?: Subset<T, Script$assetUsagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScriptAssetUsagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Script model
   */
  interface ScriptFieldRefs {
    readonly id: FieldRef<"Script", 'String'>
    readonly name: FieldRef<"Script", 'String'>
    readonly path: FieldRef<"Script", 'String'>
    readonly language: FieldRef<"Script", 'String'>
    readonly content: FieldRef<"Script", 'String'>
    readonly projectId: FieldRef<"Script", 'String'>
    readonly description: FieldRef<"Script", 'String'>
    readonly isTemplate: FieldRef<"Script", 'Boolean'>
    readonly createdAt: FieldRef<"Script", 'DateTime'>
    readonly updatedAt: FieldRef<"Script", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Script findUnique
   */
  export type ScriptFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Script
     */
    select?: ScriptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Script
     */
    omit?: ScriptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScriptInclude<ExtArgs> | null
    /**
     * Filter, which Script to fetch.
     */
    where: ScriptWhereUniqueInput
  }

  /**
   * Script findUniqueOrThrow
   */
  export type ScriptFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Script
     */
    select?: ScriptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Script
     */
    omit?: ScriptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScriptInclude<ExtArgs> | null
    /**
     * Filter, which Script to fetch.
     */
    where: ScriptWhereUniqueInput
  }

  /**
   * Script findFirst
   */
  export type ScriptFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Script
     */
    select?: ScriptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Script
     */
    omit?: ScriptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScriptInclude<ExtArgs> | null
    /**
     * Filter, which Script to fetch.
     */
    where?: ScriptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Scripts to fetch.
     */
    orderBy?: ScriptOrderByWithRelationInput | ScriptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Scripts.
     */
    cursor?: ScriptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Scripts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Scripts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Scripts.
     */
    distinct?: ScriptScalarFieldEnum | ScriptScalarFieldEnum[]
  }

  /**
   * Script findFirstOrThrow
   */
  export type ScriptFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Script
     */
    select?: ScriptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Script
     */
    omit?: ScriptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScriptInclude<ExtArgs> | null
    /**
     * Filter, which Script to fetch.
     */
    where?: ScriptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Scripts to fetch.
     */
    orderBy?: ScriptOrderByWithRelationInput | ScriptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Scripts.
     */
    cursor?: ScriptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Scripts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Scripts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Scripts.
     */
    distinct?: ScriptScalarFieldEnum | ScriptScalarFieldEnum[]
  }

  /**
   * Script findMany
   */
  export type ScriptFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Script
     */
    select?: ScriptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Script
     */
    omit?: ScriptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScriptInclude<ExtArgs> | null
    /**
     * Filter, which Scripts to fetch.
     */
    where?: ScriptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Scripts to fetch.
     */
    orderBy?: ScriptOrderByWithRelationInput | ScriptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Scripts.
     */
    cursor?: ScriptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Scripts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Scripts.
     */
    skip?: number
    distinct?: ScriptScalarFieldEnum | ScriptScalarFieldEnum[]
  }

  /**
   * Script create
   */
  export type ScriptCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Script
     */
    select?: ScriptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Script
     */
    omit?: ScriptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScriptInclude<ExtArgs> | null
    /**
     * The data needed to create a Script.
     */
    data: XOR<ScriptCreateInput, ScriptUncheckedCreateInput>
  }

  /**
   * Script createMany
   */
  export type ScriptCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Scripts.
     */
    data: ScriptCreateManyInput | ScriptCreateManyInput[]
  }

  /**
   * Script createManyAndReturn
   */
  export type ScriptCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Script
     */
    select?: ScriptSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Script
     */
    omit?: ScriptOmit<ExtArgs> | null
    /**
     * The data used to create many Scripts.
     */
    data: ScriptCreateManyInput | ScriptCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScriptIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Script update
   */
  export type ScriptUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Script
     */
    select?: ScriptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Script
     */
    omit?: ScriptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScriptInclude<ExtArgs> | null
    /**
     * The data needed to update a Script.
     */
    data: XOR<ScriptUpdateInput, ScriptUncheckedUpdateInput>
    /**
     * Choose, which Script to update.
     */
    where: ScriptWhereUniqueInput
  }

  /**
   * Script updateMany
   */
  export type ScriptUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Scripts.
     */
    data: XOR<ScriptUpdateManyMutationInput, ScriptUncheckedUpdateManyInput>
    /**
     * Filter which Scripts to update
     */
    where?: ScriptWhereInput
    /**
     * Limit how many Scripts to update.
     */
    limit?: number
  }

  /**
   * Script updateManyAndReturn
   */
  export type ScriptUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Script
     */
    select?: ScriptSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Script
     */
    omit?: ScriptOmit<ExtArgs> | null
    /**
     * The data used to update Scripts.
     */
    data: XOR<ScriptUpdateManyMutationInput, ScriptUncheckedUpdateManyInput>
    /**
     * Filter which Scripts to update
     */
    where?: ScriptWhereInput
    /**
     * Limit how many Scripts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScriptIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Script upsert
   */
  export type ScriptUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Script
     */
    select?: ScriptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Script
     */
    omit?: ScriptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScriptInclude<ExtArgs> | null
    /**
     * The filter to search for the Script to update in case it exists.
     */
    where: ScriptWhereUniqueInput
    /**
     * In case the Script found by the `where` argument doesn't exist, create a new Script with this data.
     */
    create: XOR<ScriptCreateInput, ScriptUncheckedCreateInput>
    /**
     * In case the Script was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ScriptUpdateInput, ScriptUncheckedUpdateInput>
  }

  /**
   * Script delete
   */
  export type ScriptDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Script
     */
    select?: ScriptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Script
     */
    omit?: ScriptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScriptInclude<ExtArgs> | null
    /**
     * Filter which Script to delete.
     */
    where: ScriptWhereUniqueInput
  }

  /**
   * Script deleteMany
   */
  export type ScriptDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Scripts to delete
     */
    where?: ScriptWhereInput
    /**
     * Limit how many Scripts to delete.
     */
    limit?: number
  }

  /**
   * Script.assetUsages
   */
  export type Script$assetUsagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScriptAssetUsage
     */
    select?: ScriptAssetUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScriptAssetUsage
     */
    omit?: ScriptAssetUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScriptAssetUsageInclude<ExtArgs> | null
    where?: ScriptAssetUsageWhereInput
    orderBy?: ScriptAssetUsageOrderByWithRelationInput | ScriptAssetUsageOrderByWithRelationInput[]
    cursor?: ScriptAssetUsageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ScriptAssetUsageScalarFieldEnum | ScriptAssetUsageScalarFieldEnum[]
  }

  /**
   * Script without action
   */
  export type ScriptDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Script
     */
    select?: ScriptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Script
     */
    omit?: ScriptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScriptInclude<ExtArgs> | null
  }


  /**
   * Model Material
   */

  export type AggregateMaterial = {
    _count: MaterialCountAggregateOutputType | null
    _avg: MaterialAvgAggregateOutputType | null
    _sum: MaterialSumAggregateOutputType | null
    _min: MaterialMinAggregateOutputType | null
    _max: MaterialMaxAggregateOutputType | null
  }

  export type MaterialAvgAggregateOutputType = {
    roughness: number | null
    metalness: number | null
  }

  export type MaterialSumAggregateOutputType = {
    roughness: number | null
    metalness: number | null
  }

  export type MaterialMinAggregateOutputType = {
    id: string | null
    name: string | null
    type: string | null
    projectId: string | null
    albedo: string | null
    roughness: number | null
    metalness: number | null
    emission: string | null
    albedoMap: string | null
    normalMap: string | null
    roughnessMap: string | null
    metalnessMap: string | null
    emissionMap: string | null
    shaderCode: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MaterialMaxAggregateOutputType = {
    id: string | null
    name: string | null
    type: string | null
    projectId: string | null
    albedo: string | null
    roughness: number | null
    metalness: number | null
    emission: string | null
    albedoMap: string | null
    normalMap: string | null
    roughnessMap: string | null
    metalnessMap: string | null
    emissionMap: string | null
    shaderCode: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MaterialCountAggregateOutputType = {
    id: number
    name: number
    type: number
    projectId: number
    albedo: number
    roughness: number
    metalness: number
    emission: number
    albedoMap: number
    normalMap: number
    roughnessMap: number
    metalnessMap: number
    emissionMap: number
    shaderCode: number
    shaderParams: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MaterialAvgAggregateInputType = {
    roughness?: true
    metalness?: true
  }

  export type MaterialSumAggregateInputType = {
    roughness?: true
    metalness?: true
  }

  export type MaterialMinAggregateInputType = {
    id?: true
    name?: true
    type?: true
    projectId?: true
    albedo?: true
    roughness?: true
    metalness?: true
    emission?: true
    albedoMap?: true
    normalMap?: true
    roughnessMap?: true
    metalnessMap?: true
    emissionMap?: true
    shaderCode?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MaterialMaxAggregateInputType = {
    id?: true
    name?: true
    type?: true
    projectId?: true
    albedo?: true
    roughness?: true
    metalness?: true
    emission?: true
    albedoMap?: true
    normalMap?: true
    roughnessMap?: true
    metalnessMap?: true
    emissionMap?: true
    shaderCode?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MaterialCountAggregateInputType = {
    id?: true
    name?: true
    type?: true
    projectId?: true
    albedo?: true
    roughness?: true
    metalness?: true
    emission?: true
    albedoMap?: true
    normalMap?: true
    roughnessMap?: true
    metalnessMap?: true
    emissionMap?: true
    shaderCode?: true
    shaderParams?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MaterialAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Material to aggregate.
     */
    where?: MaterialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Materials to fetch.
     */
    orderBy?: MaterialOrderByWithRelationInput | MaterialOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MaterialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Materials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Materials.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Materials
    **/
    _count?: true | MaterialCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MaterialAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MaterialSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MaterialMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MaterialMaxAggregateInputType
  }

  export type GetMaterialAggregateType<T extends MaterialAggregateArgs> = {
        [P in keyof T & keyof AggregateMaterial]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMaterial[P]>
      : GetScalarType<T[P], AggregateMaterial[P]>
  }




  export type MaterialGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MaterialWhereInput
    orderBy?: MaterialOrderByWithAggregationInput | MaterialOrderByWithAggregationInput[]
    by: MaterialScalarFieldEnum[] | MaterialScalarFieldEnum
    having?: MaterialScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MaterialCountAggregateInputType | true
    _avg?: MaterialAvgAggregateInputType
    _sum?: MaterialSumAggregateInputType
    _min?: MaterialMinAggregateInputType
    _max?: MaterialMaxAggregateInputType
  }

  export type MaterialGroupByOutputType = {
    id: string
    name: string
    type: string
    projectId: string
    albedo: string | null
    roughness: number | null
    metalness: number | null
    emission: string | null
    albedoMap: string | null
    normalMap: string | null
    roughnessMap: string | null
    metalnessMap: string | null
    emissionMap: string | null
    shaderCode: string | null
    shaderParams: JsonValue | null
    createdAt: Date
    updatedAt: Date
    _count: MaterialCountAggregateOutputType | null
    _avg: MaterialAvgAggregateOutputType | null
    _sum: MaterialSumAggregateOutputType | null
    _min: MaterialMinAggregateOutputType | null
    _max: MaterialMaxAggregateOutputType | null
  }

  type GetMaterialGroupByPayload<T extends MaterialGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MaterialGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MaterialGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MaterialGroupByOutputType[P]>
            : GetScalarType<T[P], MaterialGroupByOutputType[P]>
        }
      >
    >


  export type MaterialSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    projectId?: boolean
    albedo?: boolean
    roughness?: boolean
    metalness?: boolean
    emission?: boolean
    albedoMap?: boolean
    normalMap?: boolean
    roughnessMap?: boolean
    metalnessMap?: boolean
    emissionMap?: boolean
    shaderCode?: boolean
    shaderParams?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    assetUsages?: boolean | Material$assetUsagesArgs<ExtArgs>
    _count?: boolean | MaterialCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["material"]>

  export type MaterialSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    projectId?: boolean
    albedo?: boolean
    roughness?: boolean
    metalness?: boolean
    emission?: boolean
    albedoMap?: boolean
    normalMap?: boolean
    roughnessMap?: boolean
    metalnessMap?: boolean
    emissionMap?: boolean
    shaderCode?: boolean
    shaderParams?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["material"]>

  export type MaterialSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    projectId?: boolean
    albedo?: boolean
    roughness?: boolean
    metalness?: boolean
    emission?: boolean
    albedoMap?: boolean
    normalMap?: boolean
    roughnessMap?: boolean
    metalnessMap?: boolean
    emissionMap?: boolean
    shaderCode?: boolean
    shaderParams?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["material"]>

  export type MaterialSelectScalar = {
    id?: boolean
    name?: boolean
    type?: boolean
    projectId?: boolean
    albedo?: boolean
    roughness?: boolean
    metalness?: boolean
    emission?: boolean
    albedoMap?: boolean
    normalMap?: boolean
    roughnessMap?: boolean
    metalnessMap?: boolean
    emissionMap?: boolean
    shaderCode?: boolean
    shaderParams?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MaterialOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "type" | "projectId" | "albedo" | "roughness" | "metalness" | "emission" | "albedoMap" | "normalMap" | "roughnessMap" | "metalnessMap" | "emissionMap" | "shaderCode" | "shaderParams" | "createdAt" | "updatedAt", ExtArgs["result"]["material"]>
  export type MaterialInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    assetUsages?: boolean | Material$assetUsagesArgs<ExtArgs>
    _count?: boolean | MaterialCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MaterialIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }
  export type MaterialIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }

  export type $MaterialPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Material"
    objects: {
      project: Prisma.$ProjectPayload<ExtArgs>
      assetUsages: Prisma.$MaterialAssetUsagePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      type: string
      projectId: string
      albedo: string | null
      roughness: number | null
      metalness: number | null
      emission: string | null
      albedoMap: string | null
      normalMap: string | null
      roughnessMap: string | null
      metalnessMap: string | null
      emissionMap: string | null
      shaderCode: string | null
      shaderParams: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["material"]>
    composites: {}
  }

  type MaterialGetPayload<S extends boolean | null | undefined | MaterialDefaultArgs> = $Result.GetResult<Prisma.$MaterialPayload, S>

  type MaterialCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MaterialFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MaterialCountAggregateInputType | true
    }

  export interface MaterialDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Material'], meta: { name: 'Material' } }
    /**
     * Find zero or one Material that matches the filter.
     * @param {MaterialFindUniqueArgs} args - Arguments to find a Material
     * @example
     * // Get one Material
     * const material = await prisma.material.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MaterialFindUniqueArgs>(args: SelectSubset<T, MaterialFindUniqueArgs<ExtArgs>>): Prisma__MaterialClient<$Result.GetResult<Prisma.$MaterialPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Material that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MaterialFindUniqueOrThrowArgs} args - Arguments to find a Material
     * @example
     * // Get one Material
     * const material = await prisma.material.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MaterialFindUniqueOrThrowArgs>(args: SelectSubset<T, MaterialFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MaterialClient<$Result.GetResult<Prisma.$MaterialPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Material that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaterialFindFirstArgs} args - Arguments to find a Material
     * @example
     * // Get one Material
     * const material = await prisma.material.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MaterialFindFirstArgs>(args?: SelectSubset<T, MaterialFindFirstArgs<ExtArgs>>): Prisma__MaterialClient<$Result.GetResult<Prisma.$MaterialPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Material that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaterialFindFirstOrThrowArgs} args - Arguments to find a Material
     * @example
     * // Get one Material
     * const material = await prisma.material.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MaterialFindFirstOrThrowArgs>(args?: SelectSubset<T, MaterialFindFirstOrThrowArgs<ExtArgs>>): Prisma__MaterialClient<$Result.GetResult<Prisma.$MaterialPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Materials that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaterialFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Materials
     * const materials = await prisma.material.findMany()
     * 
     * // Get first 10 Materials
     * const materials = await prisma.material.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const materialWithIdOnly = await prisma.material.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MaterialFindManyArgs>(args?: SelectSubset<T, MaterialFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MaterialPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Material.
     * @param {MaterialCreateArgs} args - Arguments to create a Material.
     * @example
     * // Create one Material
     * const Material = await prisma.material.create({
     *   data: {
     *     // ... data to create a Material
     *   }
     * })
     * 
     */
    create<T extends MaterialCreateArgs>(args: SelectSubset<T, MaterialCreateArgs<ExtArgs>>): Prisma__MaterialClient<$Result.GetResult<Prisma.$MaterialPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Materials.
     * @param {MaterialCreateManyArgs} args - Arguments to create many Materials.
     * @example
     * // Create many Materials
     * const material = await prisma.material.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MaterialCreateManyArgs>(args?: SelectSubset<T, MaterialCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Materials and returns the data saved in the database.
     * @param {MaterialCreateManyAndReturnArgs} args - Arguments to create many Materials.
     * @example
     * // Create many Materials
     * const material = await prisma.material.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Materials and only return the `id`
     * const materialWithIdOnly = await prisma.material.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MaterialCreateManyAndReturnArgs>(args?: SelectSubset<T, MaterialCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MaterialPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Material.
     * @param {MaterialDeleteArgs} args - Arguments to delete one Material.
     * @example
     * // Delete one Material
     * const Material = await prisma.material.delete({
     *   where: {
     *     // ... filter to delete one Material
     *   }
     * })
     * 
     */
    delete<T extends MaterialDeleteArgs>(args: SelectSubset<T, MaterialDeleteArgs<ExtArgs>>): Prisma__MaterialClient<$Result.GetResult<Prisma.$MaterialPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Material.
     * @param {MaterialUpdateArgs} args - Arguments to update one Material.
     * @example
     * // Update one Material
     * const material = await prisma.material.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MaterialUpdateArgs>(args: SelectSubset<T, MaterialUpdateArgs<ExtArgs>>): Prisma__MaterialClient<$Result.GetResult<Prisma.$MaterialPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Materials.
     * @param {MaterialDeleteManyArgs} args - Arguments to filter Materials to delete.
     * @example
     * // Delete a few Materials
     * const { count } = await prisma.material.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MaterialDeleteManyArgs>(args?: SelectSubset<T, MaterialDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Materials.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaterialUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Materials
     * const material = await prisma.material.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MaterialUpdateManyArgs>(args: SelectSubset<T, MaterialUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Materials and returns the data updated in the database.
     * @param {MaterialUpdateManyAndReturnArgs} args - Arguments to update many Materials.
     * @example
     * // Update many Materials
     * const material = await prisma.material.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Materials and only return the `id`
     * const materialWithIdOnly = await prisma.material.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MaterialUpdateManyAndReturnArgs>(args: SelectSubset<T, MaterialUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MaterialPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Material.
     * @param {MaterialUpsertArgs} args - Arguments to update or create a Material.
     * @example
     * // Update or create a Material
     * const material = await prisma.material.upsert({
     *   create: {
     *     // ... data to create a Material
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Material we want to update
     *   }
     * })
     */
    upsert<T extends MaterialUpsertArgs>(args: SelectSubset<T, MaterialUpsertArgs<ExtArgs>>): Prisma__MaterialClient<$Result.GetResult<Prisma.$MaterialPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Materials.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaterialCountArgs} args - Arguments to filter Materials to count.
     * @example
     * // Count the number of Materials
     * const count = await prisma.material.count({
     *   where: {
     *     // ... the filter for the Materials we want to count
     *   }
     * })
    **/
    count<T extends MaterialCountArgs>(
      args?: Subset<T, MaterialCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MaterialCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Material.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaterialAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MaterialAggregateArgs>(args: Subset<T, MaterialAggregateArgs>): Prisma.PrismaPromise<GetMaterialAggregateType<T>>

    /**
     * Group by Material.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaterialGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MaterialGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MaterialGroupByArgs['orderBy'] }
        : { orderBy?: MaterialGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MaterialGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMaterialGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Material model
   */
  readonly fields: MaterialFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Material.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MaterialClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    project<T extends ProjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectDefaultArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    assetUsages<T extends Material$assetUsagesArgs<ExtArgs> = {}>(args?: Subset<T, Material$assetUsagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MaterialAssetUsagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Material model
   */
  interface MaterialFieldRefs {
    readonly id: FieldRef<"Material", 'String'>
    readonly name: FieldRef<"Material", 'String'>
    readonly type: FieldRef<"Material", 'String'>
    readonly projectId: FieldRef<"Material", 'String'>
    readonly albedo: FieldRef<"Material", 'String'>
    readonly roughness: FieldRef<"Material", 'Float'>
    readonly metalness: FieldRef<"Material", 'Float'>
    readonly emission: FieldRef<"Material", 'String'>
    readonly albedoMap: FieldRef<"Material", 'String'>
    readonly normalMap: FieldRef<"Material", 'String'>
    readonly roughnessMap: FieldRef<"Material", 'String'>
    readonly metalnessMap: FieldRef<"Material", 'String'>
    readonly emissionMap: FieldRef<"Material", 'String'>
    readonly shaderCode: FieldRef<"Material", 'String'>
    readonly shaderParams: FieldRef<"Material", 'Json'>
    readonly createdAt: FieldRef<"Material", 'DateTime'>
    readonly updatedAt: FieldRef<"Material", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Material findUnique
   */
  export type MaterialFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Material
     */
    select?: MaterialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Material
     */
    omit?: MaterialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialInclude<ExtArgs> | null
    /**
     * Filter, which Material to fetch.
     */
    where: MaterialWhereUniqueInput
  }

  /**
   * Material findUniqueOrThrow
   */
  export type MaterialFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Material
     */
    select?: MaterialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Material
     */
    omit?: MaterialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialInclude<ExtArgs> | null
    /**
     * Filter, which Material to fetch.
     */
    where: MaterialWhereUniqueInput
  }

  /**
   * Material findFirst
   */
  export type MaterialFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Material
     */
    select?: MaterialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Material
     */
    omit?: MaterialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialInclude<ExtArgs> | null
    /**
     * Filter, which Material to fetch.
     */
    where?: MaterialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Materials to fetch.
     */
    orderBy?: MaterialOrderByWithRelationInput | MaterialOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Materials.
     */
    cursor?: MaterialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Materials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Materials.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Materials.
     */
    distinct?: MaterialScalarFieldEnum | MaterialScalarFieldEnum[]
  }

  /**
   * Material findFirstOrThrow
   */
  export type MaterialFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Material
     */
    select?: MaterialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Material
     */
    omit?: MaterialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialInclude<ExtArgs> | null
    /**
     * Filter, which Material to fetch.
     */
    where?: MaterialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Materials to fetch.
     */
    orderBy?: MaterialOrderByWithRelationInput | MaterialOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Materials.
     */
    cursor?: MaterialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Materials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Materials.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Materials.
     */
    distinct?: MaterialScalarFieldEnum | MaterialScalarFieldEnum[]
  }

  /**
   * Material findMany
   */
  export type MaterialFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Material
     */
    select?: MaterialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Material
     */
    omit?: MaterialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialInclude<ExtArgs> | null
    /**
     * Filter, which Materials to fetch.
     */
    where?: MaterialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Materials to fetch.
     */
    orderBy?: MaterialOrderByWithRelationInput | MaterialOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Materials.
     */
    cursor?: MaterialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Materials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Materials.
     */
    skip?: number
    distinct?: MaterialScalarFieldEnum | MaterialScalarFieldEnum[]
  }

  /**
   * Material create
   */
  export type MaterialCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Material
     */
    select?: MaterialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Material
     */
    omit?: MaterialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialInclude<ExtArgs> | null
    /**
     * The data needed to create a Material.
     */
    data: XOR<MaterialCreateInput, MaterialUncheckedCreateInput>
  }

  /**
   * Material createMany
   */
  export type MaterialCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Materials.
     */
    data: MaterialCreateManyInput | MaterialCreateManyInput[]
  }

  /**
   * Material createManyAndReturn
   */
  export type MaterialCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Material
     */
    select?: MaterialSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Material
     */
    omit?: MaterialOmit<ExtArgs> | null
    /**
     * The data used to create many Materials.
     */
    data: MaterialCreateManyInput | MaterialCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Material update
   */
  export type MaterialUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Material
     */
    select?: MaterialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Material
     */
    omit?: MaterialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialInclude<ExtArgs> | null
    /**
     * The data needed to update a Material.
     */
    data: XOR<MaterialUpdateInput, MaterialUncheckedUpdateInput>
    /**
     * Choose, which Material to update.
     */
    where: MaterialWhereUniqueInput
  }

  /**
   * Material updateMany
   */
  export type MaterialUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Materials.
     */
    data: XOR<MaterialUpdateManyMutationInput, MaterialUncheckedUpdateManyInput>
    /**
     * Filter which Materials to update
     */
    where?: MaterialWhereInput
    /**
     * Limit how many Materials to update.
     */
    limit?: number
  }

  /**
   * Material updateManyAndReturn
   */
  export type MaterialUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Material
     */
    select?: MaterialSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Material
     */
    omit?: MaterialOmit<ExtArgs> | null
    /**
     * The data used to update Materials.
     */
    data: XOR<MaterialUpdateManyMutationInput, MaterialUncheckedUpdateManyInput>
    /**
     * Filter which Materials to update
     */
    where?: MaterialWhereInput
    /**
     * Limit how many Materials to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Material upsert
   */
  export type MaterialUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Material
     */
    select?: MaterialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Material
     */
    omit?: MaterialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialInclude<ExtArgs> | null
    /**
     * The filter to search for the Material to update in case it exists.
     */
    where: MaterialWhereUniqueInput
    /**
     * In case the Material found by the `where` argument doesn't exist, create a new Material with this data.
     */
    create: XOR<MaterialCreateInput, MaterialUncheckedCreateInput>
    /**
     * In case the Material was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MaterialUpdateInput, MaterialUncheckedUpdateInput>
  }

  /**
   * Material delete
   */
  export type MaterialDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Material
     */
    select?: MaterialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Material
     */
    omit?: MaterialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialInclude<ExtArgs> | null
    /**
     * Filter which Material to delete.
     */
    where: MaterialWhereUniqueInput
  }

  /**
   * Material deleteMany
   */
  export type MaterialDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Materials to delete
     */
    where?: MaterialWhereInput
    /**
     * Limit how many Materials to delete.
     */
    limit?: number
  }

  /**
   * Material.assetUsages
   */
  export type Material$assetUsagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaterialAssetUsage
     */
    select?: MaterialAssetUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaterialAssetUsage
     */
    omit?: MaterialAssetUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialAssetUsageInclude<ExtArgs> | null
    where?: MaterialAssetUsageWhereInput
    orderBy?: MaterialAssetUsageOrderByWithRelationInput | MaterialAssetUsageOrderByWithRelationInput[]
    cursor?: MaterialAssetUsageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MaterialAssetUsageScalarFieldEnum | MaterialAssetUsageScalarFieldEnum[]
  }

  /**
   * Material without action
   */
  export type MaterialDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Material
     */
    select?: MaterialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Material
     */
    omit?: MaterialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialInclude<ExtArgs> | null
  }


  /**
   * Model Terrain
   */

  export type AggregateTerrain = {
    _count: TerrainCountAggregateOutputType | null
    _avg: TerrainAvgAggregateOutputType | null
    _sum: TerrainSumAggregateOutputType | null
    _min: TerrainMinAggregateOutputType | null
    _max: TerrainMaxAggregateOutputType | null
  }

  export type TerrainAvgAggregateOutputType = {
    width: number | null
    height: number | null
    scale: number | null
  }

  export type TerrainSumAggregateOutputType = {
    width: number | null
    height: number | null
    scale: number | null
  }

  export type TerrainMinAggregateOutputType = {
    id: string | null
    name: string | null
    projectId: string | null
    width: number | null
    height: number | null
    scale: number | null
    heightmapPath: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TerrainMaxAggregateOutputType = {
    id: string | null
    name: string | null
    projectId: string | null
    width: number | null
    height: number | null
    scale: number | null
    heightmapPath: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TerrainCountAggregateOutputType = {
    id: number
    name: number
    projectId: number
    width: number
    height: number
    scale: number
    heightmapPath: number
    heightmapData: number
    textureLayers: number
    brushSettings: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TerrainAvgAggregateInputType = {
    width?: true
    height?: true
    scale?: true
  }

  export type TerrainSumAggregateInputType = {
    width?: true
    height?: true
    scale?: true
  }

  export type TerrainMinAggregateInputType = {
    id?: true
    name?: true
    projectId?: true
    width?: true
    height?: true
    scale?: true
    heightmapPath?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TerrainMaxAggregateInputType = {
    id?: true
    name?: true
    projectId?: true
    width?: true
    height?: true
    scale?: true
    heightmapPath?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TerrainCountAggregateInputType = {
    id?: true
    name?: true
    projectId?: true
    width?: true
    height?: true
    scale?: true
    heightmapPath?: true
    heightmapData?: true
    textureLayers?: true
    brushSettings?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TerrainAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Terrain to aggregate.
     */
    where?: TerrainWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Terrains to fetch.
     */
    orderBy?: TerrainOrderByWithRelationInput | TerrainOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TerrainWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Terrains from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Terrains.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Terrains
    **/
    _count?: true | TerrainCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TerrainAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TerrainSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TerrainMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TerrainMaxAggregateInputType
  }

  export type GetTerrainAggregateType<T extends TerrainAggregateArgs> = {
        [P in keyof T & keyof AggregateTerrain]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTerrain[P]>
      : GetScalarType<T[P], AggregateTerrain[P]>
  }




  export type TerrainGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TerrainWhereInput
    orderBy?: TerrainOrderByWithAggregationInput | TerrainOrderByWithAggregationInput[]
    by: TerrainScalarFieldEnum[] | TerrainScalarFieldEnum
    having?: TerrainScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TerrainCountAggregateInputType | true
    _avg?: TerrainAvgAggregateInputType
    _sum?: TerrainSumAggregateInputType
    _min?: TerrainMinAggregateInputType
    _max?: TerrainMaxAggregateInputType
  }

  export type TerrainGroupByOutputType = {
    id: string
    name: string
    projectId: string
    width: number
    height: number
    scale: number
    heightmapPath: string | null
    heightmapData: JsonValue | null
    textureLayers: JsonValue | null
    brushSettings: JsonValue | null
    createdAt: Date
    updatedAt: Date
    _count: TerrainCountAggregateOutputType | null
    _avg: TerrainAvgAggregateOutputType | null
    _sum: TerrainSumAggregateOutputType | null
    _min: TerrainMinAggregateOutputType | null
    _max: TerrainMaxAggregateOutputType | null
  }

  type GetTerrainGroupByPayload<T extends TerrainGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TerrainGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TerrainGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TerrainGroupByOutputType[P]>
            : GetScalarType<T[P], TerrainGroupByOutputType[P]>
        }
      >
    >


  export type TerrainSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    projectId?: boolean
    width?: boolean
    height?: boolean
    scale?: boolean
    heightmapPath?: boolean
    heightmapData?: boolean
    textureLayers?: boolean
    brushSettings?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["terrain"]>

  export type TerrainSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    projectId?: boolean
    width?: boolean
    height?: boolean
    scale?: boolean
    heightmapPath?: boolean
    heightmapData?: boolean
    textureLayers?: boolean
    brushSettings?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["terrain"]>

  export type TerrainSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    projectId?: boolean
    width?: boolean
    height?: boolean
    scale?: boolean
    heightmapPath?: boolean
    heightmapData?: boolean
    textureLayers?: boolean
    brushSettings?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["terrain"]>

  export type TerrainSelectScalar = {
    id?: boolean
    name?: boolean
    projectId?: boolean
    width?: boolean
    height?: boolean
    scale?: boolean
    heightmapPath?: boolean
    heightmapData?: boolean
    textureLayers?: boolean
    brushSettings?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TerrainOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "projectId" | "width" | "height" | "scale" | "heightmapPath" | "heightmapData" | "textureLayers" | "brushSettings" | "createdAt" | "updatedAt", ExtArgs["result"]["terrain"]>
  export type TerrainInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }
  export type TerrainIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }
  export type TerrainIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }

  export type $TerrainPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Terrain"
    objects: {
      project: Prisma.$ProjectPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      projectId: string
      width: number
      height: number
      scale: number
      heightmapPath: string | null
      heightmapData: Prisma.JsonValue | null
      textureLayers: Prisma.JsonValue | null
      brushSettings: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["terrain"]>
    composites: {}
  }

  type TerrainGetPayload<S extends boolean | null | undefined | TerrainDefaultArgs> = $Result.GetResult<Prisma.$TerrainPayload, S>

  type TerrainCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TerrainFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TerrainCountAggregateInputType | true
    }

  export interface TerrainDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Terrain'], meta: { name: 'Terrain' } }
    /**
     * Find zero or one Terrain that matches the filter.
     * @param {TerrainFindUniqueArgs} args - Arguments to find a Terrain
     * @example
     * // Get one Terrain
     * const terrain = await prisma.terrain.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TerrainFindUniqueArgs>(args: SelectSubset<T, TerrainFindUniqueArgs<ExtArgs>>): Prisma__TerrainClient<$Result.GetResult<Prisma.$TerrainPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Terrain that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TerrainFindUniqueOrThrowArgs} args - Arguments to find a Terrain
     * @example
     * // Get one Terrain
     * const terrain = await prisma.terrain.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TerrainFindUniqueOrThrowArgs>(args: SelectSubset<T, TerrainFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TerrainClient<$Result.GetResult<Prisma.$TerrainPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Terrain that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TerrainFindFirstArgs} args - Arguments to find a Terrain
     * @example
     * // Get one Terrain
     * const terrain = await prisma.terrain.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TerrainFindFirstArgs>(args?: SelectSubset<T, TerrainFindFirstArgs<ExtArgs>>): Prisma__TerrainClient<$Result.GetResult<Prisma.$TerrainPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Terrain that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TerrainFindFirstOrThrowArgs} args - Arguments to find a Terrain
     * @example
     * // Get one Terrain
     * const terrain = await prisma.terrain.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TerrainFindFirstOrThrowArgs>(args?: SelectSubset<T, TerrainFindFirstOrThrowArgs<ExtArgs>>): Prisma__TerrainClient<$Result.GetResult<Prisma.$TerrainPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Terrains that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TerrainFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Terrains
     * const terrains = await prisma.terrain.findMany()
     * 
     * // Get first 10 Terrains
     * const terrains = await prisma.terrain.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const terrainWithIdOnly = await prisma.terrain.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TerrainFindManyArgs>(args?: SelectSubset<T, TerrainFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TerrainPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Terrain.
     * @param {TerrainCreateArgs} args - Arguments to create a Terrain.
     * @example
     * // Create one Terrain
     * const Terrain = await prisma.terrain.create({
     *   data: {
     *     // ... data to create a Terrain
     *   }
     * })
     * 
     */
    create<T extends TerrainCreateArgs>(args: SelectSubset<T, TerrainCreateArgs<ExtArgs>>): Prisma__TerrainClient<$Result.GetResult<Prisma.$TerrainPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Terrains.
     * @param {TerrainCreateManyArgs} args - Arguments to create many Terrains.
     * @example
     * // Create many Terrains
     * const terrain = await prisma.terrain.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TerrainCreateManyArgs>(args?: SelectSubset<T, TerrainCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Terrains and returns the data saved in the database.
     * @param {TerrainCreateManyAndReturnArgs} args - Arguments to create many Terrains.
     * @example
     * // Create many Terrains
     * const terrain = await prisma.terrain.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Terrains and only return the `id`
     * const terrainWithIdOnly = await prisma.terrain.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TerrainCreateManyAndReturnArgs>(args?: SelectSubset<T, TerrainCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TerrainPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Terrain.
     * @param {TerrainDeleteArgs} args - Arguments to delete one Terrain.
     * @example
     * // Delete one Terrain
     * const Terrain = await prisma.terrain.delete({
     *   where: {
     *     // ... filter to delete one Terrain
     *   }
     * })
     * 
     */
    delete<T extends TerrainDeleteArgs>(args: SelectSubset<T, TerrainDeleteArgs<ExtArgs>>): Prisma__TerrainClient<$Result.GetResult<Prisma.$TerrainPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Terrain.
     * @param {TerrainUpdateArgs} args - Arguments to update one Terrain.
     * @example
     * // Update one Terrain
     * const terrain = await prisma.terrain.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TerrainUpdateArgs>(args: SelectSubset<T, TerrainUpdateArgs<ExtArgs>>): Prisma__TerrainClient<$Result.GetResult<Prisma.$TerrainPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Terrains.
     * @param {TerrainDeleteManyArgs} args - Arguments to filter Terrains to delete.
     * @example
     * // Delete a few Terrains
     * const { count } = await prisma.terrain.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TerrainDeleteManyArgs>(args?: SelectSubset<T, TerrainDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Terrains.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TerrainUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Terrains
     * const terrain = await prisma.terrain.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TerrainUpdateManyArgs>(args: SelectSubset<T, TerrainUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Terrains and returns the data updated in the database.
     * @param {TerrainUpdateManyAndReturnArgs} args - Arguments to update many Terrains.
     * @example
     * // Update many Terrains
     * const terrain = await prisma.terrain.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Terrains and only return the `id`
     * const terrainWithIdOnly = await prisma.terrain.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TerrainUpdateManyAndReturnArgs>(args: SelectSubset<T, TerrainUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TerrainPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Terrain.
     * @param {TerrainUpsertArgs} args - Arguments to update or create a Terrain.
     * @example
     * // Update or create a Terrain
     * const terrain = await prisma.terrain.upsert({
     *   create: {
     *     // ... data to create a Terrain
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Terrain we want to update
     *   }
     * })
     */
    upsert<T extends TerrainUpsertArgs>(args: SelectSubset<T, TerrainUpsertArgs<ExtArgs>>): Prisma__TerrainClient<$Result.GetResult<Prisma.$TerrainPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Terrains.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TerrainCountArgs} args - Arguments to filter Terrains to count.
     * @example
     * // Count the number of Terrains
     * const count = await prisma.terrain.count({
     *   where: {
     *     // ... the filter for the Terrains we want to count
     *   }
     * })
    **/
    count<T extends TerrainCountArgs>(
      args?: Subset<T, TerrainCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TerrainCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Terrain.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TerrainAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TerrainAggregateArgs>(args: Subset<T, TerrainAggregateArgs>): Prisma.PrismaPromise<GetTerrainAggregateType<T>>

    /**
     * Group by Terrain.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TerrainGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TerrainGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TerrainGroupByArgs['orderBy'] }
        : { orderBy?: TerrainGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TerrainGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTerrainGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Terrain model
   */
  readonly fields: TerrainFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Terrain.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TerrainClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    project<T extends ProjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectDefaultArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Terrain model
   */
  interface TerrainFieldRefs {
    readonly id: FieldRef<"Terrain", 'String'>
    readonly name: FieldRef<"Terrain", 'String'>
    readonly projectId: FieldRef<"Terrain", 'String'>
    readonly width: FieldRef<"Terrain", 'Int'>
    readonly height: FieldRef<"Terrain", 'Int'>
    readonly scale: FieldRef<"Terrain", 'Float'>
    readonly heightmapPath: FieldRef<"Terrain", 'String'>
    readonly heightmapData: FieldRef<"Terrain", 'Json'>
    readonly textureLayers: FieldRef<"Terrain", 'Json'>
    readonly brushSettings: FieldRef<"Terrain", 'Json'>
    readonly createdAt: FieldRef<"Terrain", 'DateTime'>
    readonly updatedAt: FieldRef<"Terrain", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Terrain findUnique
   */
  export type TerrainFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Terrain
     */
    select?: TerrainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Terrain
     */
    omit?: TerrainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TerrainInclude<ExtArgs> | null
    /**
     * Filter, which Terrain to fetch.
     */
    where: TerrainWhereUniqueInput
  }

  /**
   * Terrain findUniqueOrThrow
   */
  export type TerrainFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Terrain
     */
    select?: TerrainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Terrain
     */
    omit?: TerrainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TerrainInclude<ExtArgs> | null
    /**
     * Filter, which Terrain to fetch.
     */
    where: TerrainWhereUniqueInput
  }

  /**
   * Terrain findFirst
   */
  export type TerrainFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Terrain
     */
    select?: TerrainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Terrain
     */
    omit?: TerrainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TerrainInclude<ExtArgs> | null
    /**
     * Filter, which Terrain to fetch.
     */
    where?: TerrainWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Terrains to fetch.
     */
    orderBy?: TerrainOrderByWithRelationInput | TerrainOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Terrains.
     */
    cursor?: TerrainWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Terrains from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Terrains.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Terrains.
     */
    distinct?: TerrainScalarFieldEnum | TerrainScalarFieldEnum[]
  }

  /**
   * Terrain findFirstOrThrow
   */
  export type TerrainFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Terrain
     */
    select?: TerrainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Terrain
     */
    omit?: TerrainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TerrainInclude<ExtArgs> | null
    /**
     * Filter, which Terrain to fetch.
     */
    where?: TerrainWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Terrains to fetch.
     */
    orderBy?: TerrainOrderByWithRelationInput | TerrainOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Terrains.
     */
    cursor?: TerrainWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Terrains from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Terrains.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Terrains.
     */
    distinct?: TerrainScalarFieldEnum | TerrainScalarFieldEnum[]
  }

  /**
   * Terrain findMany
   */
  export type TerrainFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Terrain
     */
    select?: TerrainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Terrain
     */
    omit?: TerrainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TerrainInclude<ExtArgs> | null
    /**
     * Filter, which Terrains to fetch.
     */
    where?: TerrainWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Terrains to fetch.
     */
    orderBy?: TerrainOrderByWithRelationInput | TerrainOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Terrains.
     */
    cursor?: TerrainWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Terrains from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Terrains.
     */
    skip?: number
    distinct?: TerrainScalarFieldEnum | TerrainScalarFieldEnum[]
  }

  /**
   * Terrain create
   */
  export type TerrainCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Terrain
     */
    select?: TerrainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Terrain
     */
    omit?: TerrainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TerrainInclude<ExtArgs> | null
    /**
     * The data needed to create a Terrain.
     */
    data: XOR<TerrainCreateInput, TerrainUncheckedCreateInput>
  }

  /**
   * Terrain createMany
   */
  export type TerrainCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Terrains.
     */
    data: TerrainCreateManyInput | TerrainCreateManyInput[]
  }

  /**
   * Terrain createManyAndReturn
   */
  export type TerrainCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Terrain
     */
    select?: TerrainSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Terrain
     */
    omit?: TerrainOmit<ExtArgs> | null
    /**
     * The data used to create many Terrains.
     */
    data: TerrainCreateManyInput | TerrainCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TerrainIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Terrain update
   */
  export type TerrainUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Terrain
     */
    select?: TerrainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Terrain
     */
    omit?: TerrainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TerrainInclude<ExtArgs> | null
    /**
     * The data needed to update a Terrain.
     */
    data: XOR<TerrainUpdateInput, TerrainUncheckedUpdateInput>
    /**
     * Choose, which Terrain to update.
     */
    where: TerrainWhereUniqueInput
  }

  /**
   * Terrain updateMany
   */
  export type TerrainUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Terrains.
     */
    data: XOR<TerrainUpdateManyMutationInput, TerrainUncheckedUpdateManyInput>
    /**
     * Filter which Terrains to update
     */
    where?: TerrainWhereInput
    /**
     * Limit how many Terrains to update.
     */
    limit?: number
  }

  /**
   * Terrain updateManyAndReturn
   */
  export type TerrainUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Terrain
     */
    select?: TerrainSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Terrain
     */
    omit?: TerrainOmit<ExtArgs> | null
    /**
     * The data used to update Terrains.
     */
    data: XOR<TerrainUpdateManyMutationInput, TerrainUncheckedUpdateManyInput>
    /**
     * Filter which Terrains to update
     */
    where?: TerrainWhereInput
    /**
     * Limit how many Terrains to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TerrainIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Terrain upsert
   */
  export type TerrainUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Terrain
     */
    select?: TerrainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Terrain
     */
    omit?: TerrainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TerrainInclude<ExtArgs> | null
    /**
     * The filter to search for the Terrain to update in case it exists.
     */
    where: TerrainWhereUniqueInput
    /**
     * In case the Terrain found by the `where` argument doesn't exist, create a new Terrain with this data.
     */
    create: XOR<TerrainCreateInput, TerrainUncheckedCreateInput>
    /**
     * In case the Terrain was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TerrainUpdateInput, TerrainUncheckedUpdateInput>
  }

  /**
   * Terrain delete
   */
  export type TerrainDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Terrain
     */
    select?: TerrainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Terrain
     */
    omit?: TerrainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TerrainInclude<ExtArgs> | null
    /**
     * Filter which Terrain to delete.
     */
    where: TerrainWhereUniqueInput
  }

  /**
   * Terrain deleteMany
   */
  export type TerrainDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Terrains to delete
     */
    where?: TerrainWhereInput
    /**
     * Limit how many Terrains to delete.
     */
    limit?: number
  }

  /**
   * Terrain without action
   */
  export type TerrainDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Terrain
     */
    select?: TerrainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Terrain
     */
    omit?: TerrainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TerrainInclude<ExtArgs> | null
  }


  /**
   * Model Animation
   */

  export type AggregateAnimation = {
    _count: AnimationCountAggregateOutputType | null
    _avg: AnimationAvgAggregateOutputType | null
    _sum: AnimationSumAggregateOutputType | null
    _min: AnimationMinAggregateOutputType | null
    _max: AnimationMaxAggregateOutputType | null
  }

  export type AnimationAvgAggregateOutputType = {
    duration: number | null
    frameRate: number | null
  }

  export type AnimationSumAggregateOutputType = {
    duration: number | null
    frameRate: number | null
  }

  export type AnimationMinAggregateOutputType = {
    id: string | null
    name: string | null
    type: string | null
    projectId: string | null
    duration: number | null
    frameRate: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AnimationMaxAggregateOutputType = {
    id: string | null
    name: string | null
    type: string | null
    projectId: string | null
    duration: number | null
    frameRate: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AnimationCountAggregateOutputType = {
    id: number
    name: number
    type: number
    projectId: number
    duration: number
    frameRate: number
    states: number
    transitions: number
    parameters: number
    tracks: number
    keyframes: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AnimationAvgAggregateInputType = {
    duration?: true
    frameRate?: true
  }

  export type AnimationSumAggregateInputType = {
    duration?: true
    frameRate?: true
  }

  export type AnimationMinAggregateInputType = {
    id?: true
    name?: true
    type?: true
    projectId?: true
    duration?: true
    frameRate?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AnimationMaxAggregateInputType = {
    id?: true
    name?: true
    type?: true
    projectId?: true
    duration?: true
    frameRate?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AnimationCountAggregateInputType = {
    id?: true
    name?: true
    type?: true
    projectId?: true
    duration?: true
    frameRate?: true
    states?: true
    transitions?: true
    parameters?: true
    tracks?: true
    keyframes?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AnimationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Animation to aggregate.
     */
    where?: AnimationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Animations to fetch.
     */
    orderBy?: AnimationOrderByWithRelationInput | AnimationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AnimationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Animations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Animations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Animations
    **/
    _count?: true | AnimationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AnimationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AnimationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AnimationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AnimationMaxAggregateInputType
  }

  export type GetAnimationAggregateType<T extends AnimationAggregateArgs> = {
        [P in keyof T & keyof AggregateAnimation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAnimation[P]>
      : GetScalarType<T[P], AggregateAnimation[P]>
  }




  export type AnimationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AnimationWhereInput
    orderBy?: AnimationOrderByWithAggregationInput | AnimationOrderByWithAggregationInput[]
    by: AnimationScalarFieldEnum[] | AnimationScalarFieldEnum
    having?: AnimationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AnimationCountAggregateInputType | true
    _avg?: AnimationAvgAggregateInputType
    _sum?: AnimationSumAggregateInputType
    _min?: AnimationMinAggregateInputType
    _max?: AnimationMaxAggregateInputType
  }

  export type AnimationGroupByOutputType = {
    id: string
    name: string
    type: string
    projectId: string
    duration: number | null
    frameRate: number | null
    states: JsonValue | null
    transitions: JsonValue | null
    parameters: JsonValue | null
    tracks: JsonValue | null
    keyframes: JsonValue | null
    createdAt: Date
    updatedAt: Date
    _count: AnimationCountAggregateOutputType | null
    _avg: AnimationAvgAggregateOutputType | null
    _sum: AnimationSumAggregateOutputType | null
    _min: AnimationMinAggregateOutputType | null
    _max: AnimationMaxAggregateOutputType | null
  }

  type GetAnimationGroupByPayload<T extends AnimationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AnimationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AnimationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AnimationGroupByOutputType[P]>
            : GetScalarType<T[P], AnimationGroupByOutputType[P]>
        }
      >
    >


  export type AnimationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    projectId?: boolean
    duration?: boolean
    frameRate?: boolean
    states?: boolean
    transitions?: boolean
    parameters?: boolean
    tracks?: boolean
    keyframes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["animation"]>

  export type AnimationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    projectId?: boolean
    duration?: boolean
    frameRate?: boolean
    states?: boolean
    transitions?: boolean
    parameters?: boolean
    tracks?: boolean
    keyframes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["animation"]>

  export type AnimationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    projectId?: boolean
    duration?: boolean
    frameRate?: boolean
    states?: boolean
    transitions?: boolean
    parameters?: boolean
    tracks?: boolean
    keyframes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["animation"]>

  export type AnimationSelectScalar = {
    id?: boolean
    name?: boolean
    type?: boolean
    projectId?: boolean
    duration?: boolean
    frameRate?: boolean
    states?: boolean
    transitions?: boolean
    parameters?: boolean
    tracks?: boolean
    keyframes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AnimationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "type" | "projectId" | "duration" | "frameRate" | "states" | "transitions" | "parameters" | "tracks" | "keyframes" | "createdAt" | "updatedAt", ExtArgs["result"]["animation"]>
  export type AnimationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }
  export type AnimationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }
  export type AnimationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }

  export type $AnimationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Animation"
    objects: {
      project: Prisma.$ProjectPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      type: string
      projectId: string
      duration: number | null
      frameRate: number | null
      states: Prisma.JsonValue | null
      transitions: Prisma.JsonValue | null
      parameters: Prisma.JsonValue | null
      tracks: Prisma.JsonValue | null
      keyframes: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["animation"]>
    composites: {}
  }

  type AnimationGetPayload<S extends boolean | null | undefined | AnimationDefaultArgs> = $Result.GetResult<Prisma.$AnimationPayload, S>

  type AnimationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AnimationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AnimationCountAggregateInputType | true
    }

  export interface AnimationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Animation'], meta: { name: 'Animation' } }
    /**
     * Find zero or one Animation that matches the filter.
     * @param {AnimationFindUniqueArgs} args - Arguments to find a Animation
     * @example
     * // Get one Animation
     * const animation = await prisma.animation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AnimationFindUniqueArgs>(args: SelectSubset<T, AnimationFindUniqueArgs<ExtArgs>>): Prisma__AnimationClient<$Result.GetResult<Prisma.$AnimationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Animation that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AnimationFindUniqueOrThrowArgs} args - Arguments to find a Animation
     * @example
     * // Get one Animation
     * const animation = await prisma.animation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AnimationFindUniqueOrThrowArgs>(args: SelectSubset<T, AnimationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AnimationClient<$Result.GetResult<Prisma.$AnimationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Animation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimationFindFirstArgs} args - Arguments to find a Animation
     * @example
     * // Get one Animation
     * const animation = await prisma.animation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AnimationFindFirstArgs>(args?: SelectSubset<T, AnimationFindFirstArgs<ExtArgs>>): Prisma__AnimationClient<$Result.GetResult<Prisma.$AnimationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Animation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimationFindFirstOrThrowArgs} args - Arguments to find a Animation
     * @example
     * // Get one Animation
     * const animation = await prisma.animation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AnimationFindFirstOrThrowArgs>(args?: SelectSubset<T, AnimationFindFirstOrThrowArgs<ExtArgs>>): Prisma__AnimationClient<$Result.GetResult<Prisma.$AnimationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Animations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Animations
     * const animations = await prisma.animation.findMany()
     * 
     * // Get first 10 Animations
     * const animations = await prisma.animation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const animationWithIdOnly = await prisma.animation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AnimationFindManyArgs>(args?: SelectSubset<T, AnimationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnimationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Animation.
     * @param {AnimationCreateArgs} args - Arguments to create a Animation.
     * @example
     * // Create one Animation
     * const Animation = await prisma.animation.create({
     *   data: {
     *     // ... data to create a Animation
     *   }
     * })
     * 
     */
    create<T extends AnimationCreateArgs>(args: SelectSubset<T, AnimationCreateArgs<ExtArgs>>): Prisma__AnimationClient<$Result.GetResult<Prisma.$AnimationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Animations.
     * @param {AnimationCreateManyArgs} args - Arguments to create many Animations.
     * @example
     * // Create many Animations
     * const animation = await prisma.animation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AnimationCreateManyArgs>(args?: SelectSubset<T, AnimationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Animations and returns the data saved in the database.
     * @param {AnimationCreateManyAndReturnArgs} args - Arguments to create many Animations.
     * @example
     * // Create many Animations
     * const animation = await prisma.animation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Animations and only return the `id`
     * const animationWithIdOnly = await prisma.animation.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AnimationCreateManyAndReturnArgs>(args?: SelectSubset<T, AnimationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnimationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Animation.
     * @param {AnimationDeleteArgs} args - Arguments to delete one Animation.
     * @example
     * // Delete one Animation
     * const Animation = await prisma.animation.delete({
     *   where: {
     *     // ... filter to delete one Animation
     *   }
     * })
     * 
     */
    delete<T extends AnimationDeleteArgs>(args: SelectSubset<T, AnimationDeleteArgs<ExtArgs>>): Prisma__AnimationClient<$Result.GetResult<Prisma.$AnimationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Animation.
     * @param {AnimationUpdateArgs} args - Arguments to update one Animation.
     * @example
     * // Update one Animation
     * const animation = await prisma.animation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AnimationUpdateArgs>(args: SelectSubset<T, AnimationUpdateArgs<ExtArgs>>): Prisma__AnimationClient<$Result.GetResult<Prisma.$AnimationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Animations.
     * @param {AnimationDeleteManyArgs} args - Arguments to filter Animations to delete.
     * @example
     * // Delete a few Animations
     * const { count } = await prisma.animation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AnimationDeleteManyArgs>(args?: SelectSubset<T, AnimationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Animations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Animations
     * const animation = await prisma.animation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AnimationUpdateManyArgs>(args: SelectSubset<T, AnimationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Animations and returns the data updated in the database.
     * @param {AnimationUpdateManyAndReturnArgs} args - Arguments to update many Animations.
     * @example
     * // Update many Animations
     * const animation = await prisma.animation.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Animations and only return the `id`
     * const animationWithIdOnly = await prisma.animation.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AnimationUpdateManyAndReturnArgs>(args: SelectSubset<T, AnimationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnimationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Animation.
     * @param {AnimationUpsertArgs} args - Arguments to update or create a Animation.
     * @example
     * // Update or create a Animation
     * const animation = await prisma.animation.upsert({
     *   create: {
     *     // ... data to create a Animation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Animation we want to update
     *   }
     * })
     */
    upsert<T extends AnimationUpsertArgs>(args: SelectSubset<T, AnimationUpsertArgs<ExtArgs>>): Prisma__AnimationClient<$Result.GetResult<Prisma.$AnimationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Animations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimationCountArgs} args - Arguments to filter Animations to count.
     * @example
     * // Count the number of Animations
     * const count = await prisma.animation.count({
     *   where: {
     *     // ... the filter for the Animations we want to count
     *   }
     * })
    **/
    count<T extends AnimationCountArgs>(
      args?: Subset<T, AnimationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AnimationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Animation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AnimationAggregateArgs>(args: Subset<T, AnimationAggregateArgs>): Prisma.PrismaPromise<GetAnimationAggregateType<T>>

    /**
     * Group by Animation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AnimationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AnimationGroupByArgs['orderBy'] }
        : { orderBy?: AnimationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AnimationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAnimationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Animation model
   */
  readonly fields: AnimationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Animation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AnimationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    project<T extends ProjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectDefaultArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Animation model
   */
  interface AnimationFieldRefs {
    readonly id: FieldRef<"Animation", 'String'>
    readonly name: FieldRef<"Animation", 'String'>
    readonly type: FieldRef<"Animation", 'String'>
    readonly projectId: FieldRef<"Animation", 'String'>
    readonly duration: FieldRef<"Animation", 'Float'>
    readonly frameRate: FieldRef<"Animation", 'Int'>
    readonly states: FieldRef<"Animation", 'Json'>
    readonly transitions: FieldRef<"Animation", 'Json'>
    readonly parameters: FieldRef<"Animation", 'Json'>
    readonly tracks: FieldRef<"Animation", 'Json'>
    readonly keyframes: FieldRef<"Animation", 'Json'>
    readonly createdAt: FieldRef<"Animation", 'DateTime'>
    readonly updatedAt: FieldRef<"Animation", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Animation findUnique
   */
  export type AnimationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Animation
     */
    select?: AnimationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Animation
     */
    omit?: AnimationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimationInclude<ExtArgs> | null
    /**
     * Filter, which Animation to fetch.
     */
    where: AnimationWhereUniqueInput
  }

  /**
   * Animation findUniqueOrThrow
   */
  export type AnimationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Animation
     */
    select?: AnimationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Animation
     */
    omit?: AnimationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimationInclude<ExtArgs> | null
    /**
     * Filter, which Animation to fetch.
     */
    where: AnimationWhereUniqueInput
  }

  /**
   * Animation findFirst
   */
  export type AnimationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Animation
     */
    select?: AnimationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Animation
     */
    omit?: AnimationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimationInclude<ExtArgs> | null
    /**
     * Filter, which Animation to fetch.
     */
    where?: AnimationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Animations to fetch.
     */
    orderBy?: AnimationOrderByWithRelationInput | AnimationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Animations.
     */
    cursor?: AnimationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Animations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Animations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Animations.
     */
    distinct?: AnimationScalarFieldEnum | AnimationScalarFieldEnum[]
  }

  /**
   * Animation findFirstOrThrow
   */
  export type AnimationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Animation
     */
    select?: AnimationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Animation
     */
    omit?: AnimationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimationInclude<ExtArgs> | null
    /**
     * Filter, which Animation to fetch.
     */
    where?: AnimationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Animations to fetch.
     */
    orderBy?: AnimationOrderByWithRelationInput | AnimationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Animations.
     */
    cursor?: AnimationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Animations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Animations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Animations.
     */
    distinct?: AnimationScalarFieldEnum | AnimationScalarFieldEnum[]
  }

  /**
   * Animation findMany
   */
  export type AnimationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Animation
     */
    select?: AnimationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Animation
     */
    omit?: AnimationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimationInclude<ExtArgs> | null
    /**
     * Filter, which Animations to fetch.
     */
    where?: AnimationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Animations to fetch.
     */
    orderBy?: AnimationOrderByWithRelationInput | AnimationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Animations.
     */
    cursor?: AnimationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Animations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Animations.
     */
    skip?: number
    distinct?: AnimationScalarFieldEnum | AnimationScalarFieldEnum[]
  }

  /**
   * Animation create
   */
  export type AnimationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Animation
     */
    select?: AnimationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Animation
     */
    omit?: AnimationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimationInclude<ExtArgs> | null
    /**
     * The data needed to create a Animation.
     */
    data: XOR<AnimationCreateInput, AnimationUncheckedCreateInput>
  }

  /**
   * Animation createMany
   */
  export type AnimationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Animations.
     */
    data: AnimationCreateManyInput | AnimationCreateManyInput[]
  }

  /**
   * Animation createManyAndReturn
   */
  export type AnimationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Animation
     */
    select?: AnimationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Animation
     */
    omit?: AnimationOmit<ExtArgs> | null
    /**
     * The data used to create many Animations.
     */
    data: AnimationCreateManyInput | AnimationCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Animation update
   */
  export type AnimationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Animation
     */
    select?: AnimationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Animation
     */
    omit?: AnimationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimationInclude<ExtArgs> | null
    /**
     * The data needed to update a Animation.
     */
    data: XOR<AnimationUpdateInput, AnimationUncheckedUpdateInput>
    /**
     * Choose, which Animation to update.
     */
    where: AnimationWhereUniqueInput
  }

  /**
   * Animation updateMany
   */
  export type AnimationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Animations.
     */
    data: XOR<AnimationUpdateManyMutationInput, AnimationUncheckedUpdateManyInput>
    /**
     * Filter which Animations to update
     */
    where?: AnimationWhereInput
    /**
     * Limit how many Animations to update.
     */
    limit?: number
  }

  /**
   * Animation updateManyAndReturn
   */
  export type AnimationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Animation
     */
    select?: AnimationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Animation
     */
    omit?: AnimationOmit<ExtArgs> | null
    /**
     * The data used to update Animations.
     */
    data: XOR<AnimationUpdateManyMutationInput, AnimationUncheckedUpdateManyInput>
    /**
     * Filter which Animations to update
     */
    where?: AnimationWhereInput
    /**
     * Limit how many Animations to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Animation upsert
   */
  export type AnimationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Animation
     */
    select?: AnimationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Animation
     */
    omit?: AnimationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimationInclude<ExtArgs> | null
    /**
     * The filter to search for the Animation to update in case it exists.
     */
    where: AnimationWhereUniqueInput
    /**
     * In case the Animation found by the `where` argument doesn't exist, create a new Animation with this data.
     */
    create: XOR<AnimationCreateInput, AnimationUncheckedCreateInput>
    /**
     * In case the Animation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AnimationUpdateInput, AnimationUncheckedUpdateInput>
  }

  /**
   * Animation delete
   */
  export type AnimationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Animation
     */
    select?: AnimationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Animation
     */
    omit?: AnimationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimationInclude<ExtArgs> | null
    /**
     * Filter which Animation to delete.
     */
    where: AnimationWhereUniqueInput
  }

  /**
   * Animation deleteMany
   */
  export type AnimationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Animations to delete
     */
    where?: AnimationWhereInput
    /**
     * Limit how many Animations to delete.
     */
    limit?: number
  }

  /**
   * Animation without action
   */
  export type AnimationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Animation
     */
    select?: AnimationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Animation
     */
    omit?: AnimationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimationInclude<ExtArgs> | null
  }


  /**
   * Model ProjectSetting
   */

  export type AggregateProjectSetting = {
    _count: ProjectSettingCountAggregateOutputType | null
    _min: ProjectSettingMinAggregateOutputType | null
    _max: ProjectSettingMaxAggregateOutputType | null
  }

  export type ProjectSettingMinAggregateOutputType = {
    id: string | null
    key: string | null
    value: string | null
    type: string | null
    projectId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProjectSettingMaxAggregateOutputType = {
    id: string | null
    key: string | null
    value: string | null
    type: string | null
    projectId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProjectSettingCountAggregateOutputType = {
    id: number
    key: number
    value: number
    type: number
    projectId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProjectSettingMinAggregateInputType = {
    id?: true
    key?: true
    value?: true
    type?: true
    projectId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProjectSettingMaxAggregateInputType = {
    id?: true
    key?: true
    value?: true
    type?: true
    projectId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProjectSettingCountAggregateInputType = {
    id?: true
    key?: true
    value?: true
    type?: true
    projectId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProjectSettingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProjectSetting to aggregate.
     */
    where?: ProjectSettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectSettings to fetch.
     */
    orderBy?: ProjectSettingOrderByWithRelationInput | ProjectSettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProjectSettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProjectSettings
    **/
    _count?: true | ProjectSettingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProjectSettingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProjectSettingMaxAggregateInputType
  }

  export type GetProjectSettingAggregateType<T extends ProjectSettingAggregateArgs> = {
        [P in keyof T & keyof AggregateProjectSetting]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProjectSetting[P]>
      : GetScalarType<T[P], AggregateProjectSetting[P]>
  }




  export type ProjectSettingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectSettingWhereInput
    orderBy?: ProjectSettingOrderByWithAggregationInput | ProjectSettingOrderByWithAggregationInput[]
    by: ProjectSettingScalarFieldEnum[] | ProjectSettingScalarFieldEnum
    having?: ProjectSettingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProjectSettingCountAggregateInputType | true
    _min?: ProjectSettingMinAggregateInputType
    _max?: ProjectSettingMaxAggregateInputType
  }

  export type ProjectSettingGroupByOutputType = {
    id: string
    key: string
    value: string
    type: string
    projectId: string
    createdAt: Date
    updatedAt: Date
    _count: ProjectSettingCountAggregateOutputType | null
    _min: ProjectSettingMinAggregateOutputType | null
    _max: ProjectSettingMaxAggregateOutputType | null
  }

  type GetProjectSettingGroupByPayload<T extends ProjectSettingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProjectSettingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProjectSettingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProjectSettingGroupByOutputType[P]>
            : GetScalarType<T[P], ProjectSettingGroupByOutputType[P]>
        }
      >
    >


  export type ProjectSettingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    key?: boolean
    value?: boolean
    type?: boolean
    projectId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["projectSetting"]>

  export type ProjectSettingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    key?: boolean
    value?: boolean
    type?: boolean
    projectId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["projectSetting"]>

  export type ProjectSettingSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    key?: boolean
    value?: boolean
    type?: boolean
    projectId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["projectSetting"]>

  export type ProjectSettingSelectScalar = {
    id?: boolean
    key?: boolean
    value?: boolean
    type?: boolean
    projectId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ProjectSettingOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "key" | "value" | "type" | "projectId" | "createdAt" | "updatedAt", ExtArgs["result"]["projectSetting"]>
  export type ProjectSettingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }
  export type ProjectSettingIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }
  export type ProjectSettingIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }

  export type $ProjectSettingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProjectSetting"
    objects: {
      project: Prisma.$ProjectPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      key: string
      value: string
      type: string
      projectId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["projectSetting"]>
    composites: {}
  }

  type ProjectSettingGetPayload<S extends boolean | null | undefined | ProjectSettingDefaultArgs> = $Result.GetResult<Prisma.$ProjectSettingPayload, S>

  type ProjectSettingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProjectSettingFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProjectSettingCountAggregateInputType | true
    }

  export interface ProjectSettingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProjectSetting'], meta: { name: 'ProjectSetting' } }
    /**
     * Find zero or one ProjectSetting that matches the filter.
     * @param {ProjectSettingFindUniqueArgs} args - Arguments to find a ProjectSetting
     * @example
     * // Get one ProjectSetting
     * const projectSetting = await prisma.projectSetting.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProjectSettingFindUniqueArgs>(args: SelectSubset<T, ProjectSettingFindUniqueArgs<ExtArgs>>): Prisma__ProjectSettingClient<$Result.GetResult<Prisma.$ProjectSettingPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ProjectSetting that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProjectSettingFindUniqueOrThrowArgs} args - Arguments to find a ProjectSetting
     * @example
     * // Get one ProjectSetting
     * const projectSetting = await prisma.projectSetting.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProjectSettingFindUniqueOrThrowArgs>(args: SelectSubset<T, ProjectSettingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProjectSettingClient<$Result.GetResult<Prisma.$ProjectSettingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProjectSetting that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectSettingFindFirstArgs} args - Arguments to find a ProjectSetting
     * @example
     * // Get one ProjectSetting
     * const projectSetting = await prisma.projectSetting.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProjectSettingFindFirstArgs>(args?: SelectSubset<T, ProjectSettingFindFirstArgs<ExtArgs>>): Prisma__ProjectSettingClient<$Result.GetResult<Prisma.$ProjectSettingPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProjectSetting that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectSettingFindFirstOrThrowArgs} args - Arguments to find a ProjectSetting
     * @example
     * // Get one ProjectSetting
     * const projectSetting = await prisma.projectSetting.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProjectSettingFindFirstOrThrowArgs>(args?: SelectSubset<T, ProjectSettingFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProjectSettingClient<$Result.GetResult<Prisma.$ProjectSettingPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ProjectSettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectSettingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProjectSettings
     * const projectSettings = await prisma.projectSetting.findMany()
     * 
     * // Get first 10 ProjectSettings
     * const projectSettings = await prisma.projectSetting.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const projectSettingWithIdOnly = await prisma.projectSetting.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProjectSettingFindManyArgs>(args?: SelectSubset<T, ProjectSettingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectSettingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ProjectSetting.
     * @param {ProjectSettingCreateArgs} args - Arguments to create a ProjectSetting.
     * @example
     * // Create one ProjectSetting
     * const ProjectSetting = await prisma.projectSetting.create({
     *   data: {
     *     // ... data to create a ProjectSetting
     *   }
     * })
     * 
     */
    create<T extends ProjectSettingCreateArgs>(args: SelectSubset<T, ProjectSettingCreateArgs<ExtArgs>>): Prisma__ProjectSettingClient<$Result.GetResult<Prisma.$ProjectSettingPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ProjectSettings.
     * @param {ProjectSettingCreateManyArgs} args - Arguments to create many ProjectSettings.
     * @example
     * // Create many ProjectSettings
     * const projectSetting = await prisma.projectSetting.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProjectSettingCreateManyArgs>(args?: SelectSubset<T, ProjectSettingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ProjectSettings and returns the data saved in the database.
     * @param {ProjectSettingCreateManyAndReturnArgs} args - Arguments to create many ProjectSettings.
     * @example
     * // Create many ProjectSettings
     * const projectSetting = await prisma.projectSetting.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ProjectSettings and only return the `id`
     * const projectSettingWithIdOnly = await prisma.projectSetting.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProjectSettingCreateManyAndReturnArgs>(args?: SelectSubset<T, ProjectSettingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectSettingPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ProjectSetting.
     * @param {ProjectSettingDeleteArgs} args - Arguments to delete one ProjectSetting.
     * @example
     * // Delete one ProjectSetting
     * const ProjectSetting = await prisma.projectSetting.delete({
     *   where: {
     *     // ... filter to delete one ProjectSetting
     *   }
     * })
     * 
     */
    delete<T extends ProjectSettingDeleteArgs>(args: SelectSubset<T, ProjectSettingDeleteArgs<ExtArgs>>): Prisma__ProjectSettingClient<$Result.GetResult<Prisma.$ProjectSettingPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ProjectSetting.
     * @param {ProjectSettingUpdateArgs} args - Arguments to update one ProjectSetting.
     * @example
     * // Update one ProjectSetting
     * const projectSetting = await prisma.projectSetting.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProjectSettingUpdateArgs>(args: SelectSubset<T, ProjectSettingUpdateArgs<ExtArgs>>): Prisma__ProjectSettingClient<$Result.GetResult<Prisma.$ProjectSettingPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ProjectSettings.
     * @param {ProjectSettingDeleteManyArgs} args - Arguments to filter ProjectSettings to delete.
     * @example
     * // Delete a few ProjectSettings
     * const { count } = await prisma.projectSetting.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProjectSettingDeleteManyArgs>(args?: SelectSubset<T, ProjectSettingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProjectSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectSettingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProjectSettings
     * const projectSetting = await prisma.projectSetting.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProjectSettingUpdateManyArgs>(args: SelectSubset<T, ProjectSettingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProjectSettings and returns the data updated in the database.
     * @param {ProjectSettingUpdateManyAndReturnArgs} args - Arguments to update many ProjectSettings.
     * @example
     * // Update many ProjectSettings
     * const projectSetting = await prisma.projectSetting.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ProjectSettings and only return the `id`
     * const projectSettingWithIdOnly = await prisma.projectSetting.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProjectSettingUpdateManyAndReturnArgs>(args: SelectSubset<T, ProjectSettingUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectSettingPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ProjectSetting.
     * @param {ProjectSettingUpsertArgs} args - Arguments to update or create a ProjectSetting.
     * @example
     * // Update or create a ProjectSetting
     * const projectSetting = await prisma.projectSetting.upsert({
     *   create: {
     *     // ... data to create a ProjectSetting
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProjectSetting we want to update
     *   }
     * })
     */
    upsert<T extends ProjectSettingUpsertArgs>(args: SelectSubset<T, ProjectSettingUpsertArgs<ExtArgs>>): Prisma__ProjectSettingClient<$Result.GetResult<Prisma.$ProjectSettingPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ProjectSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectSettingCountArgs} args - Arguments to filter ProjectSettings to count.
     * @example
     * // Count the number of ProjectSettings
     * const count = await prisma.projectSetting.count({
     *   where: {
     *     // ... the filter for the ProjectSettings we want to count
     *   }
     * })
    **/
    count<T extends ProjectSettingCountArgs>(
      args?: Subset<T, ProjectSettingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProjectSettingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProjectSetting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectSettingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProjectSettingAggregateArgs>(args: Subset<T, ProjectSettingAggregateArgs>): Prisma.PrismaPromise<GetProjectSettingAggregateType<T>>

    /**
     * Group by ProjectSetting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectSettingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProjectSettingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProjectSettingGroupByArgs['orderBy'] }
        : { orderBy?: ProjectSettingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProjectSettingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProjectSettingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProjectSetting model
   */
  readonly fields: ProjectSettingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProjectSetting.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProjectSettingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    project<T extends ProjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectDefaultArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProjectSetting model
   */
  interface ProjectSettingFieldRefs {
    readonly id: FieldRef<"ProjectSetting", 'String'>
    readonly key: FieldRef<"ProjectSetting", 'String'>
    readonly value: FieldRef<"ProjectSetting", 'String'>
    readonly type: FieldRef<"ProjectSetting", 'String'>
    readonly projectId: FieldRef<"ProjectSetting", 'String'>
    readonly createdAt: FieldRef<"ProjectSetting", 'DateTime'>
    readonly updatedAt: FieldRef<"ProjectSetting", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ProjectSetting findUnique
   */
  export type ProjectSettingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectSetting
     */
    select?: ProjectSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectSetting
     */
    omit?: ProjectSettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectSettingInclude<ExtArgs> | null
    /**
     * Filter, which ProjectSetting to fetch.
     */
    where: ProjectSettingWhereUniqueInput
  }

  /**
   * ProjectSetting findUniqueOrThrow
   */
  export type ProjectSettingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectSetting
     */
    select?: ProjectSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectSetting
     */
    omit?: ProjectSettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectSettingInclude<ExtArgs> | null
    /**
     * Filter, which ProjectSetting to fetch.
     */
    where: ProjectSettingWhereUniqueInput
  }

  /**
   * ProjectSetting findFirst
   */
  export type ProjectSettingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectSetting
     */
    select?: ProjectSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectSetting
     */
    omit?: ProjectSettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectSettingInclude<ExtArgs> | null
    /**
     * Filter, which ProjectSetting to fetch.
     */
    where?: ProjectSettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectSettings to fetch.
     */
    orderBy?: ProjectSettingOrderByWithRelationInput | ProjectSettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProjectSettings.
     */
    cursor?: ProjectSettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProjectSettings.
     */
    distinct?: ProjectSettingScalarFieldEnum | ProjectSettingScalarFieldEnum[]
  }

  /**
   * ProjectSetting findFirstOrThrow
   */
  export type ProjectSettingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectSetting
     */
    select?: ProjectSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectSetting
     */
    omit?: ProjectSettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectSettingInclude<ExtArgs> | null
    /**
     * Filter, which ProjectSetting to fetch.
     */
    where?: ProjectSettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectSettings to fetch.
     */
    orderBy?: ProjectSettingOrderByWithRelationInput | ProjectSettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProjectSettings.
     */
    cursor?: ProjectSettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProjectSettings.
     */
    distinct?: ProjectSettingScalarFieldEnum | ProjectSettingScalarFieldEnum[]
  }

  /**
   * ProjectSetting findMany
   */
  export type ProjectSettingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectSetting
     */
    select?: ProjectSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectSetting
     */
    omit?: ProjectSettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectSettingInclude<ExtArgs> | null
    /**
     * Filter, which ProjectSettings to fetch.
     */
    where?: ProjectSettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectSettings to fetch.
     */
    orderBy?: ProjectSettingOrderByWithRelationInput | ProjectSettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProjectSettings.
     */
    cursor?: ProjectSettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectSettings.
     */
    skip?: number
    distinct?: ProjectSettingScalarFieldEnum | ProjectSettingScalarFieldEnum[]
  }

  /**
   * ProjectSetting create
   */
  export type ProjectSettingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectSetting
     */
    select?: ProjectSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectSetting
     */
    omit?: ProjectSettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectSettingInclude<ExtArgs> | null
    /**
     * The data needed to create a ProjectSetting.
     */
    data: XOR<ProjectSettingCreateInput, ProjectSettingUncheckedCreateInput>
  }

  /**
   * ProjectSetting createMany
   */
  export type ProjectSettingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProjectSettings.
     */
    data: ProjectSettingCreateManyInput | ProjectSettingCreateManyInput[]
  }

  /**
   * ProjectSetting createManyAndReturn
   */
  export type ProjectSettingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectSetting
     */
    select?: ProjectSettingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectSetting
     */
    omit?: ProjectSettingOmit<ExtArgs> | null
    /**
     * The data used to create many ProjectSettings.
     */
    data: ProjectSettingCreateManyInput | ProjectSettingCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectSettingIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProjectSetting update
   */
  export type ProjectSettingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectSetting
     */
    select?: ProjectSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectSetting
     */
    omit?: ProjectSettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectSettingInclude<ExtArgs> | null
    /**
     * The data needed to update a ProjectSetting.
     */
    data: XOR<ProjectSettingUpdateInput, ProjectSettingUncheckedUpdateInput>
    /**
     * Choose, which ProjectSetting to update.
     */
    where: ProjectSettingWhereUniqueInput
  }

  /**
   * ProjectSetting updateMany
   */
  export type ProjectSettingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProjectSettings.
     */
    data: XOR<ProjectSettingUpdateManyMutationInput, ProjectSettingUncheckedUpdateManyInput>
    /**
     * Filter which ProjectSettings to update
     */
    where?: ProjectSettingWhereInput
    /**
     * Limit how many ProjectSettings to update.
     */
    limit?: number
  }

  /**
   * ProjectSetting updateManyAndReturn
   */
  export type ProjectSettingUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectSetting
     */
    select?: ProjectSettingSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectSetting
     */
    omit?: ProjectSettingOmit<ExtArgs> | null
    /**
     * The data used to update ProjectSettings.
     */
    data: XOR<ProjectSettingUpdateManyMutationInput, ProjectSettingUncheckedUpdateManyInput>
    /**
     * Filter which ProjectSettings to update
     */
    where?: ProjectSettingWhereInput
    /**
     * Limit how many ProjectSettings to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectSettingIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProjectSetting upsert
   */
  export type ProjectSettingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectSetting
     */
    select?: ProjectSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectSetting
     */
    omit?: ProjectSettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectSettingInclude<ExtArgs> | null
    /**
     * The filter to search for the ProjectSetting to update in case it exists.
     */
    where: ProjectSettingWhereUniqueInput
    /**
     * In case the ProjectSetting found by the `where` argument doesn't exist, create a new ProjectSetting with this data.
     */
    create: XOR<ProjectSettingCreateInput, ProjectSettingUncheckedCreateInput>
    /**
     * In case the ProjectSetting was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProjectSettingUpdateInput, ProjectSettingUncheckedUpdateInput>
  }

  /**
   * ProjectSetting delete
   */
  export type ProjectSettingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectSetting
     */
    select?: ProjectSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectSetting
     */
    omit?: ProjectSettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectSettingInclude<ExtArgs> | null
    /**
     * Filter which ProjectSetting to delete.
     */
    where: ProjectSettingWhereUniqueInput
  }

  /**
   * ProjectSetting deleteMany
   */
  export type ProjectSettingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProjectSettings to delete
     */
    where?: ProjectSettingWhereInput
    /**
     * Limit how many ProjectSettings to delete.
     */
    limit?: number
  }

  /**
   * ProjectSetting without action
   */
  export type ProjectSettingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectSetting
     */
    select?: ProjectSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectSetting
     */
    omit?: ProjectSettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectSettingInclude<ExtArgs> | null
  }


  /**
   * Model Asset
   */

  export type AggregateAsset = {
    _count: AssetCountAggregateOutputType | null
    _avg: AssetAvgAggregateOutputType | null
    _sum: AssetSumAggregateOutputType | null
    _min: AssetMinAggregateOutputType | null
    _max: AssetMaxAggregateOutputType | null
  }

  export type AssetAvgAggregateOutputType = {
    fileSize: number | null
    width: number | null
    height: number | null
    duration: number | null
    channels: number | null
    sampleRate: number | null
    bitRate: number | null
  }

  export type AssetSumAggregateOutputType = {
    fileSize: number | null
    width: number | null
    height: number | null
    duration: number | null
    channels: number | null
    sampleRate: number | null
    bitRate: number | null
  }

  export type AssetMinAggregateOutputType = {
    id: string | null
    name: string | null
    type: $Enums.AssetType | null
    filePath: string | null
    fileSize: number | null
    mimeType: string | null
    checksum: string | null
    width: number | null
    height: number | null
    duration: number | null
    channels: number | null
    sampleRate: number | null
    bitRate: number | null
    projectId: string | null
    folderId: string | null
    version: string | null
    parentId: string | null
    originalName: string | null
    importedAt: Date | null
    thumbnail: string | null
    preview: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AssetMaxAggregateOutputType = {
    id: string | null
    name: string | null
    type: $Enums.AssetType | null
    filePath: string | null
    fileSize: number | null
    mimeType: string | null
    checksum: string | null
    width: number | null
    height: number | null
    duration: number | null
    channels: number | null
    sampleRate: number | null
    bitRate: number | null
    projectId: string | null
    folderId: string | null
    version: string | null
    parentId: string | null
    originalName: string | null
    importedAt: Date | null
    thumbnail: string | null
    preview: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AssetCountAggregateOutputType = {
    id: number
    name: number
    type: number
    filePath: number
    fileSize: number
    mimeType: number
    checksum: number
    width: number
    height: number
    duration: number
    channels: number
    sampleRate: number
    bitRate: number
    projectId: number
    folderId: number
    tags: number
    version: number
    parentId: number
    dependencies: number
    originalName: number
    importedAt: number
    importSettings: number
    thumbnail: number
    preview: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AssetAvgAggregateInputType = {
    fileSize?: true
    width?: true
    height?: true
    duration?: true
    channels?: true
    sampleRate?: true
    bitRate?: true
  }

  export type AssetSumAggregateInputType = {
    fileSize?: true
    width?: true
    height?: true
    duration?: true
    channels?: true
    sampleRate?: true
    bitRate?: true
  }

  export type AssetMinAggregateInputType = {
    id?: true
    name?: true
    type?: true
    filePath?: true
    fileSize?: true
    mimeType?: true
    checksum?: true
    width?: true
    height?: true
    duration?: true
    channels?: true
    sampleRate?: true
    bitRate?: true
    projectId?: true
    folderId?: true
    version?: true
    parentId?: true
    originalName?: true
    importedAt?: true
    thumbnail?: true
    preview?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AssetMaxAggregateInputType = {
    id?: true
    name?: true
    type?: true
    filePath?: true
    fileSize?: true
    mimeType?: true
    checksum?: true
    width?: true
    height?: true
    duration?: true
    channels?: true
    sampleRate?: true
    bitRate?: true
    projectId?: true
    folderId?: true
    version?: true
    parentId?: true
    originalName?: true
    importedAt?: true
    thumbnail?: true
    preview?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AssetCountAggregateInputType = {
    id?: true
    name?: true
    type?: true
    filePath?: true
    fileSize?: true
    mimeType?: true
    checksum?: true
    width?: true
    height?: true
    duration?: true
    channels?: true
    sampleRate?: true
    bitRate?: true
    projectId?: true
    folderId?: true
    tags?: true
    version?: true
    parentId?: true
    dependencies?: true
    originalName?: true
    importedAt?: true
    importSettings?: true
    thumbnail?: true
    preview?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AssetAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Asset to aggregate.
     */
    where?: AssetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assets to fetch.
     */
    orderBy?: AssetOrderByWithRelationInput | AssetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AssetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Assets
    **/
    _count?: true | AssetCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AssetAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AssetSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AssetMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AssetMaxAggregateInputType
  }

  export type GetAssetAggregateType<T extends AssetAggregateArgs> = {
        [P in keyof T & keyof AggregateAsset]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAsset[P]>
      : GetScalarType<T[P], AggregateAsset[P]>
  }




  export type AssetGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssetWhereInput
    orderBy?: AssetOrderByWithAggregationInput | AssetOrderByWithAggregationInput[]
    by: AssetScalarFieldEnum[] | AssetScalarFieldEnum
    having?: AssetScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AssetCountAggregateInputType | true
    _avg?: AssetAvgAggregateInputType
    _sum?: AssetSumAggregateInputType
    _min?: AssetMinAggregateInputType
    _max?: AssetMaxAggregateInputType
  }

  export type AssetGroupByOutputType = {
    id: string
    name: string
    type: $Enums.AssetType
    filePath: string
    fileSize: number
    mimeType: string | null
    checksum: string | null
    width: number | null
    height: number | null
    duration: number | null
    channels: number | null
    sampleRate: number | null
    bitRate: number | null
    projectId: string
    folderId: string | null
    tags: JsonValue | null
    version: string
    parentId: string | null
    dependencies: JsonValue | null
    originalName: string | null
    importedAt: Date
    importSettings: JsonValue | null
    thumbnail: string | null
    preview: string | null
    createdAt: Date
    updatedAt: Date
    _count: AssetCountAggregateOutputType | null
    _avg: AssetAvgAggregateOutputType | null
    _sum: AssetSumAggregateOutputType | null
    _min: AssetMinAggregateOutputType | null
    _max: AssetMaxAggregateOutputType | null
  }

  type GetAssetGroupByPayload<T extends AssetGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AssetGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AssetGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AssetGroupByOutputType[P]>
            : GetScalarType<T[P], AssetGroupByOutputType[P]>
        }
      >
    >


  export type AssetSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    filePath?: boolean
    fileSize?: boolean
    mimeType?: boolean
    checksum?: boolean
    width?: boolean
    height?: boolean
    duration?: boolean
    channels?: boolean
    sampleRate?: boolean
    bitRate?: boolean
    projectId?: boolean
    folderId?: boolean
    tags?: boolean
    version?: boolean
    parentId?: boolean
    dependencies?: boolean
    originalName?: boolean
    importedAt?: boolean
    importSettings?: boolean
    thumbnail?: boolean
    preview?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    folder?: boolean | Asset$folderArgs<ExtArgs>
    parent?: boolean | Asset$parentArgs<ExtArgs>
    versions?: boolean | Asset$versionsArgs<ExtArgs>
    sceneUsages?: boolean | Asset$sceneUsagesArgs<ExtArgs>
    scriptUsages?: boolean | Asset$scriptUsagesArgs<ExtArgs>
    materialUsages?: boolean | Asset$materialUsagesArgs<ExtArgs>
    _count?: boolean | AssetCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["asset"]>

  export type AssetSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    filePath?: boolean
    fileSize?: boolean
    mimeType?: boolean
    checksum?: boolean
    width?: boolean
    height?: boolean
    duration?: boolean
    channels?: boolean
    sampleRate?: boolean
    bitRate?: boolean
    projectId?: boolean
    folderId?: boolean
    tags?: boolean
    version?: boolean
    parentId?: boolean
    dependencies?: boolean
    originalName?: boolean
    importedAt?: boolean
    importSettings?: boolean
    thumbnail?: boolean
    preview?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    folder?: boolean | Asset$folderArgs<ExtArgs>
    parent?: boolean | Asset$parentArgs<ExtArgs>
  }, ExtArgs["result"]["asset"]>

  export type AssetSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    filePath?: boolean
    fileSize?: boolean
    mimeType?: boolean
    checksum?: boolean
    width?: boolean
    height?: boolean
    duration?: boolean
    channels?: boolean
    sampleRate?: boolean
    bitRate?: boolean
    projectId?: boolean
    folderId?: boolean
    tags?: boolean
    version?: boolean
    parentId?: boolean
    dependencies?: boolean
    originalName?: boolean
    importedAt?: boolean
    importSettings?: boolean
    thumbnail?: boolean
    preview?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    folder?: boolean | Asset$folderArgs<ExtArgs>
    parent?: boolean | Asset$parentArgs<ExtArgs>
  }, ExtArgs["result"]["asset"]>

  export type AssetSelectScalar = {
    id?: boolean
    name?: boolean
    type?: boolean
    filePath?: boolean
    fileSize?: boolean
    mimeType?: boolean
    checksum?: boolean
    width?: boolean
    height?: boolean
    duration?: boolean
    channels?: boolean
    sampleRate?: boolean
    bitRate?: boolean
    projectId?: boolean
    folderId?: boolean
    tags?: boolean
    version?: boolean
    parentId?: boolean
    dependencies?: boolean
    originalName?: boolean
    importedAt?: boolean
    importSettings?: boolean
    thumbnail?: boolean
    preview?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AssetOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "type" | "filePath" | "fileSize" | "mimeType" | "checksum" | "width" | "height" | "duration" | "channels" | "sampleRate" | "bitRate" | "projectId" | "folderId" | "tags" | "version" | "parentId" | "dependencies" | "originalName" | "importedAt" | "importSettings" | "thumbnail" | "preview" | "createdAt" | "updatedAt", ExtArgs["result"]["asset"]>
  export type AssetInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    folder?: boolean | Asset$folderArgs<ExtArgs>
    parent?: boolean | Asset$parentArgs<ExtArgs>
    versions?: boolean | Asset$versionsArgs<ExtArgs>
    sceneUsages?: boolean | Asset$sceneUsagesArgs<ExtArgs>
    scriptUsages?: boolean | Asset$scriptUsagesArgs<ExtArgs>
    materialUsages?: boolean | Asset$materialUsagesArgs<ExtArgs>
    _count?: boolean | AssetCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AssetIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    folder?: boolean | Asset$folderArgs<ExtArgs>
    parent?: boolean | Asset$parentArgs<ExtArgs>
  }
  export type AssetIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    folder?: boolean | Asset$folderArgs<ExtArgs>
    parent?: boolean | Asset$parentArgs<ExtArgs>
  }

  export type $AssetPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Asset"
    objects: {
      project: Prisma.$ProjectPayload<ExtArgs>
      folder: Prisma.$FolderPayload<ExtArgs> | null
      parent: Prisma.$AssetPayload<ExtArgs> | null
      versions: Prisma.$AssetPayload<ExtArgs>[]
      sceneUsages: Prisma.$SceneAssetUsagePayload<ExtArgs>[]
      scriptUsages: Prisma.$ScriptAssetUsagePayload<ExtArgs>[]
      materialUsages: Prisma.$MaterialAssetUsagePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      type: $Enums.AssetType
      filePath: string
      fileSize: number
      mimeType: string | null
      checksum: string | null
      width: number | null
      height: number | null
      duration: number | null
      channels: number | null
      sampleRate: number | null
      bitRate: number | null
      projectId: string
      folderId: string | null
      tags: Prisma.JsonValue | null
      version: string
      parentId: string | null
      dependencies: Prisma.JsonValue | null
      originalName: string | null
      importedAt: Date
      importSettings: Prisma.JsonValue | null
      thumbnail: string | null
      preview: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["asset"]>
    composites: {}
  }

  type AssetGetPayload<S extends boolean | null | undefined | AssetDefaultArgs> = $Result.GetResult<Prisma.$AssetPayload, S>

  type AssetCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AssetFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AssetCountAggregateInputType | true
    }

  export interface AssetDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Asset'], meta: { name: 'Asset' } }
    /**
     * Find zero or one Asset that matches the filter.
     * @param {AssetFindUniqueArgs} args - Arguments to find a Asset
     * @example
     * // Get one Asset
     * const asset = await prisma.asset.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AssetFindUniqueArgs>(args: SelectSubset<T, AssetFindUniqueArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Asset that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AssetFindUniqueOrThrowArgs} args - Arguments to find a Asset
     * @example
     * // Get one Asset
     * const asset = await prisma.asset.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AssetFindUniqueOrThrowArgs>(args: SelectSubset<T, AssetFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Asset that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetFindFirstArgs} args - Arguments to find a Asset
     * @example
     * // Get one Asset
     * const asset = await prisma.asset.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AssetFindFirstArgs>(args?: SelectSubset<T, AssetFindFirstArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Asset that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetFindFirstOrThrowArgs} args - Arguments to find a Asset
     * @example
     * // Get one Asset
     * const asset = await prisma.asset.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AssetFindFirstOrThrowArgs>(args?: SelectSubset<T, AssetFindFirstOrThrowArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Assets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Assets
     * const assets = await prisma.asset.findMany()
     * 
     * // Get first 10 Assets
     * const assets = await prisma.asset.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const assetWithIdOnly = await prisma.asset.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AssetFindManyArgs>(args?: SelectSubset<T, AssetFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Asset.
     * @param {AssetCreateArgs} args - Arguments to create a Asset.
     * @example
     * // Create one Asset
     * const Asset = await prisma.asset.create({
     *   data: {
     *     // ... data to create a Asset
     *   }
     * })
     * 
     */
    create<T extends AssetCreateArgs>(args: SelectSubset<T, AssetCreateArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Assets.
     * @param {AssetCreateManyArgs} args - Arguments to create many Assets.
     * @example
     * // Create many Assets
     * const asset = await prisma.asset.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AssetCreateManyArgs>(args?: SelectSubset<T, AssetCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Assets and returns the data saved in the database.
     * @param {AssetCreateManyAndReturnArgs} args - Arguments to create many Assets.
     * @example
     * // Create many Assets
     * const asset = await prisma.asset.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Assets and only return the `id`
     * const assetWithIdOnly = await prisma.asset.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AssetCreateManyAndReturnArgs>(args?: SelectSubset<T, AssetCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Asset.
     * @param {AssetDeleteArgs} args - Arguments to delete one Asset.
     * @example
     * // Delete one Asset
     * const Asset = await prisma.asset.delete({
     *   where: {
     *     // ... filter to delete one Asset
     *   }
     * })
     * 
     */
    delete<T extends AssetDeleteArgs>(args: SelectSubset<T, AssetDeleteArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Asset.
     * @param {AssetUpdateArgs} args - Arguments to update one Asset.
     * @example
     * // Update one Asset
     * const asset = await prisma.asset.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AssetUpdateArgs>(args: SelectSubset<T, AssetUpdateArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Assets.
     * @param {AssetDeleteManyArgs} args - Arguments to filter Assets to delete.
     * @example
     * // Delete a few Assets
     * const { count } = await prisma.asset.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AssetDeleteManyArgs>(args?: SelectSubset<T, AssetDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Assets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Assets
     * const asset = await prisma.asset.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AssetUpdateManyArgs>(args: SelectSubset<T, AssetUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Assets and returns the data updated in the database.
     * @param {AssetUpdateManyAndReturnArgs} args - Arguments to update many Assets.
     * @example
     * // Update many Assets
     * const asset = await prisma.asset.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Assets and only return the `id`
     * const assetWithIdOnly = await prisma.asset.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AssetUpdateManyAndReturnArgs>(args: SelectSubset<T, AssetUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Asset.
     * @param {AssetUpsertArgs} args - Arguments to update or create a Asset.
     * @example
     * // Update or create a Asset
     * const asset = await prisma.asset.upsert({
     *   create: {
     *     // ... data to create a Asset
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Asset we want to update
     *   }
     * })
     */
    upsert<T extends AssetUpsertArgs>(args: SelectSubset<T, AssetUpsertArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Assets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetCountArgs} args - Arguments to filter Assets to count.
     * @example
     * // Count the number of Assets
     * const count = await prisma.asset.count({
     *   where: {
     *     // ... the filter for the Assets we want to count
     *   }
     * })
    **/
    count<T extends AssetCountArgs>(
      args?: Subset<T, AssetCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AssetCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Asset.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AssetAggregateArgs>(args: Subset<T, AssetAggregateArgs>): Prisma.PrismaPromise<GetAssetAggregateType<T>>

    /**
     * Group by Asset.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AssetGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AssetGroupByArgs['orderBy'] }
        : { orderBy?: AssetGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AssetGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAssetGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Asset model
   */
  readonly fields: AssetFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Asset.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AssetClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    project<T extends ProjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectDefaultArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    folder<T extends Asset$folderArgs<ExtArgs> = {}>(args?: Subset<T, Asset$folderArgs<ExtArgs>>): Prisma__FolderClient<$Result.GetResult<Prisma.$FolderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    parent<T extends Asset$parentArgs<ExtArgs> = {}>(args?: Subset<T, Asset$parentArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    versions<T extends Asset$versionsArgs<ExtArgs> = {}>(args?: Subset<T, Asset$versionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    sceneUsages<T extends Asset$sceneUsagesArgs<ExtArgs> = {}>(args?: Subset<T, Asset$sceneUsagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SceneAssetUsagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    scriptUsages<T extends Asset$scriptUsagesArgs<ExtArgs> = {}>(args?: Subset<T, Asset$scriptUsagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScriptAssetUsagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    materialUsages<T extends Asset$materialUsagesArgs<ExtArgs> = {}>(args?: Subset<T, Asset$materialUsagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MaterialAssetUsagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Asset model
   */
  interface AssetFieldRefs {
    readonly id: FieldRef<"Asset", 'String'>
    readonly name: FieldRef<"Asset", 'String'>
    readonly type: FieldRef<"Asset", 'AssetType'>
    readonly filePath: FieldRef<"Asset", 'String'>
    readonly fileSize: FieldRef<"Asset", 'Int'>
    readonly mimeType: FieldRef<"Asset", 'String'>
    readonly checksum: FieldRef<"Asset", 'String'>
    readonly width: FieldRef<"Asset", 'Int'>
    readonly height: FieldRef<"Asset", 'Int'>
    readonly duration: FieldRef<"Asset", 'Float'>
    readonly channels: FieldRef<"Asset", 'Int'>
    readonly sampleRate: FieldRef<"Asset", 'Int'>
    readonly bitRate: FieldRef<"Asset", 'Int'>
    readonly projectId: FieldRef<"Asset", 'String'>
    readonly folderId: FieldRef<"Asset", 'String'>
    readonly tags: FieldRef<"Asset", 'Json'>
    readonly version: FieldRef<"Asset", 'String'>
    readonly parentId: FieldRef<"Asset", 'String'>
    readonly dependencies: FieldRef<"Asset", 'Json'>
    readonly originalName: FieldRef<"Asset", 'String'>
    readonly importedAt: FieldRef<"Asset", 'DateTime'>
    readonly importSettings: FieldRef<"Asset", 'Json'>
    readonly thumbnail: FieldRef<"Asset", 'String'>
    readonly preview: FieldRef<"Asset", 'String'>
    readonly createdAt: FieldRef<"Asset", 'DateTime'>
    readonly updatedAt: FieldRef<"Asset", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Asset findUnique
   */
  export type AssetFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Asset
     */
    omit?: AssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    /**
     * Filter, which Asset to fetch.
     */
    where: AssetWhereUniqueInput
  }

  /**
   * Asset findUniqueOrThrow
   */
  export type AssetFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Asset
     */
    omit?: AssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    /**
     * Filter, which Asset to fetch.
     */
    where: AssetWhereUniqueInput
  }

  /**
   * Asset findFirst
   */
  export type AssetFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Asset
     */
    omit?: AssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    /**
     * Filter, which Asset to fetch.
     */
    where?: AssetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assets to fetch.
     */
    orderBy?: AssetOrderByWithRelationInput | AssetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Assets.
     */
    cursor?: AssetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Assets.
     */
    distinct?: AssetScalarFieldEnum | AssetScalarFieldEnum[]
  }

  /**
   * Asset findFirstOrThrow
   */
  export type AssetFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Asset
     */
    omit?: AssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    /**
     * Filter, which Asset to fetch.
     */
    where?: AssetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assets to fetch.
     */
    orderBy?: AssetOrderByWithRelationInput | AssetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Assets.
     */
    cursor?: AssetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Assets.
     */
    distinct?: AssetScalarFieldEnum | AssetScalarFieldEnum[]
  }

  /**
   * Asset findMany
   */
  export type AssetFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Asset
     */
    omit?: AssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    /**
     * Filter, which Assets to fetch.
     */
    where?: AssetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assets to fetch.
     */
    orderBy?: AssetOrderByWithRelationInput | AssetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Assets.
     */
    cursor?: AssetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assets.
     */
    skip?: number
    distinct?: AssetScalarFieldEnum | AssetScalarFieldEnum[]
  }

  /**
   * Asset create
   */
  export type AssetCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Asset
     */
    omit?: AssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    /**
     * The data needed to create a Asset.
     */
    data: XOR<AssetCreateInput, AssetUncheckedCreateInput>
  }

  /**
   * Asset createMany
   */
  export type AssetCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Assets.
     */
    data: AssetCreateManyInput | AssetCreateManyInput[]
  }

  /**
   * Asset createManyAndReturn
   */
  export type AssetCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Asset
     */
    omit?: AssetOmit<ExtArgs> | null
    /**
     * The data used to create many Assets.
     */
    data: AssetCreateManyInput | AssetCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Asset update
   */
  export type AssetUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Asset
     */
    omit?: AssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    /**
     * The data needed to update a Asset.
     */
    data: XOR<AssetUpdateInput, AssetUncheckedUpdateInput>
    /**
     * Choose, which Asset to update.
     */
    where: AssetWhereUniqueInput
  }

  /**
   * Asset updateMany
   */
  export type AssetUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Assets.
     */
    data: XOR<AssetUpdateManyMutationInput, AssetUncheckedUpdateManyInput>
    /**
     * Filter which Assets to update
     */
    where?: AssetWhereInput
    /**
     * Limit how many Assets to update.
     */
    limit?: number
  }

  /**
   * Asset updateManyAndReturn
   */
  export type AssetUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Asset
     */
    omit?: AssetOmit<ExtArgs> | null
    /**
     * The data used to update Assets.
     */
    data: XOR<AssetUpdateManyMutationInput, AssetUncheckedUpdateManyInput>
    /**
     * Filter which Assets to update
     */
    where?: AssetWhereInput
    /**
     * Limit how many Assets to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Asset upsert
   */
  export type AssetUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Asset
     */
    omit?: AssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    /**
     * The filter to search for the Asset to update in case it exists.
     */
    where: AssetWhereUniqueInput
    /**
     * In case the Asset found by the `where` argument doesn't exist, create a new Asset with this data.
     */
    create: XOR<AssetCreateInput, AssetUncheckedCreateInput>
    /**
     * In case the Asset was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AssetUpdateInput, AssetUncheckedUpdateInput>
  }

  /**
   * Asset delete
   */
  export type AssetDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Asset
     */
    omit?: AssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    /**
     * Filter which Asset to delete.
     */
    where: AssetWhereUniqueInput
  }

  /**
   * Asset deleteMany
   */
  export type AssetDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Assets to delete
     */
    where?: AssetWhereInput
    /**
     * Limit how many Assets to delete.
     */
    limit?: number
  }

  /**
   * Asset.folder
   */
  export type Asset$folderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Folder
     */
    select?: FolderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Folder
     */
    omit?: FolderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FolderInclude<ExtArgs> | null
    where?: FolderWhereInput
  }

  /**
   * Asset.parent
   */
  export type Asset$parentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Asset
     */
    omit?: AssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    where?: AssetWhereInput
  }

  /**
   * Asset.versions
   */
  export type Asset$versionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Asset
     */
    omit?: AssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    where?: AssetWhereInput
    orderBy?: AssetOrderByWithRelationInput | AssetOrderByWithRelationInput[]
    cursor?: AssetWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AssetScalarFieldEnum | AssetScalarFieldEnum[]
  }

  /**
   * Asset.sceneUsages
   */
  export type Asset$sceneUsagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SceneAssetUsage
     */
    select?: SceneAssetUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SceneAssetUsage
     */
    omit?: SceneAssetUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SceneAssetUsageInclude<ExtArgs> | null
    where?: SceneAssetUsageWhereInput
    orderBy?: SceneAssetUsageOrderByWithRelationInput | SceneAssetUsageOrderByWithRelationInput[]
    cursor?: SceneAssetUsageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SceneAssetUsageScalarFieldEnum | SceneAssetUsageScalarFieldEnum[]
  }

  /**
   * Asset.scriptUsages
   */
  export type Asset$scriptUsagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScriptAssetUsage
     */
    select?: ScriptAssetUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScriptAssetUsage
     */
    omit?: ScriptAssetUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScriptAssetUsageInclude<ExtArgs> | null
    where?: ScriptAssetUsageWhereInput
    orderBy?: ScriptAssetUsageOrderByWithRelationInput | ScriptAssetUsageOrderByWithRelationInput[]
    cursor?: ScriptAssetUsageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ScriptAssetUsageScalarFieldEnum | ScriptAssetUsageScalarFieldEnum[]
  }

  /**
   * Asset.materialUsages
   */
  export type Asset$materialUsagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaterialAssetUsage
     */
    select?: MaterialAssetUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaterialAssetUsage
     */
    omit?: MaterialAssetUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialAssetUsageInclude<ExtArgs> | null
    where?: MaterialAssetUsageWhereInput
    orderBy?: MaterialAssetUsageOrderByWithRelationInput | MaterialAssetUsageOrderByWithRelationInput[]
    cursor?: MaterialAssetUsageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MaterialAssetUsageScalarFieldEnum | MaterialAssetUsageScalarFieldEnum[]
  }

  /**
   * Asset without action
   */
  export type AssetDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Asset
     */
    omit?: AssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
  }


  /**
   * Model SceneAssetUsage
   */

  export type AggregateSceneAssetUsage = {
    _count: SceneAssetUsageCountAggregateOutputType | null
    _min: SceneAssetUsageMinAggregateOutputType | null
    _max: SceneAssetUsageMaxAggregateOutputType | null
  }

  export type SceneAssetUsageMinAggregateOutputType = {
    id: string | null
    sceneId: string | null
    assetId: string | null
    usage: string | null
  }

  export type SceneAssetUsageMaxAggregateOutputType = {
    id: string | null
    sceneId: string | null
    assetId: string | null
    usage: string | null
  }

  export type SceneAssetUsageCountAggregateOutputType = {
    id: number
    sceneId: number
    assetId: number
    usage: number
    _all: number
  }


  export type SceneAssetUsageMinAggregateInputType = {
    id?: true
    sceneId?: true
    assetId?: true
    usage?: true
  }

  export type SceneAssetUsageMaxAggregateInputType = {
    id?: true
    sceneId?: true
    assetId?: true
    usage?: true
  }

  export type SceneAssetUsageCountAggregateInputType = {
    id?: true
    sceneId?: true
    assetId?: true
    usage?: true
    _all?: true
  }

  export type SceneAssetUsageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SceneAssetUsage to aggregate.
     */
    where?: SceneAssetUsageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SceneAssetUsages to fetch.
     */
    orderBy?: SceneAssetUsageOrderByWithRelationInput | SceneAssetUsageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SceneAssetUsageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SceneAssetUsages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SceneAssetUsages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SceneAssetUsages
    **/
    _count?: true | SceneAssetUsageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SceneAssetUsageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SceneAssetUsageMaxAggregateInputType
  }

  export type GetSceneAssetUsageAggregateType<T extends SceneAssetUsageAggregateArgs> = {
        [P in keyof T & keyof AggregateSceneAssetUsage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSceneAssetUsage[P]>
      : GetScalarType<T[P], AggregateSceneAssetUsage[P]>
  }




  export type SceneAssetUsageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SceneAssetUsageWhereInput
    orderBy?: SceneAssetUsageOrderByWithAggregationInput | SceneAssetUsageOrderByWithAggregationInput[]
    by: SceneAssetUsageScalarFieldEnum[] | SceneAssetUsageScalarFieldEnum
    having?: SceneAssetUsageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SceneAssetUsageCountAggregateInputType | true
    _min?: SceneAssetUsageMinAggregateInputType
    _max?: SceneAssetUsageMaxAggregateInputType
  }

  export type SceneAssetUsageGroupByOutputType = {
    id: string
    sceneId: string
    assetId: string
    usage: string
    _count: SceneAssetUsageCountAggregateOutputType | null
    _min: SceneAssetUsageMinAggregateOutputType | null
    _max: SceneAssetUsageMaxAggregateOutputType | null
  }

  type GetSceneAssetUsageGroupByPayload<T extends SceneAssetUsageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SceneAssetUsageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SceneAssetUsageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SceneAssetUsageGroupByOutputType[P]>
            : GetScalarType<T[P], SceneAssetUsageGroupByOutputType[P]>
        }
      >
    >


  export type SceneAssetUsageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sceneId?: boolean
    assetId?: boolean
    usage?: boolean
    scene?: boolean | SceneDefaultArgs<ExtArgs>
    asset?: boolean | AssetDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sceneAssetUsage"]>

  export type SceneAssetUsageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sceneId?: boolean
    assetId?: boolean
    usage?: boolean
    scene?: boolean | SceneDefaultArgs<ExtArgs>
    asset?: boolean | AssetDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sceneAssetUsage"]>

  export type SceneAssetUsageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sceneId?: boolean
    assetId?: boolean
    usage?: boolean
    scene?: boolean | SceneDefaultArgs<ExtArgs>
    asset?: boolean | AssetDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sceneAssetUsage"]>

  export type SceneAssetUsageSelectScalar = {
    id?: boolean
    sceneId?: boolean
    assetId?: boolean
    usage?: boolean
  }

  export type SceneAssetUsageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "sceneId" | "assetId" | "usage", ExtArgs["result"]["sceneAssetUsage"]>
  export type SceneAssetUsageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    scene?: boolean | SceneDefaultArgs<ExtArgs>
    asset?: boolean | AssetDefaultArgs<ExtArgs>
  }
  export type SceneAssetUsageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    scene?: boolean | SceneDefaultArgs<ExtArgs>
    asset?: boolean | AssetDefaultArgs<ExtArgs>
  }
  export type SceneAssetUsageIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    scene?: boolean | SceneDefaultArgs<ExtArgs>
    asset?: boolean | AssetDefaultArgs<ExtArgs>
  }

  export type $SceneAssetUsagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SceneAssetUsage"
    objects: {
      scene: Prisma.$ScenePayload<ExtArgs>
      asset: Prisma.$AssetPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      sceneId: string
      assetId: string
      usage: string
    }, ExtArgs["result"]["sceneAssetUsage"]>
    composites: {}
  }

  type SceneAssetUsageGetPayload<S extends boolean | null | undefined | SceneAssetUsageDefaultArgs> = $Result.GetResult<Prisma.$SceneAssetUsagePayload, S>

  type SceneAssetUsageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SceneAssetUsageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SceneAssetUsageCountAggregateInputType | true
    }

  export interface SceneAssetUsageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SceneAssetUsage'], meta: { name: 'SceneAssetUsage' } }
    /**
     * Find zero or one SceneAssetUsage that matches the filter.
     * @param {SceneAssetUsageFindUniqueArgs} args - Arguments to find a SceneAssetUsage
     * @example
     * // Get one SceneAssetUsage
     * const sceneAssetUsage = await prisma.sceneAssetUsage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SceneAssetUsageFindUniqueArgs>(args: SelectSubset<T, SceneAssetUsageFindUniqueArgs<ExtArgs>>): Prisma__SceneAssetUsageClient<$Result.GetResult<Prisma.$SceneAssetUsagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SceneAssetUsage that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SceneAssetUsageFindUniqueOrThrowArgs} args - Arguments to find a SceneAssetUsage
     * @example
     * // Get one SceneAssetUsage
     * const sceneAssetUsage = await prisma.sceneAssetUsage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SceneAssetUsageFindUniqueOrThrowArgs>(args: SelectSubset<T, SceneAssetUsageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SceneAssetUsageClient<$Result.GetResult<Prisma.$SceneAssetUsagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SceneAssetUsage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SceneAssetUsageFindFirstArgs} args - Arguments to find a SceneAssetUsage
     * @example
     * // Get one SceneAssetUsage
     * const sceneAssetUsage = await prisma.sceneAssetUsage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SceneAssetUsageFindFirstArgs>(args?: SelectSubset<T, SceneAssetUsageFindFirstArgs<ExtArgs>>): Prisma__SceneAssetUsageClient<$Result.GetResult<Prisma.$SceneAssetUsagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SceneAssetUsage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SceneAssetUsageFindFirstOrThrowArgs} args - Arguments to find a SceneAssetUsage
     * @example
     * // Get one SceneAssetUsage
     * const sceneAssetUsage = await prisma.sceneAssetUsage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SceneAssetUsageFindFirstOrThrowArgs>(args?: SelectSubset<T, SceneAssetUsageFindFirstOrThrowArgs<ExtArgs>>): Prisma__SceneAssetUsageClient<$Result.GetResult<Prisma.$SceneAssetUsagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SceneAssetUsages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SceneAssetUsageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SceneAssetUsages
     * const sceneAssetUsages = await prisma.sceneAssetUsage.findMany()
     * 
     * // Get first 10 SceneAssetUsages
     * const sceneAssetUsages = await prisma.sceneAssetUsage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sceneAssetUsageWithIdOnly = await prisma.sceneAssetUsage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SceneAssetUsageFindManyArgs>(args?: SelectSubset<T, SceneAssetUsageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SceneAssetUsagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SceneAssetUsage.
     * @param {SceneAssetUsageCreateArgs} args - Arguments to create a SceneAssetUsage.
     * @example
     * // Create one SceneAssetUsage
     * const SceneAssetUsage = await prisma.sceneAssetUsage.create({
     *   data: {
     *     // ... data to create a SceneAssetUsage
     *   }
     * })
     * 
     */
    create<T extends SceneAssetUsageCreateArgs>(args: SelectSubset<T, SceneAssetUsageCreateArgs<ExtArgs>>): Prisma__SceneAssetUsageClient<$Result.GetResult<Prisma.$SceneAssetUsagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SceneAssetUsages.
     * @param {SceneAssetUsageCreateManyArgs} args - Arguments to create many SceneAssetUsages.
     * @example
     * // Create many SceneAssetUsages
     * const sceneAssetUsage = await prisma.sceneAssetUsage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SceneAssetUsageCreateManyArgs>(args?: SelectSubset<T, SceneAssetUsageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SceneAssetUsages and returns the data saved in the database.
     * @param {SceneAssetUsageCreateManyAndReturnArgs} args - Arguments to create many SceneAssetUsages.
     * @example
     * // Create many SceneAssetUsages
     * const sceneAssetUsage = await prisma.sceneAssetUsage.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SceneAssetUsages and only return the `id`
     * const sceneAssetUsageWithIdOnly = await prisma.sceneAssetUsage.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SceneAssetUsageCreateManyAndReturnArgs>(args?: SelectSubset<T, SceneAssetUsageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SceneAssetUsagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SceneAssetUsage.
     * @param {SceneAssetUsageDeleteArgs} args - Arguments to delete one SceneAssetUsage.
     * @example
     * // Delete one SceneAssetUsage
     * const SceneAssetUsage = await prisma.sceneAssetUsage.delete({
     *   where: {
     *     // ... filter to delete one SceneAssetUsage
     *   }
     * })
     * 
     */
    delete<T extends SceneAssetUsageDeleteArgs>(args: SelectSubset<T, SceneAssetUsageDeleteArgs<ExtArgs>>): Prisma__SceneAssetUsageClient<$Result.GetResult<Prisma.$SceneAssetUsagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SceneAssetUsage.
     * @param {SceneAssetUsageUpdateArgs} args - Arguments to update one SceneAssetUsage.
     * @example
     * // Update one SceneAssetUsage
     * const sceneAssetUsage = await prisma.sceneAssetUsage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SceneAssetUsageUpdateArgs>(args: SelectSubset<T, SceneAssetUsageUpdateArgs<ExtArgs>>): Prisma__SceneAssetUsageClient<$Result.GetResult<Prisma.$SceneAssetUsagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SceneAssetUsages.
     * @param {SceneAssetUsageDeleteManyArgs} args - Arguments to filter SceneAssetUsages to delete.
     * @example
     * // Delete a few SceneAssetUsages
     * const { count } = await prisma.sceneAssetUsage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SceneAssetUsageDeleteManyArgs>(args?: SelectSubset<T, SceneAssetUsageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SceneAssetUsages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SceneAssetUsageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SceneAssetUsages
     * const sceneAssetUsage = await prisma.sceneAssetUsage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SceneAssetUsageUpdateManyArgs>(args: SelectSubset<T, SceneAssetUsageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SceneAssetUsages and returns the data updated in the database.
     * @param {SceneAssetUsageUpdateManyAndReturnArgs} args - Arguments to update many SceneAssetUsages.
     * @example
     * // Update many SceneAssetUsages
     * const sceneAssetUsage = await prisma.sceneAssetUsage.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SceneAssetUsages and only return the `id`
     * const sceneAssetUsageWithIdOnly = await prisma.sceneAssetUsage.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SceneAssetUsageUpdateManyAndReturnArgs>(args: SelectSubset<T, SceneAssetUsageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SceneAssetUsagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SceneAssetUsage.
     * @param {SceneAssetUsageUpsertArgs} args - Arguments to update or create a SceneAssetUsage.
     * @example
     * // Update or create a SceneAssetUsage
     * const sceneAssetUsage = await prisma.sceneAssetUsage.upsert({
     *   create: {
     *     // ... data to create a SceneAssetUsage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SceneAssetUsage we want to update
     *   }
     * })
     */
    upsert<T extends SceneAssetUsageUpsertArgs>(args: SelectSubset<T, SceneAssetUsageUpsertArgs<ExtArgs>>): Prisma__SceneAssetUsageClient<$Result.GetResult<Prisma.$SceneAssetUsagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SceneAssetUsages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SceneAssetUsageCountArgs} args - Arguments to filter SceneAssetUsages to count.
     * @example
     * // Count the number of SceneAssetUsages
     * const count = await prisma.sceneAssetUsage.count({
     *   where: {
     *     // ... the filter for the SceneAssetUsages we want to count
     *   }
     * })
    **/
    count<T extends SceneAssetUsageCountArgs>(
      args?: Subset<T, SceneAssetUsageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SceneAssetUsageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SceneAssetUsage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SceneAssetUsageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SceneAssetUsageAggregateArgs>(args: Subset<T, SceneAssetUsageAggregateArgs>): Prisma.PrismaPromise<GetSceneAssetUsageAggregateType<T>>

    /**
     * Group by SceneAssetUsage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SceneAssetUsageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SceneAssetUsageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SceneAssetUsageGroupByArgs['orderBy'] }
        : { orderBy?: SceneAssetUsageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SceneAssetUsageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSceneAssetUsageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SceneAssetUsage model
   */
  readonly fields: SceneAssetUsageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SceneAssetUsage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SceneAssetUsageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    scene<T extends SceneDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SceneDefaultArgs<ExtArgs>>): Prisma__SceneClient<$Result.GetResult<Prisma.$ScenePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    asset<T extends AssetDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AssetDefaultArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SceneAssetUsage model
   */
  interface SceneAssetUsageFieldRefs {
    readonly id: FieldRef<"SceneAssetUsage", 'String'>
    readonly sceneId: FieldRef<"SceneAssetUsage", 'String'>
    readonly assetId: FieldRef<"SceneAssetUsage", 'String'>
    readonly usage: FieldRef<"SceneAssetUsage", 'String'>
  }
    

  // Custom InputTypes
  /**
   * SceneAssetUsage findUnique
   */
  export type SceneAssetUsageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SceneAssetUsage
     */
    select?: SceneAssetUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SceneAssetUsage
     */
    omit?: SceneAssetUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SceneAssetUsageInclude<ExtArgs> | null
    /**
     * Filter, which SceneAssetUsage to fetch.
     */
    where: SceneAssetUsageWhereUniqueInput
  }

  /**
   * SceneAssetUsage findUniqueOrThrow
   */
  export type SceneAssetUsageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SceneAssetUsage
     */
    select?: SceneAssetUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SceneAssetUsage
     */
    omit?: SceneAssetUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SceneAssetUsageInclude<ExtArgs> | null
    /**
     * Filter, which SceneAssetUsage to fetch.
     */
    where: SceneAssetUsageWhereUniqueInput
  }

  /**
   * SceneAssetUsage findFirst
   */
  export type SceneAssetUsageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SceneAssetUsage
     */
    select?: SceneAssetUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SceneAssetUsage
     */
    omit?: SceneAssetUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SceneAssetUsageInclude<ExtArgs> | null
    /**
     * Filter, which SceneAssetUsage to fetch.
     */
    where?: SceneAssetUsageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SceneAssetUsages to fetch.
     */
    orderBy?: SceneAssetUsageOrderByWithRelationInput | SceneAssetUsageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SceneAssetUsages.
     */
    cursor?: SceneAssetUsageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SceneAssetUsages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SceneAssetUsages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SceneAssetUsages.
     */
    distinct?: SceneAssetUsageScalarFieldEnum | SceneAssetUsageScalarFieldEnum[]
  }

  /**
   * SceneAssetUsage findFirstOrThrow
   */
  export type SceneAssetUsageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SceneAssetUsage
     */
    select?: SceneAssetUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SceneAssetUsage
     */
    omit?: SceneAssetUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SceneAssetUsageInclude<ExtArgs> | null
    /**
     * Filter, which SceneAssetUsage to fetch.
     */
    where?: SceneAssetUsageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SceneAssetUsages to fetch.
     */
    orderBy?: SceneAssetUsageOrderByWithRelationInput | SceneAssetUsageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SceneAssetUsages.
     */
    cursor?: SceneAssetUsageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SceneAssetUsages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SceneAssetUsages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SceneAssetUsages.
     */
    distinct?: SceneAssetUsageScalarFieldEnum | SceneAssetUsageScalarFieldEnum[]
  }

  /**
   * SceneAssetUsage findMany
   */
  export type SceneAssetUsageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SceneAssetUsage
     */
    select?: SceneAssetUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SceneAssetUsage
     */
    omit?: SceneAssetUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SceneAssetUsageInclude<ExtArgs> | null
    /**
     * Filter, which SceneAssetUsages to fetch.
     */
    where?: SceneAssetUsageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SceneAssetUsages to fetch.
     */
    orderBy?: SceneAssetUsageOrderByWithRelationInput | SceneAssetUsageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SceneAssetUsages.
     */
    cursor?: SceneAssetUsageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SceneAssetUsages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SceneAssetUsages.
     */
    skip?: number
    distinct?: SceneAssetUsageScalarFieldEnum | SceneAssetUsageScalarFieldEnum[]
  }

  /**
   * SceneAssetUsage create
   */
  export type SceneAssetUsageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SceneAssetUsage
     */
    select?: SceneAssetUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SceneAssetUsage
     */
    omit?: SceneAssetUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SceneAssetUsageInclude<ExtArgs> | null
    /**
     * The data needed to create a SceneAssetUsage.
     */
    data: XOR<SceneAssetUsageCreateInput, SceneAssetUsageUncheckedCreateInput>
  }

  /**
   * SceneAssetUsage createMany
   */
  export type SceneAssetUsageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SceneAssetUsages.
     */
    data: SceneAssetUsageCreateManyInput | SceneAssetUsageCreateManyInput[]
  }

  /**
   * SceneAssetUsage createManyAndReturn
   */
  export type SceneAssetUsageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SceneAssetUsage
     */
    select?: SceneAssetUsageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SceneAssetUsage
     */
    omit?: SceneAssetUsageOmit<ExtArgs> | null
    /**
     * The data used to create many SceneAssetUsages.
     */
    data: SceneAssetUsageCreateManyInput | SceneAssetUsageCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SceneAssetUsageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SceneAssetUsage update
   */
  export type SceneAssetUsageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SceneAssetUsage
     */
    select?: SceneAssetUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SceneAssetUsage
     */
    omit?: SceneAssetUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SceneAssetUsageInclude<ExtArgs> | null
    /**
     * The data needed to update a SceneAssetUsage.
     */
    data: XOR<SceneAssetUsageUpdateInput, SceneAssetUsageUncheckedUpdateInput>
    /**
     * Choose, which SceneAssetUsage to update.
     */
    where: SceneAssetUsageWhereUniqueInput
  }

  /**
   * SceneAssetUsage updateMany
   */
  export type SceneAssetUsageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SceneAssetUsages.
     */
    data: XOR<SceneAssetUsageUpdateManyMutationInput, SceneAssetUsageUncheckedUpdateManyInput>
    /**
     * Filter which SceneAssetUsages to update
     */
    where?: SceneAssetUsageWhereInput
    /**
     * Limit how many SceneAssetUsages to update.
     */
    limit?: number
  }

  /**
   * SceneAssetUsage updateManyAndReturn
   */
  export type SceneAssetUsageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SceneAssetUsage
     */
    select?: SceneAssetUsageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SceneAssetUsage
     */
    omit?: SceneAssetUsageOmit<ExtArgs> | null
    /**
     * The data used to update SceneAssetUsages.
     */
    data: XOR<SceneAssetUsageUpdateManyMutationInput, SceneAssetUsageUncheckedUpdateManyInput>
    /**
     * Filter which SceneAssetUsages to update
     */
    where?: SceneAssetUsageWhereInput
    /**
     * Limit how many SceneAssetUsages to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SceneAssetUsageIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * SceneAssetUsage upsert
   */
  export type SceneAssetUsageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SceneAssetUsage
     */
    select?: SceneAssetUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SceneAssetUsage
     */
    omit?: SceneAssetUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SceneAssetUsageInclude<ExtArgs> | null
    /**
     * The filter to search for the SceneAssetUsage to update in case it exists.
     */
    where: SceneAssetUsageWhereUniqueInput
    /**
     * In case the SceneAssetUsage found by the `where` argument doesn't exist, create a new SceneAssetUsage with this data.
     */
    create: XOR<SceneAssetUsageCreateInput, SceneAssetUsageUncheckedCreateInput>
    /**
     * In case the SceneAssetUsage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SceneAssetUsageUpdateInput, SceneAssetUsageUncheckedUpdateInput>
  }

  /**
   * SceneAssetUsage delete
   */
  export type SceneAssetUsageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SceneAssetUsage
     */
    select?: SceneAssetUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SceneAssetUsage
     */
    omit?: SceneAssetUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SceneAssetUsageInclude<ExtArgs> | null
    /**
     * Filter which SceneAssetUsage to delete.
     */
    where: SceneAssetUsageWhereUniqueInput
  }

  /**
   * SceneAssetUsage deleteMany
   */
  export type SceneAssetUsageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SceneAssetUsages to delete
     */
    where?: SceneAssetUsageWhereInput
    /**
     * Limit how many SceneAssetUsages to delete.
     */
    limit?: number
  }

  /**
   * SceneAssetUsage without action
   */
  export type SceneAssetUsageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SceneAssetUsage
     */
    select?: SceneAssetUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SceneAssetUsage
     */
    omit?: SceneAssetUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SceneAssetUsageInclude<ExtArgs> | null
  }


  /**
   * Model ScriptAssetUsage
   */

  export type AggregateScriptAssetUsage = {
    _count: ScriptAssetUsageCountAggregateOutputType | null
    _min: ScriptAssetUsageMinAggregateOutputType | null
    _max: ScriptAssetUsageMaxAggregateOutputType | null
  }

  export type ScriptAssetUsageMinAggregateOutputType = {
    id: string | null
    scriptId: string | null
    assetId: string | null
    usage: string | null
  }

  export type ScriptAssetUsageMaxAggregateOutputType = {
    id: string | null
    scriptId: string | null
    assetId: string | null
    usage: string | null
  }

  export type ScriptAssetUsageCountAggregateOutputType = {
    id: number
    scriptId: number
    assetId: number
    usage: number
    _all: number
  }


  export type ScriptAssetUsageMinAggregateInputType = {
    id?: true
    scriptId?: true
    assetId?: true
    usage?: true
  }

  export type ScriptAssetUsageMaxAggregateInputType = {
    id?: true
    scriptId?: true
    assetId?: true
    usage?: true
  }

  export type ScriptAssetUsageCountAggregateInputType = {
    id?: true
    scriptId?: true
    assetId?: true
    usage?: true
    _all?: true
  }

  export type ScriptAssetUsageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ScriptAssetUsage to aggregate.
     */
    where?: ScriptAssetUsageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScriptAssetUsages to fetch.
     */
    orderBy?: ScriptAssetUsageOrderByWithRelationInput | ScriptAssetUsageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ScriptAssetUsageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScriptAssetUsages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScriptAssetUsages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ScriptAssetUsages
    **/
    _count?: true | ScriptAssetUsageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ScriptAssetUsageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ScriptAssetUsageMaxAggregateInputType
  }

  export type GetScriptAssetUsageAggregateType<T extends ScriptAssetUsageAggregateArgs> = {
        [P in keyof T & keyof AggregateScriptAssetUsage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateScriptAssetUsage[P]>
      : GetScalarType<T[P], AggregateScriptAssetUsage[P]>
  }




  export type ScriptAssetUsageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScriptAssetUsageWhereInput
    orderBy?: ScriptAssetUsageOrderByWithAggregationInput | ScriptAssetUsageOrderByWithAggregationInput[]
    by: ScriptAssetUsageScalarFieldEnum[] | ScriptAssetUsageScalarFieldEnum
    having?: ScriptAssetUsageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ScriptAssetUsageCountAggregateInputType | true
    _min?: ScriptAssetUsageMinAggregateInputType
    _max?: ScriptAssetUsageMaxAggregateInputType
  }

  export type ScriptAssetUsageGroupByOutputType = {
    id: string
    scriptId: string
    assetId: string
    usage: string
    _count: ScriptAssetUsageCountAggregateOutputType | null
    _min: ScriptAssetUsageMinAggregateOutputType | null
    _max: ScriptAssetUsageMaxAggregateOutputType | null
  }

  type GetScriptAssetUsageGroupByPayload<T extends ScriptAssetUsageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ScriptAssetUsageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ScriptAssetUsageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ScriptAssetUsageGroupByOutputType[P]>
            : GetScalarType<T[P], ScriptAssetUsageGroupByOutputType[P]>
        }
      >
    >


  export type ScriptAssetUsageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    scriptId?: boolean
    assetId?: boolean
    usage?: boolean
    script?: boolean | ScriptDefaultArgs<ExtArgs>
    asset?: boolean | AssetDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["scriptAssetUsage"]>

  export type ScriptAssetUsageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    scriptId?: boolean
    assetId?: boolean
    usage?: boolean
    script?: boolean | ScriptDefaultArgs<ExtArgs>
    asset?: boolean | AssetDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["scriptAssetUsage"]>

  export type ScriptAssetUsageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    scriptId?: boolean
    assetId?: boolean
    usage?: boolean
    script?: boolean | ScriptDefaultArgs<ExtArgs>
    asset?: boolean | AssetDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["scriptAssetUsage"]>

  export type ScriptAssetUsageSelectScalar = {
    id?: boolean
    scriptId?: boolean
    assetId?: boolean
    usage?: boolean
  }

  export type ScriptAssetUsageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "scriptId" | "assetId" | "usage", ExtArgs["result"]["scriptAssetUsage"]>
  export type ScriptAssetUsageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    script?: boolean | ScriptDefaultArgs<ExtArgs>
    asset?: boolean | AssetDefaultArgs<ExtArgs>
  }
  export type ScriptAssetUsageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    script?: boolean | ScriptDefaultArgs<ExtArgs>
    asset?: boolean | AssetDefaultArgs<ExtArgs>
  }
  export type ScriptAssetUsageIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    script?: boolean | ScriptDefaultArgs<ExtArgs>
    asset?: boolean | AssetDefaultArgs<ExtArgs>
  }

  export type $ScriptAssetUsagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ScriptAssetUsage"
    objects: {
      script: Prisma.$ScriptPayload<ExtArgs>
      asset: Prisma.$AssetPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      scriptId: string
      assetId: string
      usage: string
    }, ExtArgs["result"]["scriptAssetUsage"]>
    composites: {}
  }

  type ScriptAssetUsageGetPayload<S extends boolean | null | undefined | ScriptAssetUsageDefaultArgs> = $Result.GetResult<Prisma.$ScriptAssetUsagePayload, S>

  type ScriptAssetUsageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ScriptAssetUsageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ScriptAssetUsageCountAggregateInputType | true
    }

  export interface ScriptAssetUsageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ScriptAssetUsage'], meta: { name: 'ScriptAssetUsage' } }
    /**
     * Find zero or one ScriptAssetUsage that matches the filter.
     * @param {ScriptAssetUsageFindUniqueArgs} args - Arguments to find a ScriptAssetUsage
     * @example
     * // Get one ScriptAssetUsage
     * const scriptAssetUsage = await prisma.scriptAssetUsage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ScriptAssetUsageFindUniqueArgs>(args: SelectSubset<T, ScriptAssetUsageFindUniqueArgs<ExtArgs>>): Prisma__ScriptAssetUsageClient<$Result.GetResult<Prisma.$ScriptAssetUsagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ScriptAssetUsage that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ScriptAssetUsageFindUniqueOrThrowArgs} args - Arguments to find a ScriptAssetUsage
     * @example
     * // Get one ScriptAssetUsage
     * const scriptAssetUsage = await prisma.scriptAssetUsage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ScriptAssetUsageFindUniqueOrThrowArgs>(args: SelectSubset<T, ScriptAssetUsageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ScriptAssetUsageClient<$Result.GetResult<Prisma.$ScriptAssetUsagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ScriptAssetUsage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScriptAssetUsageFindFirstArgs} args - Arguments to find a ScriptAssetUsage
     * @example
     * // Get one ScriptAssetUsage
     * const scriptAssetUsage = await prisma.scriptAssetUsage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ScriptAssetUsageFindFirstArgs>(args?: SelectSubset<T, ScriptAssetUsageFindFirstArgs<ExtArgs>>): Prisma__ScriptAssetUsageClient<$Result.GetResult<Prisma.$ScriptAssetUsagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ScriptAssetUsage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScriptAssetUsageFindFirstOrThrowArgs} args - Arguments to find a ScriptAssetUsage
     * @example
     * // Get one ScriptAssetUsage
     * const scriptAssetUsage = await prisma.scriptAssetUsage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ScriptAssetUsageFindFirstOrThrowArgs>(args?: SelectSubset<T, ScriptAssetUsageFindFirstOrThrowArgs<ExtArgs>>): Prisma__ScriptAssetUsageClient<$Result.GetResult<Prisma.$ScriptAssetUsagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ScriptAssetUsages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScriptAssetUsageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ScriptAssetUsages
     * const scriptAssetUsages = await prisma.scriptAssetUsage.findMany()
     * 
     * // Get first 10 ScriptAssetUsages
     * const scriptAssetUsages = await prisma.scriptAssetUsage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const scriptAssetUsageWithIdOnly = await prisma.scriptAssetUsage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ScriptAssetUsageFindManyArgs>(args?: SelectSubset<T, ScriptAssetUsageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScriptAssetUsagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ScriptAssetUsage.
     * @param {ScriptAssetUsageCreateArgs} args - Arguments to create a ScriptAssetUsage.
     * @example
     * // Create one ScriptAssetUsage
     * const ScriptAssetUsage = await prisma.scriptAssetUsage.create({
     *   data: {
     *     // ... data to create a ScriptAssetUsage
     *   }
     * })
     * 
     */
    create<T extends ScriptAssetUsageCreateArgs>(args: SelectSubset<T, ScriptAssetUsageCreateArgs<ExtArgs>>): Prisma__ScriptAssetUsageClient<$Result.GetResult<Prisma.$ScriptAssetUsagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ScriptAssetUsages.
     * @param {ScriptAssetUsageCreateManyArgs} args - Arguments to create many ScriptAssetUsages.
     * @example
     * // Create many ScriptAssetUsages
     * const scriptAssetUsage = await prisma.scriptAssetUsage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ScriptAssetUsageCreateManyArgs>(args?: SelectSubset<T, ScriptAssetUsageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ScriptAssetUsages and returns the data saved in the database.
     * @param {ScriptAssetUsageCreateManyAndReturnArgs} args - Arguments to create many ScriptAssetUsages.
     * @example
     * // Create many ScriptAssetUsages
     * const scriptAssetUsage = await prisma.scriptAssetUsage.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ScriptAssetUsages and only return the `id`
     * const scriptAssetUsageWithIdOnly = await prisma.scriptAssetUsage.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ScriptAssetUsageCreateManyAndReturnArgs>(args?: SelectSubset<T, ScriptAssetUsageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScriptAssetUsagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ScriptAssetUsage.
     * @param {ScriptAssetUsageDeleteArgs} args - Arguments to delete one ScriptAssetUsage.
     * @example
     * // Delete one ScriptAssetUsage
     * const ScriptAssetUsage = await prisma.scriptAssetUsage.delete({
     *   where: {
     *     // ... filter to delete one ScriptAssetUsage
     *   }
     * })
     * 
     */
    delete<T extends ScriptAssetUsageDeleteArgs>(args: SelectSubset<T, ScriptAssetUsageDeleteArgs<ExtArgs>>): Prisma__ScriptAssetUsageClient<$Result.GetResult<Prisma.$ScriptAssetUsagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ScriptAssetUsage.
     * @param {ScriptAssetUsageUpdateArgs} args - Arguments to update one ScriptAssetUsage.
     * @example
     * // Update one ScriptAssetUsage
     * const scriptAssetUsage = await prisma.scriptAssetUsage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ScriptAssetUsageUpdateArgs>(args: SelectSubset<T, ScriptAssetUsageUpdateArgs<ExtArgs>>): Prisma__ScriptAssetUsageClient<$Result.GetResult<Prisma.$ScriptAssetUsagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ScriptAssetUsages.
     * @param {ScriptAssetUsageDeleteManyArgs} args - Arguments to filter ScriptAssetUsages to delete.
     * @example
     * // Delete a few ScriptAssetUsages
     * const { count } = await prisma.scriptAssetUsage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ScriptAssetUsageDeleteManyArgs>(args?: SelectSubset<T, ScriptAssetUsageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ScriptAssetUsages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScriptAssetUsageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ScriptAssetUsages
     * const scriptAssetUsage = await prisma.scriptAssetUsage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ScriptAssetUsageUpdateManyArgs>(args: SelectSubset<T, ScriptAssetUsageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ScriptAssetUsages and returns the data updated in the database.
     * @param {ScriptAssetUsageUpdateManyAndReturnArgs} args - Arguments to update many ScriptAssetUsages.
     * @example
     * // Update many ScriptAssetUsages
     * const scriptAssetUsage = await prisma.scriptAssetUsage.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ScriptAssetUsages and only return the `id`
     * const scriptAssetUsageWithIdOnly = await prisma.scriptAssetUsage.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ScriptAssetUsageUpdateManyAndReturnArgs>(args: SelectSubset<T, ScriptAssetUsageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScriptAssetUsagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ScriptAssetUsage.
     * @param {ScriptAssetUsageUpsertArgs} args - Arguments to update or create a ScriptAssetUsage.
     * @example
     * // Update or create a ScriptAssetUsage
     * const scriptAssetUsage = await prisma.scriptAssetUsage.upsert({
     *   create: {
     *     // ... data to create a ScriptAssetUsage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ScriptAssetUsage we want to update
     *   }
     * })
     */
    upsert<T extends ScriptAssetUsageUpsertArgs>(args: SelectSubset<T, ScriptAssetUsageUpsertArgs<ExtArgs>>): Prisma__ScriptAssetUsageClient<$Result.GetResult<Prisma.$ScriptAssetUsagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ScriptAssetUsages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScriptAssetUsageCountArgs} args - Arguments to filter ScriptAssetUsages to count.
     * @example
     * // Count the number of ScriptAssetUsages
     * const count = await prisma.scriptAssetUsage.count({
     *   where: {
     *     // ... the filter for the ScriptAssetUsages we want to count
     *   }
     * })
    **/
    count<T extends ScriptAssetUsageCountArgs>(
      args?: Subset<T, ScriptAssetUsageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ScriptAssetUsageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ScriptAssetUsage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScriptAssetUsageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ScriptAssetUsageAggregateArgs>(args: Subset<T, ScriptAssetUsageAggregateArgs>): Prisma.PrismaPromise<GetScriptAssetUsageAggregateType<T>>

    /**
     * Group by ScriptAssetUsage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScriptAssetUsageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ScriptAssetUsageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ScriptAssetUsageGroupByArgs['orderBy'] }
        : { orderBy?: ScriptAssetUsageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ScriptAssetUsageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetScriptAssetUsageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ScriptAssetUsage model
   */
  readonly fields: ScriptAssetUsageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ScriptAssetUsage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ScriptAssetUsageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    script<T extends ScriptDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ScriptDefaultArgs<ExtArgs>>): Prisma__ScriptClient<$Result.GetResult<Prisma.$ScriptPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    asset<T extends AssetDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AssetDefaultArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ScriptAssetUsage model
   */
  interface ScriptAssetUsageFieldRefs {
    readonly id: FieldRef<"ScriptAssetUsage", 'String'>
    readonly scriptId: FieldRef<"ScriptAssetUsage", 'String'>
    readonly assetId: FieldRef<"ScriptAssetUsage", 'String'>
    readonly usage: FieldRef<"ScriptAssetUsage", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ScriptAssetUsage findUnique
   */
  export type ScriptAssetUsageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScriptAssetUsage
     */
    select?: ScriptAssetUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScriptAssetUsage
     */
    omit?: ScriptAssetUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScriptAssetUsageInclude<ExtArgs> | null
    /**
     * Filter, which ScriptAssetUsage to fetch.
     */
    where: ScriptAssetUsageWhereUniqueInput
  }

  /**
   * ScriptAssetUsage findUniqueOrThrow
   */
  export type ScriptAssetUsageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScriptAssetUsage
     */
    select?: ScriptAssetUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScriptAssetUsage
     */
    omit?: ScriptAssetUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScriptAssetUsageInclude<ExtArgs> | null
    /**
     * Filter, which ScriptAssetUsage to fetch.
     */
    where: ScriptAssetUsageWhereUniqueInput
  }

  /**
   * ScriptAssetUsage findFirst
   */
  export type ScriptAssetUsageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScriptAssetUsage
     */
    select?: ScriptAssetUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScriptAssetUsage
     */
    omit?: ScriptAssetUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScriptAssetUsageInclude<ExtArgs> | null
    /**
     * Filter, which ScriptAssetUsage to fetch.
     */
    where?: ScriptAssetUsageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScriptAssetUsages to fetch.
     */
    orderBy?: ScriptAssetUsageOrderByWithRelationInput | ScriptAssetUsageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ScriptAssetUsages.
     */
    cursor?: ScriptAssetUsageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScriptAssetUsages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScriptAssetUsages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ScriptAssetUsages.
     */
    distinct?: ScriptAssetUsageScalarFieldEnum | ScriptAssetUsageScalarFieldEnum[]
  }

  /**
   * ScriptAssetUsage findFirstOrThrow
   */
  export type ScriptAssetUsageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScriptAssetUsage
     */
    select?: ScriptAssetUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScriptAssetUsage
     */
    omit?: ScriptAssetUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScriptAssetUsageInclude<ExtArgs> | null
    /**
     * Filter, which ScriptAssetUsage to fetch.
     */
    where?: ScriptAssetUsageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScriptAssetUsages to fetch.
     */
    orderBy?: ScriptAssetUsageOrderByWithRelationInput | ScriptAssetUsageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ScriptAssetUsages.
     */
    cursor?: ScriptAssetUsageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScriptAssetUsages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScriptAssetUsages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ScriptAssetUsages.
     */
    distinct?: ScriptAssetUsageScalarFieldEnum | ScriptAssetUsageScalarFieldEnum[]
  }

  /**
   * ScriptAssetUsage findMany
   */
  export type ScriptAssetUsageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScriptAssetUsage
     */
    select?: ScriptAssetUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScriptAssetUsage
     */
    omit?: ScriptAssetUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScriptAssetUsageInclude<ExtArgs> | null
    /**
     * Filter, which ScriptAssetUsages to fetch.
     */
    where?: ScriptAssetUsageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScriptAssetUsages to fetch.
     */
    orderBy?: ScriptAssetUsageOrderByWithRelationInput | ScriptAssetUsageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ScriptAssetUsages.
     */
    cursor?: ScriptAssetUsageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScriptAssetUsages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScriptAssetUsages.
     */
    skip?: number
    distinct?: ScriptAssetUsageScalarFieldEnum | ScriptAssetUsageScalarFieldEnum[]
  }

  /**
   * ScriptAssetUsage create
   */
  export type ScriptAssetUsageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScriptAssetUsage
     */
    select?: ScriptAssetUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScriptAssetUsage
     */
    omit?: ScriptAssetUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScriptAssetUsageInclude<ExtArgs> | null
    /**
     * The data needed to create a ScriptAssetUsage.
     */
    data: XOR<ScriptAssetUsageCreateInput, ScriptAssetUsageUncheckedCreateInput>
  }

  /**
   * ScriptAssetUsage createMany
   */
  export type ScriptAssetUsageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ScriptAssetUsages.
     */
    data: ScriptAssetUsageCreateManyInput | ScriptAssetUsageCreateManyInput[]
  }

  /**
   * ScriptAssetUsage createManyAndReturn
   */
  export type ScriptAssetUsageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScriptAssetUsage
     */
    select?: ScriptAssetUsageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ScriptAssetUsage
     */
    omit?: ScriptAssetUsageOmit<ExtArgs> | null
    /**
     * The data used to create many ScriptAssetUsages.
     */
    data: ScriptAssetUsageCreateManyInput | ScriptAssetUsageCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScriptAssetUsageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ScriptAssetUsage update
   */
  export type ScriptAssetUsageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScriptAssetUsage
     */
    select?: ScriptAssetUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScriptAssetUsage
     */
    omit?: ScriptAssetUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScriptAssetUsageInclude<ExtArgs> | null
    /**
     * The data needed to update a ScriptAssetUsage.
     */
    data: XOR<ScriptAssetUsageUpdateInput, ScriptAssetUsageUncheckedUpdateInput>
    /**
     * Choose, which ScriptAssetUsage to update.
     */
    where: ScriptAssetUsageWhereUniqueInput
  }

  /**
   * ScriptAssetUsage updateMany
   */
  export type ScriptAssetUsageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ScriptAssetUsages.
     */
    data: XOR<ScriptAssetUsageUpdateManyMutationInput, ScriptAssetUsageUncheckedUpdateManyInput>
    /**
     * Filter which ScriptAssetUsages to update
     */
    where?: ScriptAssetUsageWhereInput
    /**
     * Limit how many ScriptAssetUsages to update.
     */
    limit?: number
  }

  /**
   * ScriptAssetUsage updateManyAndReturn
   */
  export type ScriptAssetUsageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScriptAssetUsage
     */
    select?: ScriptAssetUsageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ScriptAssetUsage
     */
    omit?: ScriptAssetUsageOmit<ExtArgs> | null
    /**
     * The data used to update ScriptAssetUsages.
     */
    data: XOR<ScriptAssetUsageUpdateManyMutationInput, ScriptAssetUsageUncheckedUpdateManyInput>
    /**
     * Filter which ScriptAssetUsages to update
     */
    where?: ScriptAssetUsageWhereInput
    /**
     * Limit how many ScriptAssetUsages to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScriptAssetUsageIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ScriptAssetUsage upsert
   */
  export type ScriptAssetUsageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScriptAssetUsage
     */
    select?: ScriptAssetUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScriptAssetUsage
     */
    omit?: ScriptAssetUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScriptAssetUsageInclude<ExtArgs> | null
    /**
     * The filter to search for the ScriptAssetUsage to update in case it exists.
     */
    where: ScriptAssetUsageWhereUniqueInput
    /**
     * In case the ScriptAssetUsage found by the `where` argument doesn't exist, create a new ScriptAssetUsage with this data.
     */
    create: XOR<ScriptAssetUsageCreateInput, ScriptAssetUsageUncheckedCreateInput>
    /**
     * In case the ScriptAssetUsage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ScriptAssetUsageUpdateInput, ScriptAssetUsageUncheckedUpdateInput>
  }

  /**
   * ScriptAssetUsage delete
   */
  export type ScriptAssetUsageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScriptAssetUsage
     */
    select?: ScriptAssetUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScriptAssetUsage
     */
    omit?: ScriptAssetUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScriptAssetUsageInclude<ExtArgs> | null
    /**
     * Filter which ScriptAssetUsage to delete.
     */
    where: ScriptAssetUsageWhereUniqueInput
  }

  /**
   * ScriptAssetUsage deleteMany
   */
  export type ScriptAssetUsageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ScriptAssetUsages to delete
     */
    where?: ScriptAssetUsageWhereInput
    /**
     * Limit how many ScriptAssetUsages to delete.
     */
    limit?: number
  }

  /**
   * ScriptAssetUsage without action
   */
  export type ScriptAssetUsageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScriptAssetUsage
     */
    select?: ScriptAssetUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScriptAssetUsage
     */
    omit?: ScriptAssetUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScriptAssetUsageInclude<ExtArgs> | null
  }


  /**
   * Model MaterialAssetUsage
   */

  export type AggregateMaterialAssetUsage = {
    _count: MaterialAssetUsageCountAggregateOutputType | null
    _min: MaterialAssetUsageMinAggregateOutputType | null
    _max: MaterialAssetUsageMaxAggregateOutputType | null
  }

  export type MaterialAssetUsageMinAggregateOutputType = {
    id: string | null
    materialId: string | null
    assetId: string | null
    usage: string | null
  }

  export type MaterialAssetUsageMaxAggregateOutputType = {
    id: string | null
    materialId: string | null
    assetId: string | null
    usage: string | null
  }

  export type MaterialAssetUsageCountAggregateOutputType = {
    id: number
    materialId: number
    assetId: number
    usage: number
    _all: number
  }


  export type MaterialAssetUsageMinAggregateInputType = {
    id?: true
    materialId?: true
    assetId?: true
    usage?: true
  }

  export type MaterialAssetUsageMaxAggregateInputType = {
    id?: true
    materialId?: true
    assetId?: true
    usage?: true
  }

  export type MaterialAssetUsageCountAggregateInputType = {
    id?: true
    materialId?: true
    assetId?: true
    usage?: true
    _all?: true
  }

  export type MaterialAssetUsageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MaterialAssetUsage to aggregate.
     */
    where?: MaterialAssetUsageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MaterialAssetUsages to fetch.
     */
    orderBy?: MaterialAssetUsageOrderByWithRelationInput | MaterialAssetUsageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MaterialAssetUsageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MaterialAssetUsages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MaterialAssetUsages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MaterialAssetUsages
    **/
    _count?: true | MaterialAssetUsageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MaterialAssetUsageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MaterialAssetUsageMaxAggregateInputType
  }

  export type GetMaterialAssetUsageAggregateType<T extends MaterialAssetUsageAggregateArgs> = {
        [P in keyof T & keyof AggregateMaterialAssetUsage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMaterialAssetUsage[P]>
      : GetScalarType<T[P], AggregateMaterialAssetUsage[P]>
  }




  export type MaterialAssetUsageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MaterialAssetUsageWhereInput
    orderBy?: MaterialAssetUsageOrderByWithAggregationInput | MaterialAssetUsageOrderByWithAggregationInput[]
    by: MaterialAssetUsageScalarFieldEnum[] | MaterialAssetUsageScalarFieldEnum
    having?: MaterialAssetUsageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MaterialAssetUsageCountAggregateInputType | true
    _min?: MaterialAssetUsageMinAggregateInputType
    _max?: MaterialAssetUsageMaxAggregateInputType
  }

  export type MaterialAssetUsageGroupByOutputType = {
    id: string
    materialId: string
    assetId: string
    usage: string
    _count: MaterialAssetUsageCountAggregateOutputType | null
    _min: MaterialAssetUsageMinAggregateOutputType | null
    _max: MaterialAssetUsageMaxAggregateOutputType | null
  }

  type GetMaterialAssetUsageGroupByPayload<T extends MaterialAssetUsageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MaterialAssetUsageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MaterialAssetUsageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MaterialAssetUsageGroupByOutputType[P]>
            : GetScalarType<T[P], MaterialAssetUsageGroupByOutputType[P]>
        }
      >
    >


  export type MaterialAssetUsageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    materialId?: boolean
    assetId?: boolean
    usage?: boolean
    material?: boolean | MaterialDefaultArgs<ExtArgs>
    asset?: boolean | AssetDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["materialAssetUsage"]>

  export type MaterialAssetUsageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    materialId?: boolean
    assetId?: boolean
    usage?: boolean
    material?: boolean | MaterialDefaultArgs<ExtArgs>
    asset?: boolean | AssetDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["materialAssetUsage"]>

  export type MaterialAssetUsageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    materialId?: boolean
    assetId?: boolean
    usage?: boolean
    material?: boolean | MaterialDefaultArgs<ExtArgs>
    asset?: boolean | AssetDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["materialAssetUsage"]>

  export type MaterialAssetUsageSelectScalar = {
    id?: boolean
    materialId?: boolean
    assetId?: boolean
    usage?: boolean
  }

  export type MaterialAssetUsageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "materialId" | "assetId" | "usage", ExtArgs["result"]["materialAssetUsage"]>
  export type MaterialAssetUsageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    material?: boolean | MaterialDefaultArgs<ExtArgs>
    asset?: boolean | AssetDefaultArgs<ExtArgs>
  }
  export type MaterialAssetUsageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    material?: boolean | MaterialDefaultArgs<ExtArgs>
    asset?: boolean | AssetDefaultArgs<ExtArgs>
  }
  export type MaterialAssetUsageIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    material?: boolean | MaterialDefaultArgs<ExtArgs>
    asset?: boolean | AssetDefaultArgs<ExtArgs>
  }

  export type $MaterialAssetUsagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MaterialAssetUsage"
    objects: {
      material: Prisma.$MaterialPayload<ExtArgs>
      asset: Prisma.$AssetPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      materialId: string
      assetId: string
      usage: string
    }, ExtArgs["result"]["materialAssetUsage"]>
    composites: {}
  }

  type MaterialAssetUsageGetPayload<S extends boolean | null | undefined | MaterialAssetUsageDefaultArgs> = $Result.GetResult<Prisma.$MaterialAssetUsagePayload, S>

  type MaterialAssetUsageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MaterialAssetUsageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MaterialAssetUsageCountAggregateInputType | true
    }

  export interface MaterialAssetUsageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MaterialAssetUsage'], meta: { name: 'MaterialAssetUsage' } }
    /**
     * Find zero or one MaterialAssetUsage that matches the filter.
     * @param {MaterialAssetUsageFindUniqueArgs} args - Arguments to find a MaterialAssetUsage
     * @example
     * // Get one MaterialAssetUsage
     * const materialAssetUsage = await prisma.materialAssetUsage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MaterialAssetUsageFindUniqueArgs>(args: SelectSubset<T, MaterialAssetUsageFindUniqueArgs<ExtArgs>>): Prisma__MaterialAssetUsageClient<$Result.GetResult<Prisma.$MaterialAssetUsagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MaterialAssetUsage that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MaterialAssetUsageFindUniqueOrThrowArgs} args - Arguments to find a MaterialAssetUsage
     * @example
     * // Get one MaterialAssetUsage
     * const materialAssetUsage = await prisma.materialAssetUsage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MaterialAssetUsageFindUniqueOrThrowArgs>(args: SelectSubset<T, MaterialAssetUsageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MaterialAssetUsageClient<$Result.GetResult<Prisma.$MaterialAssetUsagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MaterialAssetUsage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaterialAssetUsageFindFirstArgs} args - Arguments to find a MaterialAssetUsage
     * @example
     * // Get one MaterialAssetUsage
     * const materialAssetUsage = await prisma.materialAssetUsage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MaterialAssetUsageFindFirstArgs>(args?: SelectSubset<T, MaterialAssetUsageFindFirstArgs<ExtArgs>>): Prisma__MaterialAssetUsageClient<$Result.GetResult<Prisma.$MaterialAssetUsagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MaterialAssetUsage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaterialAssetUsageFindFirstOrThrowArgs} args - Arguments to find a MaterialAssetUsage
     * @example
     * // Get one MaterialAssetUsage
     * const materialAssetUsage = await prisma.materialAssetUsage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MaterialAssetUsageFindFirstOrThrowArgs>(args?: SelectSubset<T, MaterialAssetUsageFindFirstOrThrowArgs<ExtArgs>>): Prisma__MaterialAssetUsageClient<$Result.GetResult<Prisma.$MaterialAssetUsagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MaterialAssetUsages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaterialAssetUsageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MaterialAssetUsages
     * const materialAssetUsages = await prisma.materialAssetUsage.findMany()
     * 
     * // Get first 10 MaterialAssetUsages
     * const materialAssetUsages = await prisma.materialAssetUsage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const materialAssetUsageWithIdOnly = await prisma.materialAssetUsage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MaterialAssetUsageFindManyArgs>(args?: SelectSubset<T, MaterialAssetUsageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MaterialAssetUsagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MaterialAssetUsage.
     * @param {MaterialAssetUsageCreateArgs} args - Arguments to create a MaterialAssetUsage.
     * @example
     * // Create one MaterialAssetUsage
     * const MaterialAssetUsage = await prisma.materialAssetUsage.create({
     *   data: {
     *     // ... data to create a MaterialAssetUsage
     *   }
     * })
     * 
     */
    create<T extends MaterialAssetUsageCreateArgs>(args: SelectSubset<T, MaterialAssetUsageCreateArgs<ExtArgs>>): Prisma__MaterialAssetUsageClient<$Result.GetResult<Prisma.$MaterialAssetUsagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MaterialAssetUsages.
     * @param {MaterialAssetUsageCreateManyArgs} args - Arguments to create many MaterialAssetUsages.
     * @example
     * // Create many MaterialAssetUsages
     * const materialAssetUsage = await prisma.materialAssetUsage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MaterialAssetUsageCreateManyArgs>(args?: SelectSubset<T, MaterialAssetUsageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MaterialAssetUsages and returns the data saved in the database.
     * @param {MaterialAssetUsageCreateManyAndReturnArgs} args - Arguments to create many MaterialAssetUsages.
     * @example
     * // Create many MaterialAssetUsages
     * const materialAssetUsage = await prisma.materialAssetUsage.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MaterialAssetUsages and only return the `id`
     * const materialAssetUsageWithIdOnly = await prisma.materialAssetUsage.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MaterialAssetUsageCreateManyAndReturnArgs>(args?: SelectSubset<T, MaterialAssetUsageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MaterialAssetUsagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MaterialAssetUsage.
     * @param {MaterialAssetUsageDeleteArgs} args - Arguments to delete one MaterialAssetUsage.
     * @example
     * // Delete one MaterialAssetUsage
     * const MaterialAssetUsage = await prisma.materialAssetUsage.delete({
     *   where: {
     *     // ... filter to delete one MaterialAssetUsage
     *   }
     * })
     * 
     */
    delete<T extends MaterialAssetUsageDeleteArgs>(args: SelectSubset<T, MaterialAssetUsageDeleteArgs<ExtArgs>>): Prisma__MaterialAssetUsageClient<$Result.GetResult<Prisma.$MaterialAssetUsagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MaterialAssetUsage.
     * @param {MaterialAssetUsageUpdateArgs} args - Arguments to update one MaterialAssetUsage.
     * @example
     * // Update one MaterialAssetUsage
     * const materialAssetUsage = await prisma.materialAssetUsage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MaterialAssetUsageUpdateArgs>(args: SelectSubset<T, MaterialAssetUsageUpdateArgs<ExtArgs>>): Prisma__MaterialAssetUsageClient<$Result.GetResult<Prisma.$MaterialAssetUsagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MaterialAssetUsages.
     * @param {MaterialAssetUsageDeleteManyArgs} args - Arguments to filter MaterialAssetUsages to delete.
     * @example
     * // Delete a few MaterialAssetUsages
     * const { count } = await prisma.materialAssetUsage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MaterialAssetUsageDeleteManyArgs>(args?: SelectSubset<T, MaterialAssetUsageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MaterialAssetUsages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaterialAssetUsageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MaterialAssetUsages
     * const materialAssetUsage = await prisma.materialAssetUsage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MaterialAssetUsageUpdateManyArgs>(args: SelectSubset<T, MaterialAssetUsageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MaterialAssetUsages and returns the data updated in the database.
     * @param {MaterialAssetUsageUpdateManyAndReturnArgs} args - Arguments to update many MaterialAssetUsages.
     * @example
     * // Update many MaterialAssetUsages
     * const materialAssetUsage = await prisma.materialAssetUsage.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MaterialAssetUsages and only return the `id`
     * const materialAssetUsageWithIdOnly = await prisma.materialAssetUsage.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MaterialAssetUsageUpdateManyAndReturnArgs>(args: SelectSubset<T, MaterialAssetUsageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MaterialAssetUsagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MaterialAssetUsage.
     * @param {MaterialAssetUsageUpsertArgs} args - Arguments to update or create a MaterialAssetUsage.
     * @example
     * // Update or create a MaterialAssetUsage
     * const materialAssetUsage = await prisma.materialAssetUsage.upsert({
     *   create: {
     *     // ... data to create a MaterialAssetUsage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MaterialAssetUsage we want to update
     *   }
     * })
     */
    upsert<T extends MaterialAssetUsageUpsertArgs>(args: SelectSubset<T, MaterialAssetUsageUpsertArgs<ExtArgs>>): Prisma__MaterialAssetUsageClient<$Result.GetResult<Prisma.$MaterialAssetUsagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MaterialAssetUsages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaterialAssetUsageCountArgs} args - Arguments to filter MaterialAssetUsages to count.
     * @example
     * // Count the number of MaterialAssetUsages
     * const count = await prisma.materialAssetUsage.count({
     *   where: {
     *     // ... the filter for the MaterialAssetUsages we want to count
     *   }
     * })
    **/
    count<T extends MaterialAssetUsageCountArgs>(
      args?: Subset<T, MaterialAssetUsageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MaterialAssetUsageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MaterialAssetUsage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaterialAssetUsageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MaterialAssetUsageAggregateArgs>(args: Subset<T, MaterialAssetUsageAggregateArgs>): Prisma.PrismaPromise<GetMaterialAssetUsageAggregateType<T>>

    /**
     * Group by MaterialAssetUsage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaterialAssetUsageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MaterialAssetUsageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MaterialAssetUsageGroupByArgs['orderBy'] }
        : { orderBy?: MaterialAssetUsageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MaterialAssetUsageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMaterialAssetUsageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MaterialAssetUsage model
   */
  readonly fields: MaterialAssetUsageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MaterialAssetUsage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MaterialAssetUsageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    material<T extends MaterialDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MaterialDefaultArgs<ExtArgs>>): Prisma__MaterialClient<$Result.GetResult<Prisma.$MaterialPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    asset<T extends AssetDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AssetDefaultArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MaterialAssetUsage model
   */
  interface MaterialAssetUsageFieldRefs {
    readonly id: FieldRef<"MaterialAssetUsage", 'String'>
    readonly materialId: FieldRef<"MaterialAssetUsage", 'String'>
    readonly assetId: FieldRef<"MaterialAssetUsage", 'String'>
    readonly usage: FieldRef<"MaterialAssetUsage", 'String'>
  }
    

  // Custom InputTypes
  /**
   * MaterialAssetUsage findUnique
   */
  export type MaterialAssetUsageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaterialAssetUsage
     */
    select?: MaterialAssetUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaterialAssetUsage
     */
    omit?: MaterialAssetUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialAssetUsageInclude<ExtArgs> | null
    /**
     * Filter, which MaterialAssetUsage to fetch.
     */
    where: MaterialAssetUsageWhereUniqueInput
  }

  /**
   * MaterialAssetUsage findUniqueOrThrow
   */
  export type MaterialAssetUsageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaterialAssetUsage
     */
    select?: MaterialAssetUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaterialAssetUsage
     */
    omit?: MaterialAssetUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialAssetUsageInclude<ExtArgs> | null
    /**
     * Filter, which MaterialAssetUsage to fetch.
     */
    where: MaterialAssetUsageWhereUniqueInput
  }

  /**
   * MaterialAssetUsage findFirst
   */
  export type MaterialAssetUsageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaterialAssetUsage
     */
    select?: MaterialAssetUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaterialAssetUsage
     */
    omit?: MaterialAssetUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialAssetUsageInclude<ExtArgs> | null
    /**
     * Filter, which MaterialAssetUsage to fetch.
     */
    where?: MaterialAssetUsageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MaterialAssetUsages to fetch.
     */
    orderBy?: MaterialAssetUsageOrderByWithRelationInput | MaterialAssetUsageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MaterialAssetUsages.
     */
    cursor?: MaterialAssetUsageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MaterialAssetUsages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MaterialAssetUsages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MaterialAssetUsages.
     */
    distinct?: MaterialAssetUsageScalarFieldEnum | MaterialAssetUsageScalarFieldEnum[]
  }

  /**
   * MaterialAssetUsage findFirstOrThrow
   */
  export type MaterialAssetUsageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaterialAssetUsage
     */
    select?: MaterialAssetUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaterialAssetUsage
     */
    omit?: MaterialAssetUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialAssetUsageInclude<ExtArgs> | null
    /**
     * Filter, which MaterialAssetUsage to fetch.
     */
    where?: MaterialAssetUsageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MaterialAssetUsages to fetch.
     */
    orderBy?: MaterialAssetUsageOrderByWithRelationInput | MaterialAssetUsageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MaterialAssetUsages.
     */
    cursor?: MaterialAssetUsageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MaterialAssetUsages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MaterialAssetUsages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MaterialAssetUsages.
     */
    distinct?: MaterialAssetUsageScalarFieldEnum | MaterialAssetUsageScalarFieldEnum[]
  }

  /**
   * MaterialAssetUsage findMany
   */
  export type MaterialAssetUsageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaterialAssetUsage
     */
    select?: MaterialAssetUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaterialAssetUsage
     */
    omit?: MaterialAssetUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialAssetUsageInclude<ExtArgs> | null
    /**
     * Filter, which MaterialAssetUsages to fetch.
     */
    where?: MaterialAssetUsageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MaterialAssetUsages to fetch.
     */
    orderBy?: MaterialAssetUsageOrderByWithRelationInput | MaterialAssetUsageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MaterialAssetUsages.
     */
    cursor?: MaterialAssetUsageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MaterialAssetUsages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MaterialAssetUsages.
     */
    skip?: number
    distinct?: MaterialAssetUsageScalarFieldEnum | MaterialAssetUsageScalarFieldEnum[]
  }

  /**
   * MaterialAssetUsage create
   */
  export type MaterialAssetUsageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaterialAssetUsage
     */
    select?: MaterialAssetUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaterialAssetUsage
     */
    omit?: MaterialAssetUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialAssetUsageInclude<ExtArgs> | null
    /**
     * The data needed to create a MaterialAssetUsage.
     */
    data: XOR<MaterialAssetUsageCreateInput, MaterialAssetUsageUncheckedCreateInput>
  }

  /**
   * MaterialAssetUsage createMany
   */
  export type MaterialAssetUsageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MaterialAssetUsages.
     */
    data: MaterialAssetUsageCreateManyInput | MaterialAssetUsageCreateManyInput[]
  }

  /**
   * MaterialAssetUsage createManyAndReturn
   */
  export type MaterialAssetUsageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaterialAssetUsage
     */
    select?: MaterialAssetUsageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MaterialAssetUsage
     */
    omit?: MaterialAssetUsageOmit<ExtArgs> | null
    /**
     * The data used to create many MaterialAssetUsages.
     */
    data: MaterialAssetUsageCreateManyInput | MaterialAssetUsageCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialAssetUsageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MaterialAssetUsage update
   */
  export type MaterialAssetUsageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaterialAssetUsage
     */
    select?: MaterialAssetUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaterialAssetUsage
     */
    omit?: MaterialAssetUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialAssetUsageInclude<ExtArgs> | null
    /**
     * The data needed to update a MaterialAssetUsage.
     */
    data: XOR<MaterialAssetUsageUpdateInput, MaterialAssetUsageUncheckedUpdateInput>
    /**
     * Choose, which MaterialAssetUsage to update.
     */
    where: MaterialAssetUsageWhereUniqueInput
  }

  /**
   * MaterialAssetUsage updateMany
   */
  export type MaterialAssetUsageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MaterialAssetUsages.
     */
    data: XOR<MaterialAssetUsageUpdateManyMutationInput, MaterialAssetUsageUncheckedUpdateManyInput>
    /**
     * Filter which MaterialAssetUsages to update
     */
    where?: MaterialAssetUsageWhereInput
    /**
     * Limit how many MaterialAssetUsages to update.
     */
    limit?: number
  }

  /**
   * MaterialAssetUsage updateManyAndReturn
   */
  export type MaterialAssetUsageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaterialAssetUsage
     */
    select?: MaterialAssetUsageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MaterialAssetUsage
     */
    omit?: MaterialAssetUsageOmit<ExtArgs> | null
    /**
     * The data used to update MaterialAssetUsages.
     */
    data: XOR<MaterialAssetUsageUpdateManyMutationInput, MaterialAssetUsageUncheckedUpdateManyInput>
    /**
     * Filter which MaterialAssetUsages to update
     */
    where?: MaterialAssetUsageWhereInput
    /**
     * Limit how many MaterialAssetUsages to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialAssetUsageIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * MaterialAssetUsage upsert
   */
  export type MaterialAssetUsageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaterialAssetUsage
     */
    select?: MaterialAssetUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaterialAssetUsage
     */
    omit?: MaterialAssetUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialAssetUsageInclude<ExtArgs> | null
    /**
     * The filter to search for the MaterialAssetUsage to update in case it exists.
     */
    where: MaterialAssetUsageWhereUniqueInput
    /**
     * In case the MaterialAssetUsage found by the `where` argument doesn't exist, create a new MaterialAssetUsage with this data.
     */
    create: XOR<MaterialAssetUsageCreateInput, MaterialAssetUsageUncheckedCreateInput>
    /**
     * In case the MaterialAssetUsage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MaterialAssetUsageUpdateInput, MaterialAssetUsageUncheckedUpdateInput>
  }

  /**
   * MaterialAssetUsage delete
   */
  export type MaterialAssetUsageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaterialAssetUsage
     */
    select?: MaterialAssetUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaterialAssetUsage
     */
    omit?: MaterialAssetUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialAssetUsageInclude<ExtArgs> | null
    /**
     * Filter which MaterialAssetUsage to delete.
     */
    where: MaterialAssetUsageWhereUniqueInput
  }

  /**
   * MaterialAssetUsage deleteMany
   */
  export type MaterialAssetUsageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MaterialAssetUsages to delete
     */
    where?: MaterialAssetUsageWhereInput
    /**
     * Limit how many MaterialAssetUsages to delete.
     */
    limit?: number
  }

  /**
   * MaterialAssetUsage without action
   */
  export type MaterialAssetUsageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaterialAssetUsage
     */
    select?: MaterialAssetUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaterialAssetUsage
     */
    omit?: MaterialAssetUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialAssetUsageInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    username: 'username',
    firstName: 'firstName',
    lastName: 'lastName',
    password: 'password',
    avatar: 'avatar',
    isActive: 'isActive',
    isVerified: 'isVerified',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    lastLoginAt: 'lastLoginAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const UserSessionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    token: 'token',
    refreshToken: 'refreshToken',
    expiresAt: 'expiresAt',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserSessionScalarFieldEnum = (typeof UserSessionScalarFieldEnum)[keyof typeof UserSessionScalarFieldEnum]


  export const ProjectScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    path: 'path',
    version: 'version',
    engineVersion: 'engineVersion',
    userId: 'userId',
    isPublic: 'isPublic',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    lastOpened: 'lastOpened',
    settings: 'settings'
  };

  export type ProjectScalarFieldEnum = (typeof ProjectScalarFieldEnum)[keyof typeof ProjectScalarFieldEnum]


  export const FolderScalarFieldEnum: {
    id: 'id',
    name: 'name',
    path: 'path',
    parentId: 'parentId',
    projectId: 'projectId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FolderScalarFieldEnum = (typeof FolderScalarFieldEnum)[keyof typeof FolderScalarFieldEnum]


  export const SceneScalarFieldEnum: {
    id: 'id',
    name: 'name',
    path: 'path',
    type: 'type',
    projectId: 'projectId',
    description: 'description',
    isMain: 'isMain',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    sceneData: 'sceneData'
  };

  export type SceneScalarFieldEnum = (typeof SceneScalarFieldEnum)[keyof typeof SceneScalarFieldEnum]


  export const SceneNodeScalarFieldEnum: {
    id: 'id',
    uuid: 'uuid',
    name: 'name',
    type: 'type',
    sceneId: 'sceneId',
    parentId: 'parentId',
    position: 'position',
    rotation: 'rotation',
    scale: 'scale',
    visible: 'visible',
    properties: 'properties',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SceneNodeScalarFieldEnum = (typeof SceneNodeScalarFieldEnum)[keyof typeof SceneNodeScalarFieldEnum]


  export const ScriptScalarFieldEnum: {
    id: 'id',
    name: 'name',
    path: 'path',
    language: 'language',
    content: 'content',
    projectId: 'projectId',
    description: 'description',
    isTemplate: 'isTemplate',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ScriptScalarFieldEnum = (typeof ScriptScalarFieldEnum)[keyof typeof ScriptScalarFieldEnum]


  export const MaterialScalarFieldEnum: {
    id: 'id',
    name: 'name',
    type: 'type',
    projectId: 'projectId',
    albedo: 'albedo',
    roughness: 'roughness',
    metalness: 'metalness',
    emission: 'emission',
    albedoMap: 'albedoMap',
    normalMap: 'normalMap',
    roughnessMap: 'roughnessMap',
    metalnessMap: 'metalnessMap',
    emissionMap: 'emissionMap',
    shaderCode: 'shaderCode',
    shaderParams: 'shaderParams',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MaterialScalarFieldEnum = (typeof MaterialScalarFieldEnum)[keyof typeof MaterialScalarFieldEnum]


  export const TerrainScalarFieldEnum: {
    id: 'id',
    name: 'name',
    projectId: 'projectId',
    width: 'width',
    height: 'height',
    scale: 'scale',
    heightmapPath: 'heightmapPath',
    heightmapData: 'heightmapData',
    textureLayers: 'textureLayers',
    brushSettings: 'brushSettings',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TerrainScalarFieldEnum = (typeof TerrainScalarFieldEnum)[keyof typeof TerrainScalarFieldEnum]


  export const AnimationScalarFieldEnum: {
    id: 'id',
    name: 'name',
    type: 'type',
    projectId: 'projectId',
    duration: 'duration',
    frameRate: 'frameRate',
    states: 'states',
    transitions: 'transitions',
    parameters: 'parameters',
    tracks: 'tracks',
    keyframes: 'keyframes',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AnimationScalarFieldEnum = (typeof AnimationScalarFieldEnum)[keyof typeof AnimationScalarFieldEnum]


  export const ProjectSettingScalarFieldEnum: {
    id: 'id',
    key: 'key',
    value: 'value',
    type: 'type',
    projectId: 'projectId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProjectSettingScalarFieldEnum = (typeof ProjectSettingScalarFieldEnum)[keyof typeof ProjectSettingScalarFieldEnum]


  export const AssetScalarFieldEnum: {
    id: 'id',
    name: 'name',
    type: 'type',
    filePath: 'filePath',
    fileSize: 'fileSize',
    mimeType: 'mimeType',
    checksum: 'checksum',
    width: 'width',
    height: 'height',
    duration: 'duration',
    channels: 'channels',
    sampleRate: 'sampleRate',
    bitRate: 'bitRate',
    projectId: 'projectId',
    folderId: 'folderId',
    tags: 'tags',
    version: 'version',
    parentId: 'parentId',
    dependencies: 'dependencies',
    originalName: 'originalName',
    importedAt: 'importedAt',
    importSettings: 'importSettings',
    thumbnail: 'thumbnail',
    preview: 'preview',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AssetScalarFieldEnum = (typeof AssetScalarFieldEnum)[keyof typeof AssetScalarFieldEnum]


  export const SceneAssetUsageScalarFieldEnum: {
    id: 'id',
    sceneId: 'sceneId',
    assetId: 'assetId',
    usage: 'usage'
  };

  export type SceneAssetUsageScalarFieldEnum = (typeof SceneAssetUsageScalarFieldEnum)[keyof typeof SceneAssetUsageScalarFieldEnum]


  export const ScriptAssetUsageScalarFieldEnum: {
    id: 'id',
    scriptId: 'scriptId',
    assetId: 'assetId',
    usage: 'usage'
  };

  export type ScriptAssetUsageScalarFieldEnum = (typeof ScriptAssetUsageScalarFieldEnum)[keyof typeof ScriptAssetUsageScalarFieldEnum]


  export const MaterialAssetUsageScalarFieldEnum: {
    id: 'id',
    materialId: 'materialId',
    assetId: 'assetId',
    usage: 'usage'
  };

  export type MaterialAssetUsageScalarFieldEnum = (typeof MaterialAssetUsageScalarFieldEnum)[keyof typeof MaterialAssetUsageScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'AssetType'
   */
  export type EnumAssetTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AssetType'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    username?: StringNullableFilter<"User"> | string | null
    firstName?: StringNullableFilter<"User"> | string | null
    lastName?: StringNullableFilter<"User"> | string | null
    password?: StringFilter<"User"> | string
    avatar?: StringNullableFilter<"User"> | string | null
    isActive?: BoolFilter<"User"> | boolean
    isVerified?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    lastLoginAt?: DateTimeNullableFilter<"User"> | Date | string | null
    projects?: ProjectListRelationFilter
    sessions?: UserSessionListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrderInput | SortOrder
    firstName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    password?: SortOrder
    avatar?: SortOrderInput | SortOrder
    isActive?: SortOrder
    isVerified?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLoginAt?: SortOrderInput | SortOrder
    projects?: ProjectOrderByRelationAggregateInput
    sessions?: UserSessionOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    username?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    firstName?: StringNullableFilter<"User"> | string | null
    lastName?: StringNullableFilter<"User"> | string | null
    password?: StringFilter<"User"> | string
    avatar?: StringNullableFilter<"User"> | string | null
    isActive?: BoolFilter<"User"> | boolean
    isVerified?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    lastLoginAt?: DateTimeNullableFilter<"User"> | Date | string | null
    projects?: ProjectListRelationFilter
    sessions?: UserSessionListRelationFilter
  }, "id" | "email" | "username">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrderInput | SortOrder
    firstName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    password?: SortOrder
    avatar?: SortOrderInput | SortOrder
    isActive?: SortOrder
    isVerified?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLoginAt?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    username?: StringNullableWithAggregatesFilter<"User"> | string | null
    firstName?: StringNullableWithAggregatesFilter<"User"> | string | null
    lastName?: StringNullableWithAggregatesFilter<"User"> | string | null
    password?: StringWithAggregatesFilter<"User"> | string
    avatar?: StringNullableWithAggregatesFilter<"User"> | string | null
    isActive?: BoolWithAggregatesFilter<"User"> | boolean
    isVerified?: BoolWithAggregatesFilter<"User"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    lastLoginAt?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
  }

  export type UserSessionWhereInput = {
    AND?: UserSessionWhereInput | UserSessionWhereInput[]
    OR?: UserSessionWhereInput[]
    NOT?: UserSessionWhereInput | UserSessionWhereInput[]
    id?: StringFilter<"UserSession"> | string
    userId?: StringFilter<"UserSession"> | string
    token?: StringFilter<"UserSession"> | string
    refreshToken?: StringNullableFilter<"UserSession"> | string | null
    expiresAt?: DateTimeFilter<"UserSession"> | Date | string
    ipAddress?: StringNullableFilter<"UserSession"> | string | null
    userAgent?: StringNullableFilter<"UserSession"> | string | null
    createdAt?: DateTimeFilter<"UserSession"> | Date | string
    updatedAt?: DateTimeFilter<"UserSession"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type UserSessionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    refreshToken?: SortOrderInput | SortOrder
    expiresAt?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type UserSessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    token?: string
    refreshToken?: string
    AND?: UserSessionWhereInput | UserSessionWhereInput[]
    OR?: UserSessionWhereInput[]
    NOT?: UserSessionWhereInput | UserSessionWhereInput[]
    userId?: StringFilter<"UserSession"> | string
    expiresAt?: DateTimeFilter<"UserSession"> | Date | string
    ipAddress?: StringNullableFilter<"UserSession"> | string | null
    userAgent?: StringNullableFilter<"UserSession"> | string | null
    createdAt?: DateTimeFilter<"UserSession"> | Date | string
    updatedAt?: DateTimeFilter<"UserSession"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "token" | "refreshToken">

  export type UserSessionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    refreshToken?: SortOrderInput | SortOrder
    expiresAt?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserSessionCountOrderByAggregateInput
    _max?: UserSessionMaxOrderByAggregateInput
    _min?: UserSessionMinOrderByAggregateInput
  }

  export type UserSessionScalarWhereWithAggregatesInput = {
    AND?: UserSessionScalarWhereWithAggregatesInput | UserSessionScalarWhereWithAggregatesInput[]
    OR?: UserSessionScalarWhereWithAggregatesInput[]
    NOT?: UserSessionScalarWhereWithAggregatesInput | UserSessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserSession"> | string
    userId?: StringWithAggregatesFilter<"UserSession"> | string
    token?: StringWithAggregatesFilter<"UserSession"> | string
    refreshToken?: StringNullableWithAggregatesFilter<"UserSession"> | string | null
    expiresAt?: DateTimeWithAggregatesFilter<"UserSession"> | Date | string
    ipAddress?: StringNullableWithAggregatesFilter<"UserSession"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"UserSession"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"UserSession"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UserSession"> | Date | string
  }

  export type ProjectWhereInput = {
    AND?: ProjectWhereInput | ProjectWhereInput[]
    OR?: ProjectWhereInput[]
    NOT?: ProjectWhereInput | ProjectWhereInput[]
    id?: StringFilter<"Project"> | string
    name?: StringFilter<"Project"> | string
    description?: StringNullableFilter<"Project"> | string | null
    path?: StringFilter<"Project"> | string
    version?: StringFilter<"Project"> | string
    engineVersion?: StringFilter<"Project"> | string
    userId?: StringFilter<"Project"> | string
    isPublic?: BoolFilter<"Project"> | boolean
    createdAt?: DateTimeFilter<"Project"> | Date | string
    updatedAt?: DateTimeFilter<"Project"> | Date | string
    lastOpened?: DateTimeFilter<"Project"> | Date | string
    settings?: JsonNullableFilter<"Project">
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    scenes?: SceneListRelationFilter
    scripts?: ScriptListRelationFilter
    materials?: MaterialListRelationFilter
    terrains?: TerrainListRelationFilter
    animations?: AnimationListRelationFilter
    folders?: FolderListRelationFilter
    projectSettings?: ProjectSettingListRelationFilter
    assets?: AssetListRelationFilter
  }

  export type ProjectOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    path?: SortOrder
    version?: SortOrder
    engineVersion?: SortOrder
    userId?: SortOrder
    isPublic?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastOpened?: SortOrder
    settings?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    scenes?: SceneOrderByRelationAggregateInput
    scripts?: ScriptOrderByRelationAggregateInput
    materials?: MaterialOrderByRelationAggregateInput
    terrains?: TerrainOrderByRelationAggregateInput
    animations?: AnimationOrderByRelationAggregateInput
    folders?: FolderOrderByRelationAggregateInput
    projectSettings?: ProjectSettingOrderByRelationAggregateInput
    assets?: AssetOrderByRelationAggregateInput
  }

  export type ProjectWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    path?: string
    AND?: ProjectWhereInput | ProjectWhereInput[]
    OR?: ProjectWhereInput[]
    NOT?: ProjectWhereInput | ProjectWhereInput[]
    name?: StringFilter<"Project"> | string
    description?: StringNullableFilter<"Project"> | string | null
    version?: StringFilter<"Project"> | string
    engineVersion?: StringFilter<"Project"> | string
    userId?: StringFilter<"Project"> | string
    isPublic?: BoolFilter<"Project"> | boolean
    createdAt?: DateTimeFilter<"Project"> | Date | string
    updatedAt?: DateTimeFilter<"Project"> | Date | string
    lastOpened?: DateTimeFilter<"Project"> | Date | string
    settings?: JsonNullableFilter<"Project">
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    scenes?: SceneListRelationFilter
    scripts?: ScriptListRelationFilter
    materials?: MaterialListRelationFilter
    terrains?: TerrainListRelationFilter
    animations?: AnimationListRelationFilter
    folders?: FolderListRelationFilter
    projectSettings?: ProjectSettingListRelationFilter
    assets?: AssetListRelationFilter
  }, "id" | "path">

  export type ProjectOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    path?: SortOrder
    version?: SortOrder
    engineVersion?: SortOrder
    userId?: SortOrder
    isPublic?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastOpened?: SortOrder
    settings?: SortOrderInput | SortOrder
    _count?: ProjectCountOrderByAggregateInput
    _max?: ProjectMaxOrderByAggregateInput
    _min?: ProjectMinOrderByAggregateInput
  }

  export type ProjectScalarWhereWithAggregatesInput = {
    AND?: ProjectScalarWhereWithAggregatesInput | ProjectScalarWhereWithAggregatesInput[]
    OR?: ProjectScalarWhereWithAggregatesInput[]
    NOT?: ProjectScalarWhereWithAggregatesInput | ProjectScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Project"> | string
    name?: StringWithAggregatesFilter<"Project"> | string
    description?: StringNullableWithAggregatesFilter<"Project"> | string | null
    path?: StringWithAggregatesFilter<"Project"> | string
    version?: StringWithAggregatesFilter<"Project"> | string
    engineVersion?: StringWithAggregatesFilter<"Project"> | string
    userId?: StringWithAggregatesFilter<"Project"> | string
    isPublic?: BoolWithAggregatesFilter<"Project"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Project"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Project"> | Date | string
    lastOpened?: DateTimeWithAggregatesFilter<"Project"> | Date | string
    settings?: JsonNullableWithAggregatesFilter<"Project">
  }

  export type FolderWhereInput = {
    AND?: FolderWhereInput | FolderWhereInput[]
    OR?: FolderWhereInput[]
    NOT?: FolderWhereInput | FolderWhereInput[]
    id?: StringFilter<"Folder"> | string
    name?: StringFilter<"Folder"> | string
    path?: StringFilter<"Folder"> | string
    parentId?: StringNullableFilter<"Folder"> | string | null
    projectId?: StringFilter<"Folder"> | string
    createdAt?: DateTimeFilter<"Folder"> | Date | string
    updatedAt?: DateTimeFilter<"Folder"> | Date | string
    project?: XOR<ProjectScalarRelationFilter, ProjectWhereInput>
    parent?: XOR<FolderNullableScalarRelationFilter, FolderWhereInput> | null
    children?: FolderListRelationFilter
    assets?: AssetListRelationFilter
  }

  export type FolderOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    path?: SortOrder
    parentId?: SortOrderInput | SortOrder
    projectId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    project?: ProjectOrderByWithRelationInput
    parent?: FolderOrderByWithRelationInput
    children?: FolderOrderByRelationAggregateInput
    assets?: AssetOrderByRelationAggregateInput
  }

  export type FolderWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    projectId_path?: FolderProjectIdPathCompoundUniqueInput
    AND?: FolderWhereInput | FolderWhereInput[]
    OR?: FolderWhereInput[]
    NOT?: FolderWhereInput | FolderWhereInput[]
    name?: StringFilter<"Folder"> | string
    path?: StringFilter<"Folder"> | string
    parentId?: StringNullableFilter<"Folder"> | string | null
    projectId?: StringFilter<"Folder"> | string
    createdAt?: DateTimeFilter<"Folder"> | Date | string
    updatedAt?: DateTimeFilter<"Folder"> | Date | string
    project?: XOR<ProjectScalarRelationFilter, ProjectWhereInput>
    parent?: XOR<FolderNullableScalarRelationFilter, FolderWhereInput> | null
    children?: FolderListRelationFilter
    assets?: AssetListRelationFilter
  }, "id" | "projectId_path">

  export type FolderOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    path?: SortOrder
    parentId?: SortOrderInput | SortOrder
    projectId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FolderCountOrderByAggregateInput
    _max?: FolderMaxOrderByAggregateInput
    _min?: FolderMinOrderByAggregateInput
  }

  export type FolderScalarWhereWithAggregatesInput = {
    AND?: FolderScalarWhereWithAggregatesInput | FolderScalarWhereWithAggregatesInput[]
    OR?: FolderScalarWhereWithAggregatesInput[]
    NOT?: FolderScalarWhereWithAggregatesInput | FolderScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Folder"> | string
    name?: StringWithAggregatesFilter<"Folder"> | string
    path?: StringWithAggregatesFilter<"Folder"> | string
    parentId?: StringNullableWithAggregatesFilter<"Folder"> | string | null
    projectId?: StringWithAggregatesFilter<"Folder"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Folder"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Folder"> | Date | string
  }

  export type SceneWhereInput = {
    AND?: SceneWhereInput | SceneWhereInput[]
    OR?: SceneWhereInput[]
    NOT?: SceneWhereInput | SceneWhereInput[]
    id?: StringFilter<"Scene"> | string
    name?: StringFilter<"Scene"> | string
    path?: StringFilter<"Scene"> | string
    type?: StringFilter<"Scene"> | string
    projectId?: StringFilter<"Scene"> | string
    description?: StringNullableFilter<"Scene"> | string | null
    isMain?: BoolFilter<"Scene"> | boolean
    createdAt?: DateTimeFilter<"Scene"> | Date | string
    updatedAt?: DateTimeFilter<"Scene"> | Date | string
    sceneData?: JsonNullableFilter<"Scene">
    project?: XOR<ProjectScalarRelationFilter, ProjectWhereInput>
    nodes?: SceneNodeListRelationFilter
    assetUsages?: SceneAssetUsageListRelationFilter
  }

  export type SceneOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    path?: SortOrder
    type?: SortOrder
    projectId?: SortOrder
    description?: SortOrderInput | SortOrder
    isMain?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sceneData?: SortOrderInput | SortOrder
    project?: ProjectOrderByWithRelationInput
    nodes?: SceneNodeOrderByRelationAggregateInput
    assetUsages?: SceneAssetUsageOrderByRelationAggregateInput
  }

  export type SceneWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    projectId_path?: SceneProjectIdPathCompoundUniqueInput
    AND?: SceneWhereInput | SceneWhereInput[]
    OR?: SceneWhereInput[]
    NOT?: SceneWhereInput | SceneWhereInput[]
    name?: StringFilter<"Scene"> | string
    path?: StringFilter<"Scene"> | string
    type?: StringFilter<"Scene"> | string
    projectId?: StringFilter<"Scene"> | string
    description?: StringNullableFilter<"Scene"> | string | null
    isMain?: BoolFilter<"Scene"> | boolean
    createdAt?: DateTimeFilter<"Scene"> | Date | string
    updatedAt?: DateTimeFilter<"Scene"> | Date | string
    sceneData?: JsonNullableFilter<"Scene">
    project?: XOR<ProjectScalarRelationFilter, ProjectWhereInput>
    nodes?: SceneNodeListRelationFilter
    assetUsages?: SceneAssetUsageListRelationFilter
  }, "id" | "projectId_path">

  export type SceneOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    path?: SortOrder
    type?: SortOrder
    projectId?: SortOrder
    description?: SortOrderInput | SortOrder
    isMain?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sceneData?: SortOrderInput | SortOrder
    _count?: SceneCountOrderByAggregateInput
    _max?: SceneMaxOrderByAggregateInput
    _min?: SceneMinOrderByAggregateInput
  }

  export type SceneScalarWhereWithAggregatesInput = {
    AND?: SceneScalarWhereWithAggregatesInput | SceneScalarWhereWithAggregatesInput[]
    OR?: SceneScalarWhereWithAggregatesInput[]
    NOT?: SceneScalarWhereWithAggregatesInput | SceneScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Scene"> | string
    name?: StringWithAggregatesFilter<"Scene"> | string
    path?: StringWithAggregatesFilter<"Scene"> | string
    type?: StringWithAggregatesFilter<"Scene"> | string
    projectId?: StringWithAggregatesFilter<"Scene"> | string
    description?: StringNullableWithAggregatesFilter<"Scene"> | string | null
    isMain?: BoolWithAggregatesFilter<"Scene"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Scene"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Scene"> | Date | string
    sceneData?: JsonNullableWithAggregatesFilter<"Scene">
  }

  export type SceneNodeWhereInput = {
    AND?: SceneNodeWhereInput | SceneNodeWhereInput[]
    OR?: SceneNodeWhereInput[]
    NOT?: SceneNodeWhereInput | SceneNodeWhereInput[]
    id?: StringFilter<"SceneNode"> | string
    uuid?: StringFilter<"SceneNode"> | string
    name?: StringFilter<"SceneNode"> | string
    type?: StringFilter<"SceneNode"> | string
    sceneId?: StringFilter<"SceneNode"> | string
    parentId?: StringNullableFilter<"SceneNode"> | string | null
    position?: JsonFilter<"SceneNode">
    rotation?: JsonFilter<"SceneNode">
    scale?: JsonFilter<"SceneNode">
    visible?: BoolFilter<"SceneNode"> | boolean
    properties?: JsonNullableFilter<"SceneNode">
    createdAt?: DateTimeFilter<"SceneNode"> | Date | string
    updatedAt?: DateTimeFilter<"SceneNode"> | Date | string
    scene?: XOR<SceneScalarRelationFilter, SceneWhereInput>
    parent?: XOR<SceneNodeNullableScalarRelationFilter, SceneNodeWhereInput> | null
    children?: SceneNodeListRelationFilter
  }

  export type SceneNodeOrderByWithRelationInput = {
    id?: SortOrder
    uuid?: SortOrder
    name?: SortOrder
    type?: SortOrder
    sceneId?: SortOrder
    parentId?: SortOrderInput | SortOrder
    position?: SortOrder
    rotation?: SortOrder
    scale?: SortOrder
    visible?: SortOrder
    properties?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    scene?: SceneOrderByWithRelationInput
    parent?: SceneNodeOrderByWithRelationInput
    children?: SceneNodeOrderByRelationAggregateInput
  }

  export type SceneNodeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    uuid?: string
    AND?: SceneNodeWhereInput | SceneNodeWhereInput[]
    OR?: SceneNodeWhereInput[]
    NOT?: SceneNodeWhereInput | SceneNodeWhereInput[]
    name?: StringFilter<"SceneNode"> | string
    type?: StringFilter<"SceneNode"> | string
    sceneId?: StringFilter<"SceneNode"> | string
    parentId?: StringNullableFilter<"SceneNode"> | string | null
    position?: JsonFilter<"SceneNode">
    rotation?: JsonFilter<"SceneNode">
    scale?: JsonFilter<"SceneNode">
    visible?: BoolFilter<"SceneNode"> | boolean
    properties?: JsonNullableFilter<"SceneNode">
    createdAt?: DateTimeFilter<"SceneNode"> | Date | string
    updatedAt?: DateTimeFilter<"SceneNode"> | Date | string
    scene?: XOR<SceneScalarRelationFilter, SceneWhereInput>
    parent?: XOR<SceneNodeNullableScalarRelationFilter, SceneNodeWhereInput> | null
    children?: SceneNodeListRelationFilter
  }, "id" | "uuid">

  export type SceneNodeOrderByWithAggregationInput = {
    id?: SortOrder
    uuid?: SortOrder
    name?: SortOrder
    type?: SortOrder
    sceneId?: SortOrder
    parentId?: SortOrderInput | SortOrder
    position?: SortOrder
    rotation?: SortOrder
    scale?: SortOrder
    visible?: SortOrder
    properties?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SceneNodeCountOrderByAggregateInput
    _max?: SceneNodeMaxOrderByAggregateInput
    _min?: SceneNodeMinOrderByAggregateInput
  }

  export type SceneNodeScalarWhereWithAggregatesInput = {
    AND?: SceneNodeScalarWhereWithAggregatesInput | SceneNodeScalarWhereWithAggregatesInput[]
    OR?: SceneNodeScalarWhereWithAggregatesInput[]
    NOT?: SceneNodeScalarWhereWithAggregatesInput | SceneNodeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SceneNode"> | string
    uuid?: StringWithAggregatesFilter<"SceneNode"> | string
    name?: StringWithAggregatesFilter<"SceneNode"> | string
    type?: StringWithAggregatesFilter<"SceneNode"> | string
    sceneId?: StringWithAggregatesFilter<"SceneNode"> | string
    parentId?: StringNullableWithAggregatesFilter<"SceneNode"> | string | null
    position?: JsonWithAggregatesFilter<"SceneNode">
    rotation?: JsonWithAggregatesFilter<"SceneNode">
    scale?: JsonWithAggregatesFilter<"SceneNode">
    visible?: BoolWithAggregatesFilter<"SceneNode"> | boolean
    properties?: JsonNullableWithAggregatesFilter<"SceneNode">
    createdAt?: DateTimeWithAggregatesFilter<"SceneNode"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"SceneNode"> | Date | string
  }

  export type ScriptWhereInput = {
    AND?: ScriptWhereInput | ScriptWhereInput[]
    OR?: ScriptWhereInput[]
    NOT?: ScriptWhereInput | ScriptWhereInput[]
    id?: StringFilter<"Script"> | string
    name?: StringFilter<"Script"> | string
    path?: StringFilter<"Script"> | string
    language?: StringFilter<"Script"> | string
    content?: StringFilter<"Script"> | string
    projectId?: StringFilter<"Script"> | string
    description?: StringNullableFilter<"Script"> | string | null
    isTemplate?: BoolFilter<"Script"> | boolean
    createdAt?: DateTimeFilter<"Script"> | Date | string
    updatedAt?: DateTimeFilter<"Script"> | Date | string
    project?: XOR<ProjectScalarRelationFilter, ProjectWhereInput>
    assetUsages?: ScriptAssetUsageListRelationFilter
  }

  export type ScriptOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    path?: SortOrder
    language?: SortOrder
    content?: SortOrder
    projectId?: SortOrder
    description?: SortOrderInput | SortOrder
    isTemplate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    project?: ProjectOrderByWithRelationInput
    assetUsages?: ScriptAssetUsageOrderByRelationAggregateInput
  }

  export type ScriptWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    projectId_path?: ScriptProjectIdPathCompoundUniqueInput
    AND?: ScriptWhereInput | ScriptWhereInput[]
    OR?: ScriptWhereInput[]
    NOT?: ScriptWhereInput | ScriptWhereInput[]
    name?: StringFilter<"Script"> | string
    path?: StringFilter<"Script"> | string
    language?: StringFilter<"Script"> | string
    content?: StringFilter<"Script"> | string
    projectId?: StringFilter<"Script"> | string
    description?: StringNullableFilter<"Script"> | string | null
    isTemplate?: BoolFilter<"Script"> | boolean
    createdAt?: DateTimeFilter<"Script"> | Date | string
    updatedAt?: DateTimeFilter<"Script"> | Date | string
    project?: XOR<ProjectScalarRelationFilter, ProjectWhereInput>
    assetUsages?: ScriptAssetUsageListRelationFilter
  }, "id" | "projectId_path">

  export type ScriptOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    path?: SortOrder
    language?: SortOrder
    content?: SortOrder
    projectId?: SortOrder
    description?: SortOrderInput | SortOrder
    isTemplate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ScriptCountOrderByAggregateInput
    _max?: ScriptMaxOrderByAggregateInput
    _min?: ScriptMinOrderByAggregateInput
  }

  export type ScriptScalarWhereWithAggregatesInput = {
    AND?: ScriptScalarWhereWithAggregatesInput | ScriptScalarWhereWithAggregatesInput[]
    OR?: ScriptScalarWhereWithAggregatesInput[]
    NOT?: ScriptScalarWhereWithAggregatesInput | ScriptScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Script"> | string
    name?: StringWithAggregatesFilter<"Script"> | string
    path?: StringWithAggregatesFilter<"Script"> | string
    language?: StringWithAggregatesFilter<"Script"> | string
    content?: StringWithAggregatesFilter<"Script"> | string
    projectId?: StringWithAggregatesFilter<"Script"> | string
    description?: StringNullableWithAggregatesFilter<"Script"> | string | null
    isTemplate?: BoolWithAggregatesFilter<"Script"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Script"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Script"> | Date | string
  }

  export type MaterialWhereInput = {
    AND?: MaterialWhereInput | MaterialWhereInput[]
    OR?: MaterialWhereInput[]
    NOT?: MaterialWhereInput | MaterialWhereInput[]
    id?: StringFilter<"Material"> | string
    name?: StringFilter<"Material"> | string
    type?: StringFilter<"Material"> | string
    projectId?: StringFilter<"Material"> | string
    albedo?: StringNullableFilter<"Material"> | string | null
    roughness?: FloatNullableFilter<"Material"> | number | null
    metalness?: FloatNullableFilter<"Material"> | number | null
    emission?: StringNullableFilter<"Material"> | string | null
    albedoMap?: StringNullableFilter<"Material"> | string | null
    normalMap?: StringNullableFilter<"Material"> | string | null
    roughnessMap?: StringNullableFilter<"Material"> | string | null
    metalnessMap?: StringNullableFilter<"Material"> | string | null
    emissionMap?: StringNullableFilter<"Material"> | string | null
    shaderCode?: StringNullableFilter<"Material"> | string | null
    shaderParams?: JsonNullableFilter<"Material">
    createdAt?: DateTimeFilter<"Material"> | Date | string
    updatedAt?: DateTimeFilter<"Material"> | Date | string
    project?: XOR<ProjectScalarRelationFilter, ProjectWhereInput>
    assetUsages?: MaterialAssetUsageListRelationFilter
  }

  export type MaterialOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    projectId?: SortOrder
    albedo?: SortOrderInput | SortOrder
    roughness?: SortOrderInput | SortOrder
    metalness?: SortOrderInput | SortOrder
    emission?: SortOrderInput | SortOrder
    albedoMap?: SortOrderInput | SortOrder
    normalMap?: SortOrderInput | SortOrder
    roughnessMap?: SortOrderInput | SortOrder
    metalnessMap?: SortOrderInput | SortOrder
    emissionMap?: SortOrderInput | SortOrder
    shaderCode?: SortOrderInput | SortOrder
    shaderParams?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    project?: ProjectOrderByWithRelationInput
    assetUsages?: MaterialAssetUsageOrderByRelationAggregateInput
  }

  export type MaterialWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    projectId_name?: MaterialProjectIdNameCompoundUniqueInput
    AND?: MaterialWhereInput | MaterialWhereInput[]
    OR?: MaterialWhereInput[]
    NOT?: MaterialWhereInput | MaterialWhereInput[]
    name?: StringFilter<"Material"> | string
    type?: StringFilter<"Material"> | string
    projectId?: StringFilter<"Material"> | string
    albedo?: StringNullableFilter<"Material"> | string | null
    roughness?: FloatNullableFilter<"Material"> | number | null
    metalness?: FloatNullableFilter<"Material"> | number | null
    emission?: StringNullableFilter<"Material"> | string | null
    albedoMap?: StringNullableFilter<"Material"> | string | null
    normalMap?: StringNullableFilter<"Material"> | string | null
    roughnessMap?: StringNullableFilter<"Material"> | string | null
    metalnessMap?: StringNullableFilter<"Material"> | string | null
    emissionMap?: StringNullableFilter<"Material"> | string | null
    shaderCode?: StringNullableFilter<"Material"> | string | null
    shaderParams?: JsonNullableFilter<"Material">
    createdAt?: DateTimeFilter<"Material"> | Date | string
    updatedAt?: DateTimeFilter<"Material"> | Date | string
    project?: XOR<ProjectScalarRelationFilter, ProjectWhereInput>
    assetUsages?: MaterialAssetUsageListRelationFilter
  }, "id" | "projectId_name">

  export type MaterialOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    projectId?: SortOrder
    albedo?: SortOrderInput | SortOrder
    roughness?: SortOrderInput | SortOrder
    metalness?: SortOrderInput | SortOrder
    emission?: SortOrderInput | SortOrder
    albedoMap?: SortOrderInput | SortOrder
    normalMap?: SortOrderInput | SortOrder
    roughnessMap?: SortOrderInput | SortOrder
    metalnessMap?: SortOrderInput | SortOrder
    emissionMap?: SortOrderInput | SortOrder
    shaderCode?: SortOrderInput | SortOrder
    shaderParams?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MaterialCountOrderByAggregateInput
    _avg?: MaterialAvgOrderByAggregateInput
    _max?: MaterialMaxOrderByAggregateInput
    _min?: MaterialMinOrderByAggregateInput
    _sum?: MaterialSumOrderByAggregateInput
  }

  export type MaterialScalarWhereWithAggregatesInput = {
    AND?: MaterialScalarWhereWithAggregatesInput | MaterialScalarWhereWithAggregatesInput[]
    OR?: MaterialScalarWhereWithAggregatesInput[]
    NOT?: MaterialScalarWhereWithAggregatesInput | MaterialScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Material"> | string
    name?: StringWithAggregatesFilter<"Material"> | string
    type?: StringWithAggregatesFilter<"Material"> | string
    projectId?: StringWithAggregatesFilter<"Material"> | string
    albedo?: StringNullableWithAggregatesFilter<"Material"> | string | null
    roughness?: FloatNullableWithAggregatesFilter<"Material"> | number | null
    metalness?: FloatNullableWithAggregatesFilter<"Material"> | number | null
    emission?: StringNullableWithAggregatesFilter<"Material"> | string | null
    albedoMap?: StringNullableWithAggregatesFilter<"Material"> | string | null
    normalMap?: StringNullableWithAggregatesFilter<"Material"> | string | null
    roughnessMap?: StringNullableWithAggregatesFilter<"Material"> | string | null
    metalnessMap?: StringNullableWithAggregatesFilter<"Material"> | string | null
    emissionMap?: StringNullableWithAggregatesFilter<"Material"> | string | null
    shaderCode?: StringNullableWithAggregatesFilter<"Material"> | string | null
    shaderParams?: JsonNullableWithAggregatesFilter<"Material">
    createdAt?: DateTimeWithAggregatesFilter<"Material"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Material"> | Date | string
  }

  export type TerrainWhereInput = {
    AND?: TerrainWhereInput | TerrainWhereInput[]
    OR?: TerrainWhereInput[]
    NOT?: TerrainWhereInput | TerrainWhereInput[]
    id?: StringFilter<"Terrain"> | string
    name?: StringFilter<"Terrain"> | string
    projectId?: StringFilter<"Terrain"> | string
    width?: IntFilter<"Terrain"> | number
    height?: IntFilter<"Terrain"> | number
    scale?: FloatFilter<"Terrain"> | number
    heightmapPath?: StringNullableFilter<"Terrain"> | string | null
    heightmapData?: JsonNullableFilter<"Terrain">
    textureLayers?: JsonNullableFilter<"Terrain">
    brushSettings?: JsonNullableFilter<"Terrain">
    createdAt?: DateTimeFilter<"Terrain"> | Date | string
    updatedAt?: DateTimeFilter<"Terrain"> | Date | string
    project?: XOR<ProjectScalarRelationFilter, ProjectWhereInput>
  }

  export type TerrainOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    projectId?: SortOrder
    width?: SortOrder
    height?: SortOrder
    scale?: SortOrder
    heightmapPath?: SortOrderInput | SortOrder
    heightmapData?: SortOrderInput | SortOrder
    textureLayers?: SortOrderInput | SortOrder
    brushSettings?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    project?: ProjectOrderByWithRelationInput
  }

  export type TerrainWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    projectId_name?: TerrainProjectIdNameCompoundUniqueInput
    AND?: TerrainWhereInput | TerrainWhereInput[]
    OR?: TerrainWhereInput[]
    NOT?: TerrainWhereInput | TerrainWhereInput[]
    name?: StringFilter<"Terrain"> | string
    projectId?: StringFilter<"Terrain"> | string
    width?: IntFilter<"Terrain"> | number
    height?: IntFilter<"Terrain"> | number
    scale?: FloatFilter<"Terrain"> | number
    heightmapPath?: StringNullableFilter<"Terrain"> | string | null
    heightmapData?: JsonNullableFilter<"Terrain">
    textureLayers?: JsonNullableFilter<"Terrain">
    brushSettings?: JsonNullableFilter<"Terrain">
    createdAt?: DateTimeFilter<"Terrain"> | Date | string
    updatedAt?: DateTimeFilter<"Terrain"> | Date | string
    project?: XOR<ProjectScalarRelationFilter, ProjectWhereInput>
  }, "id" | "projectId_name">

  export type TerrainOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    projectId?: SortOrder
    width?: SortOrder
    height?: SortOrder
    scale?: SortOrder
    heightmapPath?: SortOrderInput | SortOrder
    heightmapData?: SortOrderInput | SortOrder
    textureLayers?: SortOrderInput | SortOrder
    brushSettings?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TerrainCountOrderByAggregateInput
    _avg?: TerrainAvgOrderByAggregateInput
    _max?: TerrainMaxOrderByAggregateInput
    _min?: TerrainMinOrderByAggregateInput
    _sum?: TerrainSumOrderByAggregateInput
  }

  export type TerrainScalarWhereWithAggregatesInput = {
    AND?: TerrainScalarWhereWithAggregatesInput | TerrainScalarWhereWithAggregatesInput[]
    OR?: TerrainScalarWhereWithAggregatesInput[]
    NOT?: TerrainScalarWhereWithAggregatesInput | TerrainScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Terrain"> | string
    name?: StringWithAggregatesFilter<"Terrain"> | string
    projectId?: StringWithAggregatesFilter<"Terrain"> | string
    width?: IntWithAggregatesFilter<"Terrain"> | number
    height?: IntWithAggregatesFilter<"Terrain"> | number
    scale?: FloatWithAggregatesFilter<"Terrain"> | number
    heightmapPath?: StringNullableWithAggregatesFilter<"Terrain"> | string | null
    heightmapData?: JsonNullableWithAggregatesFilter<"Terrain">
    textureLayers?: JsonNullableWithAggregatesFilter<"Terrain">
    brushSettings?: JsonNullableWithAggregatesFilter<"Terrain">
    createdAt?: DateTimeWithAggregatesFilter<"Terrain"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Terrain"> | Date | string
  }

  export type AnimationWhereInput = {
    AND?: AnimationWhereInput | AnimationWhereInput[]
    OR?: AnimationWhereInput[]
    NOT?: AnimationWhereInput | AnimationWhereInput[]
    id?: StringFilter<"Animation"> | string
    name?: StringFilter<"Animation"> | string
    type?: StringFilter<"Animation"> | string
    projectId?: StringFilter<"Animation"> | string
    duration?: FloatNullableFilter<"Animation"> | number | null
    frameRate?: IntNullableFilter<"Animation"> | number | null
    states?: JsonNullableFilter<"Animation">
    transitions?: JsonNullableFilter<"Animation">
    parameters?: JsonNullableFilter<"Animation">
    tracks?: JsonNullableFilter<"Animation">
    keyframes?: JsonNullableFilter<"Animation">
    createdAt?: DateTimeFilter<"Animation"> | Date | string
    updatedAt?: DateTimeFilter<"Animation"> | Date | string
    project?: XOR<ProjectScalarRelationFilter, ProjectWhereInput>
  }

  export type AnimationOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    projectId?: SortOrder
    duration?: SortOrderInput | SortOrder
    frameRate?: SortOrderInput | SortOrder
    states?: SortOrderInput | SortOrder
    transitions?: SortOrderInput | SortOrder
    parameters?: SortOrderInput | SortOrder
    tracks?: SortOrderInput | SortOrder
    keyframes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    project?: ProjectOrderByWithRelationInput
  }

  export type AnimationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    projectId_name?: AnimationProjectIdNameCompoundUniqueInput
    AND?: AnimationWhereInput | AnimationWhereInput[]
    OR?: AnimationWhereInput[]
    NOT?: AnimationWhereInput | AnimationWhereInput[]
    name?: StringFilter<"Animation"> | string
    type?: StringFilter<"Animation"> | string
    projectId?: StringFilter<"Animation"> | string
    duration?: FloatNullableFilter<"Animation"> | number | null
    frameRate?: IntNullableFilter<"Animation"> | number | null
    states?: JsonNullableFilter<"Animation">
    transitions?: JsonNullableFilter<"Animation">
    parameters?: JsonNullableFilter<"Animation">
    tracks?: JsonNullableFilter<"Animation">
    keyframes?: JsonNullableFilter<"Animation">
    createdAt?: DateTimeFilter<"Animation"> | Date | string
    updatedAt?: DateTimeFilter<"Animation"> | Date | string
    project?: XOR<ProjectScalarRelationFilter, ProjectWhereInput>
  }, "id" | "projectId_name">

  export type AnimationOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    projectId?: SortOrder
    duration?: SortOrderInput | SortOrder
    frameRate?: SortOrderInput | SortOrder
    states?: SortOrderInput | SortOrder
    transitions?: SortOrderInput | SortOrder
    parameters?: SortOrderInput | SortOrder
    tracks?: SortOrderInput | SortOrder
    keyframes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AnimationCountOrderByAggregateInput
    _avg?: AnimationAvgOrderByAggregateInput
    _max?: AnimationMaxOrderByAggregateInput
    _min?: AnimationMinOrderByAggregateInput
    _sum?: AnimationSumOrderByAggregateInput
  }

  export type AnimationScalarWhereWithAggregatesInput = {
    AND?: AnimationScalarWhereWithAggregatesInput | AnimationScalarWhereWithAggregatesInput[]
    OR?: AnimationScalarWhereWithAggregatesInput[]
    NOT?: AnimationScalarWhereWithAggregatesInput | AnimationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Animation"> | string
    name?: StringWithAggregatesFilter<"Animation"> | string
    type?: StringWithAggregatesFilter<"Animation"> | string
    projectId?: StringWithAggregatesFilter<"Animation"> | string
    duration?: FloatNullableWithAggregatesFilter<"Animation"> | number | null
    frameRate?: IntNullableWithAggregatesFilter<"Animation"> | number | null
    states?: JsonNullableWithAggregatesFilter<"Animation">
    transitions?: JsonNullableWithAggregatesFilter<"Animation">
    parameters?: JsonNullableWithAggregatesFilter<"Animation">
    tracks?: JsonNullableWithAggregatesFilter<"Animation">
    keyframes?: JsonNullableWithAggregatesFilter<"Animation">
    createdAt?: DateTimeWithAggregatesFilter<"Animation"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Animation"> | Date | string
  }

  export type ProjectSettingWhereInput = {
    AND?: ProjectSettingWhereInput | ProjectSettingWhereInput[]
    OR?: ProjectSettingWhereInput[]
    NOT?: ProjectSettingWhereInput | ProjectSettingWhereInput[]
    id?: StringFilter<"ProjectSetting"> | string
    key?: StringFilter<"ProjectSetting"> | string
    value?: StringFilter<"ProjectSetting"> | string
    type?: StringFilter<"ProjectSetting"> | string
    projectId?: StringFilter<"ProjectSetting"> | string
    createdAt?: DateTimeFilter<"ProjectSetting"> | Date | string
    updatedAt?: DateTimeFilter<"ProjectSetting"> | Date | string
    project?: XOR<ProjectScalarRelationFilter, ProjectWhereInput>
  }

  export type ProjectSettingOrderByWithRelationInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    type?: SortOrder
    projectId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    project?: ProjectOrderByWithRelationInput
  }

  export type ProjectSettingWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    projectId_key?: ProjectSettingProjectIdKeyCompoundUniqueInput
    AND?: ProjectSettingWhereInput | ProjectSettingWhereInput[]
    OR?: ProjectSettingWhereInput[]
    NOT?: ProjectSettingWhereInput | ProjectSettingWhereInput[]
    key?: StringFilter<"ProjectSetting"> | string
    value?: StringFilter<"ProjectSetting"> | string
    type?: StringFilter<"ProjectSetting"> | string
    projectId?: StringFilter<"ProjectSetting"> | string
    createdAt?: DateTimeFilter<"ProjectSetting"> | Date | string
    updatedAt?: DateTimeFilter<"ProjectSetting"> | Date | string
    project?: XOR<ProjectScalarRelationFilter, ProjectWhereInput>
  }, "id" | "projectId_key">

  export type ProjectSettingOrderByWithAggregationInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    type?: SortOrder
    projectId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ProjectSettingCountOrderByAggregateInput
    _max?: ProjectSettingMaxOrderByAggregateInput
    _min?: ProjectSettingMinOrderByAggregateInput
  }

  export type ProjectSettingScalarWhereWithAggregatesInput = {
    AND?: ProjectSettingScalarWhereWithAggregatesInput | ProjectSettingScalarWhereWithAggregatesInput[]
    OR?: ProjectSettingScalarWhereWithAggregatesInput[]
    NOT?: ProjectSettingScalarWhereWithAggregatesInput | ProjectSettingScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ProjectSetting"> | string
    key?: StringWithAggregatesFilter<"ProjectSetting"> | string
    value?: StringWithAggregatesFilter<"ProjectSetting"> | string
    type?: StringWithAggregatesFilter<"ProjectSetting"> | string
    projectId?: StringWithAggregatesFilter<"ProjectSetting"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ProjectSetting"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ProjectSetting"> | Date | string
  }

  export type AssetWhereInput = {
    AND?: AssetWhereInput | AssetWhereInput[]
    OR?: AssetWhereInput[]
    NOT?: AssetWhereInput | AssetWhereInput[]
    id?: StringFilter<"Asset"> | string
    name?: StringFilter<"Asset"> | string
    type?: EnumAssetTypeFilter<"Asset"> | $Enums.AssetType
    filePath?: StringFilter<"Asset"> | string
    fileSize?: IntFilter<"Asset"> | number
    mimeType?: StringNullableFilter<"Asset"> | string | null
    checksum?: StringNullableFilter<"Asset"> | string | null
    width?: IntNullableFilter<"Asset"> | number | null
    height?: IntNullableFilter<"Asset"> | number | null
    duration?: FloatNullableFilter<"Asset"> | number | null
    channels?: IntNullableFilter<"Asset"> | number | null
    sampleRate?: IntNullableFilter<"Asset"> | number | null
    bitRate?: IntNullableFilter<"Asset"> | number | null
    projectId?: StringFilter<"Asset"> | string
    folderId?: StringNullableFilter<"Asset"> | string | null
    tags?: JsonNullableFilter<"Asset">
    version?: StringFilter<"Asset"> | string
    parentId?: StringNullableFilter<"Asset"> | string | null
    dependencies?: JsonNullableFilter<"Asset">
    originalName?: StringNullableFilter<"Asset"> | string | null
    importedAt?: DateTimeFilter<"Asset"> | Date | string
    importSettings?: JsonNullableFilter<"Asset">
    thumbnail?: StringNullableFilter<"Asset"> | string | null
    preview?: StringNullableFilter<"Asset"> | string | null
    createdAt?: DateTimeFilter<"Asset"> | Date | string
    updatedAt?: DateTimeFilter<"Asset"> | Date | string
    project?: XOR<ProjectScalarRelationFilter, ProjectWhereInput>
    folder?: XOR<FolderNullableScalarRelationFilter, FolderWhereInput> | null
    parent?: XOR<AssetNullableScalarRelationFilter, AssetWhereInput> | null
    versions?: AssetListRelationFilter
    sceneUsages?: SceneAssetUsageListRelationFilter
    scriptUsages?: ScriptAssetUsageListRelationFilter
    materialUsages?: MaterialAssetUsageListRelationFilter
  }

  export type AssetOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    filePath?: SortOrder
    fileSize?: SortOrder
    mimeType?: SortOrderInput | SortOrder
    checksum?: SortOrderInput | SortOrder
    width?: SortOrderInput | SortOrder
    height?: SortOrderInput | SortOrder
    duration?: SortOrderInput | SortOrder
    channels?: SortOrderInput | SortOrder
    sampleRate?: SortOrderInput | SortOrder
    bitRate?: SortOrderInput | SortOrder
    projectId?: SortOrder
    folderId?: SortOrderInput | SortOrder
    tags?: SortOrderInput | SortOrder
    version?: SortOrder
    parentId?: SortOrderInput | SortOrder
    dependencies?: SortOrderInput | SortOrder
    originalName?: SortOrderInput | SortOrder
    importedAt?: SortOrder
    importSettings?: SortOrderInput | SortOrder
    thumbnail?: SortOrderInput | SortOrder
    preview?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    project?: ProjectOrderByWithRelationInput
    folder?: FolderOrderByWithRelationInput
    parent?: AssetOrderByWithRelationInput
    versions?: AssetOrderByRelationAggregateInput
    sceneUsages?: SceneAssetUsageOrderByRelationAggregateInput
    scriptUsages?: ScriptAssetUsageOrderByRelationAggregateInput
    materialUsages?: MaterialAssetUsageOrderByRelationAggregateInput
  }

  export type AssetWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    projectId_filePath?: AssetProjectIdFilePathCompoundUniqueInput
    AND?: AssetWhereInput | AssetWhereInput[]
    OR?: AssetWhereInput[]
    NOT?: AssetWhereInput | AssetWhereInput[]
    name?: StringFilter<"Asset"> | string
    type?: EnumAssetTypeFilter<"Asset"> | $Enums.AssetType
    filePath?: StringFilter<"Asset"> | string
    fileSize?: IntFilter<"Asset"> | number
    mimeType?: StringNullableFilter<"Asset"> | string | null
    checksum?: StringNullableFilter<"Asset"> | string | null
    width?: IntNullableFilter<"Asset"> | number | null
    height?: IntNullableFilter<"Asset"> | number | null
    duration?: FloatNullableFilter<"Asset"> | number | null
    channels?: IntNullableFilter<"Asset"> | number | null
    sampleRate?: IntNullableFilter<"Asset"> | number | null
    bitRate?: IntNullableFilter<"Asset"> | number | null
    projectId?: StringFilter<"Asset"> | string
    folderId?: StringNullableFilter<"Asset"> | string | null
    tags?: JsonNullableFilter<"Asset">
    version?: StringFilter<"Asset"> | string
    parentId?: StringNullableFilter<"Asset"> | string | null
    dependencies?: JsonNullableFilter<"Asset">
    originalName?: StringNullableFilter<"Asset"> | string | null
    importedAt?: DateTimeFilter<"Asset"> | Date | string
    importSettings?: JsonNullableFilter<"Asset">
    thumbnail?: StringNullableFilter<"Asset"> | string | null
    preview?: StringNullableFilter<"Asset"> | string | null
    createdAt?: DateTimeFilter<"Asset"> | Date | string
    updatedAt?: DateTimeFilter<"Asset"> | Date | string
    project?: XOR<ProjectScalarRelationFilter, ProjectWhereInput>
    folder?: XOR<FolderNullableScalarRelationFilter, FolderWhereInput> | null
    parent?: XOR<AssetNullableScalarRelationFilter, AssetWhereInput> | null
    versions?: AssetListRelationFilter
    sceneUsages?: SceneAssetUsageListRelationFilter
    scriptUsages?: ScriptAssetUsageListRelationFilter
    materialUsages?: MaterialAssetUsageListRelationFilter
  }, "id" | "projectId_filePath">

  export type AssetOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    filePath?: SortOrder
    fileSize?: SortOrder
    mimeType?: SortOrderInput | SortOrder
    checksum?: SortOrderInput | SortOrder
    width?: SortOrderInput | SortOrder
    height?: SortOrderInput | SortOrder
    duration?: SortOrderInput | SortOrder
    channels?: SortOrderInput | SortOrder
    sampleRate?: SortOrderInput | SortOrder
    bitRate?: SortOrderInput | SortOrder
    projectId?: SortOrder
    folderId?: SortOrderInput | SortOrder
    tags?: SortOrderInput | SortOrder
    version?: SortOrder
    parentId?: SortOrderInput | SortOrder
    dependencies?: SortOrderInput | SortOrder
    originalName?: SortOrderInput | SortOrder
    importedAt?: SortOrder
    importSettings?: SortOrderInput | SortOrder
    thumbnail?: SortOrderInput | SortOrder
    preview?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AssetCountOrderByAggregateInput
    _avg?: AssetAvgOrderByAggregateInput
    _max?: AssetMaxOrderByAggregateInput
    _min?: AssetMinOrderByAggregateInput
    _sum?: AssetSumOrderByAggregateInput
  }

  export type AssetScalarWhereWithAggregatesInput = {
    AND?: AssetScalarWhereWithAggregatesInput | AssetScalarWhereWithAggregatesInput[]
    OR?: AssetScalarWhereWithAggregatesInput[]
    NOT?: AssetScalarWhereWithAggregatesInput | AssetScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Asset"> | string
    name?: StringWithAggregatesFilter<"Asset"> | string
    type?: EnumAssetTypeWithAggregatesFilter<"Asset"> | $Enums.AssetType
    filePath?: StringWithAggregatesFilter<"Asset"> | string
    fileSize?: IntWithAggregatesFilter<"Asset"> | number
    mimeType?: StringNullableWithAggregatesFilter<"Asset"> | string | null
    checksum?: StringNullableWithAggregatesFilter<"Asset"> | string | null
    width?: IntNullableWithAggregatesFilter<"Asset"> | number | null
    height?: IntNullableWithAggregatesFilter<"Asset"> | number | null
    duration?: FloatNullableWithAggregatesFilter<"Asset"> | number | null
    channels?: IntNullableWithAggregatesFilter<"Asset"> | number | null
    sampleRate?: IntNullableWithAggregatesFilter<"Asset"> | number | null
    bitRate?: IntNullableWithAggregatesFilter<"Asset"> | number | null
    projectId?: StringWithAggregatesFilter<"Asset"> | string
    folderId?: StringNullableWithAggregatesFilter<"Asset"> | string | null
    tags?: JsonNullableWithAggregatesFilter<"Asset">
    version?: StringWithAggregatesFilter<"Asset"> | string
    parentId?: StringNullableWithAggregatesFilter<"Asset"> | string | null
    dependencies?: JsonNullableWithAggregatesFilter<"Asset">
    originalName?: StringNullableWithAggregatesFilter<"Asset"> | string | null
    importedAt?: DateTimeWithAggregatesFilter<"Asset"> | Date | string
    importSettings?: JsonNullableWithAggregatesFilter<"Asset">
    thumbnail?: StringNullableWithAggregatesFilter<"Asset"> | string | null
    preview?: StringNullableWithAggregatesFilter<"Asset"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Asset"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Asset"> | Date | string
  }

  export type SceneAssetUsageWhereInput = {
    AND?: SceneAssetUsageWhereInput | SceneAssetUsageWhereInput[]
    OR?: SceneAssetUsageWhereInput[]
    NOT?: SceneAssetUsageWhereInput | SceneAssetUsageWhereInput[]
    id?: StringFilter<"SceneAssetUsage"> | string
    sceneId?: StringFilter<"SceneAssetUsage"> | string
    assetId?: StringFilter<"SceneAssetUsage"> | string
    usage?: StringFilter<"SceneAssetUsage"> | string
    scene?: XOR<SceneScalarRelationFilter, SceneWhereInput>
    asset?: XOR<AssetScalarRelationFilter, AssetWhereInput>
  }

  export type SceneAssetUsageOrderByWithRelationInput = {
    id?: SortOrder
    sceneId?: SortOrder
    assetId?: SortOrder
    usage?: SortOrder
    scene?: SceneOrderByWithRelationInput
    asset?: AssetOrderByWithRelationInput
  }

  export type SceneAssetUsageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    sceneId_assetId?: SceneAssetUsageSceneIdAssetIdCompoundUniqueInput
    AND?: SceneAssetUsageWhereInput | SceneAssetUsageWhereInput[]
    OR?: SceneAssetUsageWhereInput[]
    NOT?: SceneAssetUsageWhereInput | SceneAssetUsageWhereInput[]
    sceneId?: StringFilter<"SceneAssetUsage"> | string
    assetId?: StringFilter<"SceneAssetUsage"> | string
    usage?: StringFilter<"SceneAssetUsage"> | string
    scene?: XOR<SceneScalarRelationFilter, SceneWhereInput>
    asset?: XOR<AssetScalarRelationFilter, AssetWhereInput>
  }, "id" | "sceneId_assetId">

  export type SceneAssetUsageOrderByWithAggregationInput = {
    id?: SortOrder
    sceneId?: SortOrder
    assetId?: SortOrder
    usage?: SortOrder
    _count?: SceneAssetUsageCountOrderByAggregateInput
    _max?: SceneAssetUsageMaxOrderByAggregateInput
    _min?: SceneAssetUsageMinOrderByAggregateInput
  }

  export type SceneAssetUsageScalarWhereWithAggregatesInput = {
    AND?: SceneAssetUsageScalarWhereWithAggregatesInput | SceneAssetUsageScalarWhereWithAggregatesInput[]
    OR?: SceneAssetUsageScalarWhereWithAggregatesInput[]
    NOT?: SceneAssetUsageScalarWhereWithAggregatesInput | SceneAssetUsageScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SceneAssetUsage"> | string
    sceneId?: StringWithAggregatesFilter<"SceneAssetUsage"> | string
    assetId?: StringWithAggregatesFilter<"SceneAssetUsage"> | string
    usage?: StringWithAggregatesFilter<"SceneAssetUsage"> | string
  }

  export type ScriptAssetUsageWhereInput = {
    AND?: ScriptAssetUsageWhereInput | ScriptAssetUsageWhereInput[]
    OR?: ScriptAssetUsageWhereInput[]
    NOT?: ScriptAssetUsageWhereInput | ScriptAssetUsageWhereInput[]
    id?: StringFilter<"ScriptAssetUsage"> | string
    scriptId?: StringFilter<"ScriptAssetUsage"> | string
    assetId?: StringFilter<"ScriptAssetUsage"> | string
    usage?: StringFilter<"ScriptAssetUsage"> | string
    script?: XOR<ScriptScalarRelationFilter, ScriptWhereInput>
    asset?: XOR<AssetScalarRelationFilter, AssetWhereInput>
  }

  export type ScriptAssetUsageOrderByWithRelationInput = {
    id?: SortOrder
    scriptId?: SortOrder
    assetId?: SortOrder
    usage?: SortOrder
    script?: ScriptOrderByWithRelationInput
    asset?: AssetOrderByWithRelationInput
  }

  export type ScriptAssetUsageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    scriptId_assetId?: ScriptAssetUsageScriptIdAssetIdCompoundUniqueInput
    AND?: ScriptAssetUsageWhereInput | ScriptAssetUsageWhereInput[]
    OR?: ScriptAssetUsageWhereInput[]
    NOT?: ScriptAssetUsageWhereInput | ScriptAssetUsageWhereInput[]
    scriptId?: StringFilter<"ScriptAssetUsage"> | string
    assetId?: StringFilter<"ScriptAssetUsage"> | string
    usage?: StringFilter<"ScriptAssetUsage"> | string
    script?: XOR<ScriptScalarRelationFilter, ScriptWhereInput>
    asset?: XOR<AssetScalarRelationFilter, AssetWhereInput>
  }, "id" | "scriptId_assetId">

  export type ScriptAssetUsageOrderByWithAggregationInput = {
    id?: SortOrder
    scriptId?: SortOrder
    assetId?: SortOrder
    usage?: SortOrder
    _count?: ScriptAssetUsageCountOrderByAggregateInput
    _max?: ScriptAssetUsageMaxOrderByAggregateInput
    _min?: ScriptAssetUsageMinOrderByAggregateInput
  }

  export type ScriptAssetUsageScalarWhereWithAggregatesInput = {
    AND?: ScriptAssetUsageScalarWhereWithAggregatesInput | ScriptAssetUsageScalarWhereWithAggregatesInput[]
    OR?: ScriptAssetUsageScalarWhereWithAggregatesInput[]
    NOT?: ScriptAssetUsageScalarWhereWithAggregatesInput | ScriptAssetUsageScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ScriptAssetUsage"> | string
    scriptId?: StringWithAggregatesFilter<"ScriptAssetUsage"> | string
    assetId?: StringWithAggregatesFilter<"ScriptAssetUsage"> | string
    usage?: StringWithAggregatesFilter<"ScriptAssetUsage"> | string
  }

  export type MaterialAssetUsageWhereInput = {
    AND?: MaterialAssetUsageWhereInput | MaterialAssetUsageWhereInput[]
    OR?: MaterialAssetUsageWhereInput[]
    NOT?: MaterialAssetUsageWhereInput | MaterialAssetUsageWhereInput[]
    id?: StringFilter<"MaterialAssetUsage"> | string
    materialId?: StringFilter<"MaterialAssetUsage"> | string
    assetId?: StringFilter<"MaterialAssetUsage"> | string
    usage?: StringFilter<"MaterialAssetUsage"> | string
    material?: XOR<MaterialScalarRelationFilter, MaterialWhereInput>
    asset?: XOR<AssetScalarRelationFilter, AssetWhereInput>
  }

  export type MaterialAssetUsageOrderByWithRelationInput = {
    id?: SortOrder
    materialId?: SortOrder
    assetId?: SortOrder
    usage?: SortOrder
    material?: MaterialOrderByWithRelationInput
    asset?: AssetOrderByWithRelationInput
  }

  export type MaterialAssetUsageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    materialId_assetId?: MaterialAssetUsageMaterialIdAssetIdCompoundUniqueInput
    AND?: MaterialAssetUsageWhereInput | MaterialAssetUsageWhereInput[]
    OR?: MaterialAssetUsageWhereInput[]
    NOT?: MaterialAssetUsageWhereInput | MaterialAssetUsageWhereInput[]
    materialId?: StringFilter<"MaterialAssetUsage"> | string
    assetId?: StringFilter<"MaterialAssetUsage"> | string
    usage?: StringFilter<"MaterialAssetUsage"> | string
    material?: XOR<MaterialScalarRelationFilter, MaterialWhereInput>
    asset?: XOR<AssetScalarRelationFilter, AssetWhereInput>
  }, "id" | "materialId_assetId">

  export type MaterialAssetUsageOrderByWithAggregationInput = {
    id?: SortOrder
    materialId?: SortOrder
    assetId?: SortOrder
    usage?: SortOrder
    _count?: MaterialAssetUsageCountOrderByAggregateInput
    _max?: MaterialAssetUsageMaxOrderByAggregateInput
    _min?: MaterialAssetUsageMinOrderByAggregateInput
  }

  export type MaterialAssetUsageScalarWhereWithAggregatesInput = {
    AND?: MaterialAssetUsageScalarWhereWithAggregatesInput | MaterialAssetUsageScalarWhereWithAggregatesInput[]
    OR?: MaterialAssetUsageScalarWhereWithAggregatesInput[]
    NOT?: MaterialAssetUsageScalarWhereWithAggregatesInput | MaterialAssetUsageScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MaterialAssetUsage"> | string
    materialId?: StringWithAggregatesFilter<"MaterialAssetUsage"> | string
    assetId?: StringWithAggregatesFilter<"MaterialAssetUsage"> | string
    usage?: StringWithAggregatesFilter<"MaterialAssetUsage"> | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    username?: string | null
    firstName?: string | null
    lastName?: string | null
    password: string
    avatar?: string | null
    isActive?: boolean
    isVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    projects?: ProjectCreateNestedManyWithoutUserInput
    sessions?: UserSessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    username?: string | null
    firstName?: string | null
    lastName?: string | null
    password: string
    avatar?: string | null
    isActive?: boolean
    isVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    projects?: ProjectUncheckedCreateNestedManyWithoutUserInput
    sessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    projects?: ProjectUpdateManyWithoutUserNestedInput
    sessions?: UserSessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    projects?: ProjectUncheckedUpdateManyWithoutUserNestedInput
    sessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    username?: string | null
    firstName?: string | null
    lastName?: string | null
    password: string
    avatar?: string | null
    isActive?: boolean
    isVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserSessionCreateInput = {
    id?: string
    token: string
    refreshToken?: string | null
    expiresAt: Date | string
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutSessionsInput
  }

  export type UserSessionUncheckedCreateInput = {
    id?: string
    userId: string
    token: string
    refreshToken?: string | null
    expiresAt: Date | string
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserSessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type UserSessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSessionCreateManyInput = {
    id?: string
    userId: string
    token: string
    refreshToken?: string | null
    expiresAt: Date | string
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserSessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectCreateInput = {
    id?: string
    name: string
    description?: string | null
    path: string
    version?: string
    engineVersion?: string
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastOpened?: Date | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    user: UserCreateNestedOneWithoutProjectsInput
    scenes?: SceneCreateNestedManyWithoutProjectInput
    scripts?: ScriptCreateNestedManyWithoutProjectInput
    materials?: MaterialCreateNestedManyWithoutProjectInput
    terrains?: TerrainCreateNestedManyWithoutProjectInput
    animations?: AnimationCreateNestedManyWithoutProjectInput
    folders?: FolderCreateNestedManyWithoutProjectInput
    projectSettings?: ProjectSettingCreateNestedManyWithoutProjectInput
    assets?: AssetCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    path: string
    version?: string
    engineVersion?: string
    userId: string
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastOpened?: Date | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    scenes?: SceneUncheckedCreateNestedManyWithoutProjectInput
    scripts?: ScriptUncheckedCreateNestedManyWithoutProjectInput
    materials?: MaterialUncheckedCreateNestedManyWithoutProjectInput
    terrains?: TerrainUncheckedCreateNestedManyWithoutProjectInput
    animations?: AnimationUncheckedCreateNestedManyWithoutProjectInput
    folders?: FolderUncheckedCreateNestedManyWithoutProjectInput
    projectSettings?: ProjectSettingUncheckedCreateNestedManyWithoutProjectInput
    assets?: AssetUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    path?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    engineVersion?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastOpened?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    user?: UserUpdateOneRequiredWithoutProjectsNestedInput
    scenes?: SceneUpdateManyWithoutProjectNestedInput
    scripts?: ScriptUpdateManyWithoutProjectNestedInput
    materials?: MaterialUpdateManyWithoutProjectNestedInput
    terrains?: TerrainUpdateManyWithoutProjectNestedInput
    animations?: AnimationUpdateManyWithoutProjectNestedInput
    folders?: FolderUpdateManyWithoutProjectNestedInput
    projectSettings?: ProjectSettingUpdateManyWithoutProjectNestedInput
    assets?: AssetUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    path?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    engineVersion?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastOpened?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    scenes?: SceneUncheckedUpdateManyWithoutProjectNestedInput
    scripts?: ScriptUncheckedUpdateManyWithoutProjectNestedInput
    materials?: MaterialUncheckedUpdateManyWithoutProjectNestedInput
    terrains?: TerrainUncheckedUpdateManyWithoutProjectNestedInput
    animations?: AnimationUncheckedUpdateManyWithoutProjectNestedInput
    folders?: FolderUncheckedUpdateManyWithoutProjectNestedInput
    projectSettings?: ProjectSettingUncheckedUpdateManyWithoutProjectNestedInput
    assets?: AssetUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    path: string
    version?: string
    engineVersion?: string
    userId: string
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastOpened?: Date | string
    settings?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ProjectUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    path?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    engineVersion?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastOpened?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ProjectUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    path?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    engineVersion?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastOpened?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: NullableJsonNullValueInput | InputJsonValue
  }

  export type FolderCreateInput = {
    id?: string
    name: string
    path: string
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutFoldersInput
    parent?: FolderCreateNestedOneWithoutChildrenInput
    children?: FolderCreateNestedManyWithoutParentInput
    assets?: AssetCreateNestedManyWithoutFolderInput
  }

  export type FolderUncheckedCreateInput = {
    id?: string
    name: string
    path: string
    parentId?: string | null
    projectId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    children?: FolderUncheckedCreateNestedManyWithoutParentInput
    assets?: AssetUncheckedCreateNestedManyWithoutFolderInput
  }

  export type FolderUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutFoldersNestedInput
    parent?: FolderUpdateOneWithoutChildrenNestedInput
    children?: FolderUpdateManyWithoutParentNestedInput
    assets?: AssetUpdateManyWithoutFolderNestedInput
  }

  export type FolderUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: FolderUncheckedUpdateManyWithoutParentNestedInput
    assets?: AssetUncheckedUpdateManyWithoutFolderNestedInput
  }

  export type FolderCreateManyInput = {
    id?: string
    name: string
    path: string
    parentId?: string | null
    projectId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FolderUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FolderUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SceneCreateInput = {
    id?: string
    name: string
    path: string
    type?: string
    description?: string | null
    isMain?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    sceneData?: NullableJsonNullValueInput | InputJsonValue
    project: ProjectCreateNestedOneWithoutScenesInput
    nodes?: SceneNodeCreateNestedManyWithoutSceneInput
    assetUsages?: SceneAssetUsageCreateNestedManyWithoutSceneInput
  }

  export type SceneUncheckedCreateInput = {
    id?: string
    name: string
    path: string
    type?: string
    projectId: string
    description?: string | null
    isMain?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    sceneData?: NullableJsonNullValueInput | InputJsonValue
    nodes?: SceneNodeUncheckedCreateNestedManyWithoutSceneInput
    assetUsages?: SceneAssetUsageUncheckedCreateNestedManyWithoutSceneInput
  }

  export type SceneUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isMain?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sceneData?: NullableJsonNullValueInput | InputJsonValue
    project?: ProjectUpdateOneRequiredWithoutScenesNestedInput
    nodes?: SceneNodeUpdateManyWithoutSceneNestedInput
    assetUsages?: SceneAssetUsageUpdateManyWithoutSceneNestedInput
  }

  export type SceneUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isMain?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sceneData?: NullableJsonNullValueInput | InputJsonValue
    nodes?: SceneNodeUncheckedUpdateManyWithoutSceneNestedInput
    assetUsages?: SceneAssetUsageUncheckedUpdateManyWithoutSceneNestedInput
  }

  export type SceneCreateManyInput = {
    id?: string
    name: string
    path: string
    type?: string
    projectId: string
    description?: string | null
    isMain?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    sceneData?: NullableJsonNullValueInput | InputJsonValue
  }

  export type SceneUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isMain?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sceneData?: NullableJsonNullValueInput | InputJsonValue
  }

  export type SceneUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isMain?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sceneData?: NullableJsonNullValueInput | InputJsonValue
  }

  export type SceneNodeCreateInput = {
    id?: string
    uuid: string
    name: string
    type: string
    position: JsonNullValueInput | InputJsonValue
    rotation: JsonNullValueInput | InputJsonValue
    scale: JsonNullValueInput | InputJsonValue
    visible?: boolean
    properties?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    scene: SceneCreateNestedOneWithoutNodesInput
    parent?: SceneNodeCreateNestedOneWithoutChildrenInput
    children?: SceneNodeCreateNestedManyWithoutParentInput
  }

  export type SceneNodeUncheckedCreateInput = {
    id?: string
    uuid: string
    name: string
    type: string
    sceneId: string
    parentId?: string | null
    position: JsonNullValueInput | InputJsonValue
    rotation: JsonNullValueInput | InputJsonValue
    scale: JsonNullValueInput | InputJsonValue
    visible?: boolean
    properties?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    children?: SceneNodeUncheckedCreateNestedManyWithoutParentInput
  }

  export type SceneNodeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    uuid?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    position?: JsonNullValueInput | InputJsonValue
    rotation?: JsonNullValueInput | InputJsonValue
    scale?: JsonNullValueInput | InputJsonValue
    visible?: BoolFieldUpdateOperationsInput | boolean
    properties?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    scene?: SceneUpdateOneRequiredWithoutNodesNestedInput
    parent?: SceneNodeUpdateOneWithoutChildrenNestedInput
    children?: SceneNodeUpdateManyWithoutParentNestedInput
  }

  export type SceneNodeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    uuid?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    sceneId?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    position?: JsonNullValueInput | InputJsonValue
    rotation?: JsonNullValueInput | InputJsonValue
    scale?: JsonNullValueInput | InputJsonValue
    visible?: BoolFieldUpdateOperationsInput | boolean
    properties?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: SceneNodeUncheckedUpdateManyWithoutParentNestedInput
  }

  export type SceneNodeCreateManyInput = {
    id?: string
    uuid: string
    name: string
    type: string
    sceneId: string
    parentId?: string | null
    position: JsonNullValueInput | InputJsonValue
    rotation: JsonNullValueInput | InputJsonValue
    scale: JsonNullValueInput | InputJsonValue
    visible?: boolean
    properties?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SceneNodeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    uuid?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    position?: JsonNullValueInput | InputJsonValue
    rotation?: JsonNullValueInput | InputJsonValue
    scale?: JsonNullValueInput | InputJsonValue
    visible?: BoolFieldUpdateOperationsInput | boolean
    properties?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SceneNodeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    uuid?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    sceneId?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    position?: JsonNullValueInput | InputJsonValue
    rotation?: JsonNullValueInput | InputJsonValue
    scale?: JsonNullValueInput | InputJsonValue
    visible?: BoolFieldUpdateOperationsInput | boolean
    properties?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScriptCreateInput = {
    id?: string
    name: string
    path: string
    language?: string
    content?: string
    description?: string | null
    isTemplate?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutScriptsInput
    assetUsages?: ScriptAssetUsageCreateNestedManyWithoutScriptInput
  }

  export type ScriptUncheckedCreateInput = {
    id?: string
    name: string
    path: string
    language?: string
    content?: string
    projectId: string
    description?: string | null
    isTemplate?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    assetUsages?: ScriptAssetUsageUncheckedCreateNestedManyWithoutScriptInput
  }

  export type ScriptUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isTemplate?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutScriptsNestedInput
    assetUsages?: ScriptAssetUsageUpdateManyWithoutScriptNestedInput
  }

  export type ScriptUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isTemplate?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assetUsages?: ScriptAssetUsageUncheckedUpdateManyWithoutScriptNestedInput
  }

  export type ScriptCreateManyInput = {
    id?: string
    name: string
    path: string
    language?: string
    content?: string
    projectId: string
    description?: string | null
    isTemplate?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScriptUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isTemplate?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScriptUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isTemplate?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MaterialCreateInput = {
    id?: string
    name: string
    type?: string
    albedo?: string | null
    roughness?: number | null
    metalness?: number | null
    emission?: string | null
    albedoMap?: string | null
    normalMap?: string | null
    roughnessMap?: string | null
    metalnessMap?: string | null
    emissionMap?: string | null
    shaderCode?: string | null
    shaderParams?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutMaterialsInput
    assetUsages?: MaterialAssetUsageCreateNestedManyWithoutMaterialInput
  }

  export type MaterialUncheckedCreateInput = {
    id?: string
    name: string
    type?: string
    projectId: string
    albedo?: string | null
    roughness?: number | null
    metalness?: number | null
    emission?: string | null
    albedoMap?: string | null
    normalMap?: string | null
    roughnessMap?: string | null
    metalnessMap?: string | null
    emissionMap?: string | null
    shaderCode?: string | null
    shaderParams?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    assetUsages?: MaterialAssetUsageUncheckedCreateNestedManyWithoutMaterialInput
  }

  export type MaterialUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    albedo?: NullableStringFieldUpdateOperationsInput | string | null
    roughness?: NullableFloatFieldUpdateOperationsInput | number | null
    metalness?: NullableFloatFieldUpdateOperationsInput | number | null
    emission?: NullableStringFieldUpdateOperationsInput | string | null
    albedoMap?: NullableStringFieldUpdateOperationsInput | string | null
    normalMap?: NullableStringFieldUpdateOperationsInput | string | null
    roughnessMap?: NullableStringFieldUpdateOperationsInput | string | null
    metalnessMap?: NullableStringFieldUpdateOperationsInput | string | null
    emissionMap?: NullableStringFieldUpdateOperationsInput | string | null
    shaderCode?: NullableStringFieldUpdateOperationsInput | string | null
    shaderParams?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutMaterialsNestedInput
    assetUsages?: MaterialAssetUsageUpdateManyWithoutMaterialNestedInput
  }

  export type MaterialUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    albedo?: NullableStringFieldUpdateOperationsInput | string | null
    roughness?: NullableFloatFieldUpdateOperationsInput | number | null
    metalness?: NullableFloatFieldUpdateOperationsInput | number | null
    emission?: NullableStringFieldUpdateOperationsInput | string | null
    albedoMap?: NullableStringFieldUpdateOperationsInput | string | null
    normalMap?: NullableStringFieldUpdateOperationsInput | string | null
    roughnessMap?: NullableStringFieldUpdateOperationsInput | string | null
    metalnessMap?: NullableStringFieldUpdateOperationsInput | string | null
    emissionMap?: NullableStringFieldUpdateOperationsInput | string | null
    shaderCode?: NullableStringFieldUpdateOperationsInput | string | null
    shaderParams?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assetUsages?: MaterialAssetUsageUncheckedUpdateManyWithoutMaterialNestedInput
  }

  export type MaterialCreateManyInput = {
    id?: string
    name: string
    type?: string
    projectId: string
    albedo?: string | null
    roughness?: number | null
    metalness?: number | null
    emission?: string | null
    albedoMap?: string | null
    normalMap?: string | null
    roughnessMap?: string | null
    metalnessMap?: string | null
    emissionMap?: string | null
    shaderCode?: string | null
    shaderParams?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MaterialUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    albedo?: NullableStringFieldUpdateOperationsInput | string | null
    roughness?: NullableFloatFieldUpdateOperationsInput | number | null
    metalness?: NullableFloatFieldUpdateOperationsInput | number | null
    emission?: NullableStringFieldUpdateOperationsInput | string | null
    albedoMap?: NullableStringFieldUpdateOperationsInput | string | null
    normalMap?: NullableStringFieldUpdateOperationsInput | string | null
    roughnessMap?: NullableStringFieldUpdateOperationsInput | string | null
    metalnessMap?: NullableStringFieldUpdateOperationsInput | string | null
    emissionMap?: NullableStringFieldUpdateOperationsInput | string | null
    shaderCode?: NullableStringFieldUpdateOperationsInput | string | null
    shaderParams?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MaterialUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    albedo?: NullableStringFieldUpdateOperationsInput | string | null
    roughness?: NullableFloatFieldUpdateOperationsInput | number | null
    metalness?: NullableFloatFieldUpdateOperationsInput | number | null
    emission?: NullableStringFieldUpdateOperationsInput | string | null
    albedoMap?: NullableStringFieldUpdateOperationsInput | string | null
    normalMap?: NullableStringFieldUpdateOperationsInput | string | null
    roughnessMap?: NullableStringFieldUpdateOperationsInput | string | null
    metalnessMap?: NullableStringFieldUpdateOperationsInput | string | null
    emissionMap?: NullableStringFieldUpdateOperationsInput | string | null
    shaderCode?: NullableStringFieldUpdateOperationsInput | string | null
    shaderParams?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TerrainCreateInput = {
    id?: string
    name: string
    width?: number
    height?: number
    scale?: number
    heightmapPath?: string | null
    heightmapData?: NullableJsonNullValueInput | InputJsonValue
    textureLayers?: NullableJsonNullValueInput | InputJsonValue
    brushSettings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutTerrainsInput
  }

  export type TerrainUncheckedCreateInput = {
    id?: string
    name: string
    projectId: string
    width?: number
    height?: number
    scale?: number
    heightmapPath?: string | null
    heightmapData?: NullableJsonNullValueInput | InputJsonValue
    textureLayers?: NullableJsonNullValueInput | InputJsonValue
    brushSettings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TerrainUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    scale?: FloatFieldUpdateOperationsInput | number
    heightmapPath?: NullableStringFieldUpdateOperationsInput | string | null
    heightmapData?: NullableJsonNullValueInput | InputJsonValue
    textureLayers?: NullableJsonNullValueInput | InputJsonValue
    brushSettings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutTerrainsNestedInput
  }

  export type TerrainUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    scale?: FloatFieldUpdateOperationsInput | number
    heightmapPath?: NullableStringFieldUpdateOperationsInput | string | null
    heightmapData?: NullableJsonNullValueInput | InputJsonValue
    textureLayers?: NullableJsonNullValueInput | InputJsonValue
    brushSettings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TerrainCreateManyInput = {
    id?: string
    name: string
    projectId: string
    width?: number
    height?: number
    scale?: number
    heightmapPath?: string | null
    heightmapData?: NullableJsonNullValueInput | InputJsonValue
    textureLayers?: NullableJsonNullValueInput | InputJsonValue
    brushSettings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TerrainUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    scale?: FloatFieldUpdateOperationsInput | number
    heightmapPath?: NullableStringFieldUpdateOperationsInput | string | null
    heightmapData?: NullableJsonNullValueInput | InputJsonValue
    textureLayers?: NullableJsonNullValueInput | InputJsonValue
    brushSettings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TerrainUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    scale?: FloatFieldUpdateOperationsInput | number
    heightmapPath?: NullableStringFieldUpdateOperationsInput | string | null
    heightmapData?: NullableJsonNullValueInput | InputJsonValue
    textureLayers?: NullableJsonNullValueInput | InputJsonValue
    brushSettings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnimationCreateInput = {
    id?: string
    name: string
    type?: string
    duration?: number | null
    frameRate?: number | null
    states?: NullableJsonNullValueInput | InputJsonValue
    transitions?: NullableJsonNullValueInput | InputJsonValue
    parameters?: NullableJsonNullValueInput | InputJsonValue
    tracks?: NullableJsonNullValueInput | InputJsonValue
    keyframes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutAnimationsInput
  }

  export type AnimationUncheckedCreateInput = {
    id?: string
    name: string
    type?: string
    projectId: string
    duration?: number | null
    frameRate?: number | null
    states?: NullableJsonNullValueInput | InputJsonValue
    transitions?: NullableJsonNullValueInput | InputJsonValue
    parameters?: NullableJsonNullValueInput | InputJsonValue
    tracks?: NullableJsonNullValueInput | InputJsonValue
    keyframes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AnimationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    duration?: NullableFloatFieldUpdateOperationsInput | number | null
    frameRate?: NullableIntFieldUpdateOperationsInput | number | null
    states?: NullableJsonNullValueInput | InputJsonValue
    transitions?: NullableJsonNullValueInput | InputJsonValue
    parameters?: NullableJsonNullValueInput | InputJsonValue
    tracks?: NullableJsonNullValueInput | InputJsonValue
    keyframes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutAnimationsNestedInput
  }

  export type AnimationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    duration?: NullableFloatFieldUpdateOperationsInput | number | null
    frameRate?: NullableIntFieldUpdateOperationsInput | number | null
    states?: NullableJsonNullValueInput | InputJsonValue
    transitions?: NullableJsonNullValueInput | InputJsonValue
    parameters?: NullableJsonNullValueInput | InputJsonValue
    tracks?: NullableJsonNullValueInput | InputJsonValue
    keyframes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnimationCreateManyInput = {
    id?: string
    name: string
    type?: string
    projectId: string
    duration?: number | null
    frameRate?: number | null
    states?: NullableJsonNullValueInput | InputJsonValue
    transitions?: NullableJsonNullValueInput | InputJsonValue
    parameters?: NullableJsonNullValueInput | InputJsonValue
    tracks?: NullableJsonNullValueInput | InputJsonValue
    keyframes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AnimationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    duration?: NullableFloatFieldUpdateOperationsInput | number | null
    frameRate?: NullableIntFieldUpdateOperationsInput | number | null
    states?: NullableJsonNullValueInput | InputJsonValue
    transitions?: NullableJsonNullValueInput | InputJsonValue
    parameters?: NullableJsonNullValueInput | InputJsonValue
    tracks?: NullableJsonNullValueInput | InputJsonValue
    keyframes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnimationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    duration?: NullableFloatFieldUpdateOperationsInput | number | null
    frameRate?: NullableIntFieldUpdateOperationsInput | number | null
    states?: NullableJsonNullValueInput | InputJsonValue
    transitions?: NullableJsonNullValueInput | InputJsonValue
    parameters?: NullableJsonNullValueInput | InputJsonValue
    tracks?: NullableJsonNullValueInput | InputJsonValue
    keyframes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectSettingCreateInput = {
    id?: string
    key: string
    value: string
    type?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutProjectSettingsInput
  }

  export type ProjectSettingUncheckedCreateInput = {
    id?: string
    key: string
    value: string
    type?: string
    projectId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProjectSettingUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutProjectSettingsNestedInput
  }

  export type ProjectSettingUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectSettingCreateManyInput = {
    id?: string
    key: string
    value: string
    type?: string
    projectId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProjectSettingUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectSettingUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssetCreateInput = {
    id?: string
    name: string
    type: $Enums.AssetType
    filePath: string
    fileSize: number
    mimeType?: string | null
    checksum?: string | null
    width?: number | null
    height?: number | null
    duration?: number | null
    channels?: number | null
    sampleRate?: number | null
    bitRate?: number | null
    tags?: NullableJsonNullValueInput | InputJsonValue
    version?: string
    dependencies?: NullableJsonNullValueInput | InputJsonValue
    originalName?: string | null
    importedAt?: Date | string
    importSettings?: NullableJsonNullValueInput | InputJsonValue
    thumbnail?: string | null
    preview?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutAssetsInput
    folder?: FolderCreateNestedOneWithoutAssetsInput
    parent?: AssetCreateNestedOneWithoutVersionsInput
    versions?: AssetCreateNestedManyWithoutParentInput
    sceneUsages?: SceneAssetUsageCreateNestedManyWithoutAssetInput
    scriptUsages?: ScriptAssetUsageCreateNestedManyWithoutAssetInput
    materialUsages?: MaterialAssetUsageCreateNestedManyWithoutAssetInput
  }

  export type AssetUncheckedCreateInput = {
    id?: string
    name: string
    type: $Enums.AssetType
    filePath: string
    fileSize: number
    mimeType?: string | null
    checksum?: string | null
    width?: number | null
    height?: number | null
    duration?: number | null
    channels?: number | null
    sampleRate?: number | null
    bitRate?: number | null
    projectId: string
    folderId?: string | null
    tags?: NullableJsonNullValueInput | InputJsonValue
    version?: string
    parentId?: string | null
    dependencies?: NullableJsonNullValueInput | InputJsonValue
    originalName?: string | null
    importedAt?: Date | string
    importSettings?: NullableJsonNullValueInput | InputJsonValue
    thumbnail?: string | null
    preview?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    versions?: AssetUncheckedCreateNestedManyWithoutParentInput
    sceneUsages?: SceneAssetUsageUncheckedCreateNestedManyWithoutAssetInput
    scriptUsages?: ScriptAssetUsageUncheckedCreateNestedManyWithoutAssetInput
    materialUsages?: MaterialAssetUsageUncheckedCreateNestedManyWithoutAssetInput
  }

  export type AssetUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumAssetTypeFieldUpdateOperationsInput | $Enums.AssetType
    filePath?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    checksum?: NullableStringFieldUpdateOperationsInput | string | null
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    duration?: NullableFloatFieldUpdateOperationsInput | number | null
    channels?: NullableIntFieldUpdateOperationsInput | number | null
    sampleRate?: NullableIntFieldUpdateOperationsInput | number | null
    bitRate?: NullableIntFieldUpdateOperationsInput | number | null
    tags?: NullableJsonNullValueInput | InputJsonValue
    version?: StringFieldUpdateOperationsInput | string
    dependencies?: NullableJsonNullValueInput | InputJsonValue
    originalName?: NullableStringFieldUpdateOperationsInput | string | null
    importedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    importSettings?: NullableJsonNullValueInput | InputJsonValue
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    preview?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutAssetsNestedInput
    folder?: FolderUpdateOneWithoutAssetsNestedInput
    parent?: AssetUpdateOneWithoutVersionsNestedInput
    versions?: AssetUpdateManyWithoutParentNestedInput
    sceneUsages?: SceneAssetUsageUpdateManyWithoutAssetNestedInput
    scriptUsages?: ScriptAssetUsageUpdateManyWithoutAssetNestedInput
    materialUsages?: MaterialAssetUsageUpdateManyWithoutAssetNestedInput
  }

  export type AssetUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumAssetTypeFieldUpdateOperationsInput | $Enums.AssetType
    filePath?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    checksum?: NullableStringFieldUpdateOperationsInput | string | null
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    duration?: NullableFloatFieldUpdateOperationsInput | number | null
    channels?: NullableIntFieldUpdateOperationsInput | number | null
    sampleRate?: NullableIntFieldUpdateOperationsInput | number | null
    bitRate?: NullableIntFieldUpdateOperationsInput | number | null
    projectId?: StringFieldUpdateOperationsInput | string
    folderId?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableJsonNullValueInput | InputJsonValue
    version?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    dependencies?: NullableJsonNullValueInput | InputJsonValue
    originalName?: NullableStringFieldUpdateOperationsInput | string | null
    importedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    importSettings?: NullableJsonNullValueInput | InputJsonValue
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    preview?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    versions?: AssetUncheckedUpdateManyWithoutParentNestedInput
    sceneUsages?: SceneAssetUsageUncheckedUpdateManyWithoutAssetNestedInput
    scriptUsages?: ScriptAssetUsageUncheckedUpdateManyWithoutAssetNestedInput
    materialUsages?: MaterialAssetUsageUncheckedUpdateManyWithoutAssetNestedInput
  }

  export type AssetCreateManyInput = {
    id?: string
    name: string
    type: $Enums.AssetType
    filePath: string
    fileSize: number
    mimeType?: string | null
    checksum?: string | null
    width?: number | null
    height?: number | null
    duration?: number | null
    channels?: number | null
    sampleRate?: number | null
    bitRate?: number | null
    projectId: string
    folderId?: string | null
    tags?: NullableJsonNullValueInput | InputJsonValue
    version?: string
    parentId?: string | null
    dependencies?: NullableJsonNullValueInput | InputJsonValue
    originalName?: string | null
    importedAt?: Date | string
    importSettings?: NullableJsonNullValueInput | InputJsonValue
    thumbnail?: string | null
    preview?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AssetUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumAssetTypeFieldUpdateOperationsInput | $Enums.AssetType
    filePath?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    checksum?: NullableStringFieldUpdateOperationsInput | string | null
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    duration?: NullableFloatFieldUpdateOperationsInput | number | null
    channels?: NullableIntFieldUpdateOperationsInput | number | null
    sampleRate?: NullableIntFieldUpdateOperationsInput | number | null
    bitRate?: NullableIntFieldUpdateOperationsInput | number | null
    tags?: NullableJsonNullValueInput | InputJsonValue
    version?: StringFieldUpdateOperationsInput | string
    dependencies?: NullableJsonNullValueInput | InputJsonValue
    originalName?: NullableStringFieldUpdateOperationsInput | string | null
    importedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    importSettings?: NullableJsonNullValueInput | InputJsonValue
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    preview?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssetUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumAssetTypeFieldUpdateOperationsInput | $Enums.AssetType
    filePath?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    checksum?: NullableStringFieldUpdateOperationsInput | string | null
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    duration?: NullableFloatFieldUpdateOperationsInput | number | null
    channels?: NullableIntFieldUpdateOperationsInput | number | null
    sampleRate?: NullableIntFieldUpdateOperationsInput | number | null
    bitRate?: NullableIntFieldUpdateOperationsInput | number | null
    projectId?: StringFieldUpdateOperationsInput | string
    folderId?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableJsonNullValueInput | InputJsonValue
    version?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    dependencies?: NullableJsonNullValueInput | InputJsonValue
    originalName?: NullableStringFieldUpdateOperationsInput | string | null
    importedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    importSettings?: NullableJsonNullValueInput | InputJsonValue
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    preview?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SceneAssetUsageCreateInput = {
    id?: string
    usage: string
    scene: SceneCreateNestedOneWithoutAssetUsagesInput
    asset: AssetCreateNestedOneWithoutSceneUsagesInput
  }

  export type SceneAssetUsageUncheckedCreateInput = {
    id?: string
    sceneId: string
    assetId: string
    usage: string
  }

  export type SceneAssetUsageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    usage?: StringFieldUpdateOperationsInput | string
    scene?: SceneUpdateOneRequiredWithoutAssetUsagesNestedInput
    asset?: AssetUpdateOneRequiredWithoutSceneUsagesNestedInput
  }

  export type SceneAssetUsageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sceneId?: StringFieldUpdateOperationsInput | string
    assetId?: StringFieldUpdateOperationsInput | string
    usage?: StringFieldUpdateOperationsInput | string
  }

  export type SceneAssetUsageCreateManyInput = {
    id?: string
    sceneId: string
    assetId: string
    usage: string
  }

  export type SceneAssetUsageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    usage?: StringFieldUpdateOperationsInput | string
  }

  export type SceneAssetUsageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    sceneId?: StringFieldUpdateOperationsInput | string
    assetId?: StringFieldUpdateOperationsInput | string
    usage?: StringFieldUpdateOperationsInput | string
  }

  export type ScriptAssetUsageCreateInput = {
    id?: string
    usage: string
    script: ScriptCreateNestedOneWithoutAssetUsagesInput
    asset: AssetCreateNestedOneWithoutScriptUsagesInput
  }

  export type ScriptAssetUsageUncheckedCreateInput = {
    id?: string
    scriptId: string
    assetId: string
    usage: string
  }

  export type ScriptAssetUsageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    usage?: StringFieldUpdateOperationsInput | string
    script?: ScriptUpdateOneRequiredWithoutAssetUsagesNestedInput
    asset?: AssetUpdateOneRequiredWithoutScriptUsagesNestedInput
  }

  export type ScriptAssetUsageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    scriptId?: StringFieldUpdateOperationsInput | string
    assetId?: StringFieldUpdateOperationsInput | string
    usage?: StringFieldUpdateOperationsInput | string
  }

  export type ScriptAssetUsageCreateManyInput = {
    id?: string
    scriptId: string
    assetId: string
    usage: string
  }

  export type ScriptAssetUsageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    usage?: StringFieldUpdateOperationsInput | string
  }

  export type ScriptAssetUsageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    scriptId?: StringFieldUpdateOperationsInput | string
    assetId?: StringFieldUpdateOperationsInput | string
    usage?: StringFieldUpdateOperationsInput | string
  }

  export type MaterialAssetUsageCreateInput = {
    id?: string
    usage: string
    material: MaterialCreateNestedOneWithoutAssetUsagesInput
    asset: AssetCreateNestedOneWithoutMaterialUsagesInput
  }

  export type MaterialAssetUsageUncheckedCreateInput = {
    id?: string
    materialId: string
    assetId: string
    usage: string
  }

  export type MaterialAssetUsageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    usage?: StringFieldUpdateOperationsInput | string
    material?: MaterialUpdateOneRequiredWithoutAssetUsagesNestedInput
    asset?: AssetUpdateOneRequiredWithoutMaterialUsagesNestedInput
  }

  export type MaterialAssetUsageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    materialId?: StringFieldUpdateOperationsInput | string
    assetId?: StringFieldUpdateOperationsInput | string
    usage?: StringFieldUpdateOperationsInput | string
  }

  export type MaterialAssetUsageCreateManyInput = {
    id?: string
    materialId: string
    assetId: string
    usage: string
  }

  export type MaterialAssetUsageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    usage?: StringFieldUpdateOperationsInput | string
  }

  export type MaterialAssetUsageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    materialId?: StringFieldUpdateOperationsInput | string
    assetId?: StringFieldUpdateOperationsInput | string
    usage?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type ProjectListRelationFilter = {
    every?: ProjectWhereInput
    some?: ProjectWhereInput
    none?: ProjectWhereInput
  }

  export type UserSessionListRelationFilter = {
    every?: UserSessionWhereInput
    some?: UserSessionWhereInput
    none?: UserSessionWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ProjectOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserSessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    password?: SortOrder
    avatar?: SortOrder
    isActive?: SortOrder
    isVerified?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLoginAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    password?: SortOrder
    avatar?: SortOrder
    isActive?: SortOrder
    isVerified?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLoginAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    password?: SortOrder
    avatar?: SortOrder
    isActive?: SortOrder
    isVerified?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLoginAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type UserSessionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    refreshToken?: SortOrder
    expiresAt?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSessionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    refreshToken?: SortOrder
    expiresAt?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSessionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    refreshToken?: SortOrder
    expiresAt?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type SceneListRelationFilter = {
    every?: SceneWhereInput
    some?: SceneWhereInput
    none?: SceneWhereInput
  }

  export type ScriptListRelationFilter = {
    every?: ScriptWhereInput
    some?: ScriptWhereInput
    none?: ScriptWhereInput
  }

  export type MaterialListRelationFilter = {
    every?: MaterialWhereInput
    some?: MaterialWhereInput
    none?: MaterialWhereInput
  }

  export type TerrainListRelationFilter = {
    every?: TerrainWhereInput
    some?: TerrainWhereInput
    none?: TerrainWhereInput
  }

  export type AnimationListRelationFilter = {
    every?: AnimationWhereInput
    some?: AnimationWhereInput
    none?: AnimationWhereInput
  }

  export type FolderListRelationFilter = {
    every?: FolderWhereInput
    some?: FolderWhereInput
    none?: FolderWhereInput
  }

  export type ProjectSettingListRelationFilter = {
    every?: ProjectSettingWhereInput
    some?: ProjectSettingWhereInput
    none?: ProjectSettingWhereInput
  }

  export type AssetListRelationFilter = {
    every?: AssetWhereInput
    some?: AssetWhereInput
    none?: AssetWhereInput
  }

  export type SceneOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ScriptOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MaterialOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TerrainOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AnimationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FolderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProjectSettingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AssetOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProjectCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    path?: SortOrder
    version?: SortOrder
    engineVersion?: SortOrder
    userId?: SortOrder
    isPublic?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastOpened?: SortOrder
    settings?: SortOrder
  }

  export type ProjectMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    path?: SortOrder
    version?: SortOrder
    engineVersion?: SortOrder
    userId?: SortOrder
    isPublic?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastOpened?: SortOrder
  }

  export type ProjectMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    path?: SortOrder
    version?: SortOrder
    engineVersion?: SortOrder
    userId?: SortOrder
    isPublic?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastOpened?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type ProjectScalarRelationFilter = {
    is?: ProjectWhereInput
    isNot?: ProjectWhereInput
  }

  export type FolderNullableScalarRelationFilter = {
    is?: FolderWhereInput | null
    isNot?: FolderWhereInput | null
  }

  export type FolderProjectIdPathCompoundUniqueInput = {
    projectId: string
    path: string
  }

  export type FolderCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    path?: SortOrder
    parentId?: SortOrder
    projectId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FolderMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    path?: SortOrder
    parentId?: SortOrder
    projectId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FolderMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    path?: SortOrder
    parentId?: SortOrder
    projectId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SceneNodeListRelationFilter = {
    every?: SceneNodeWhereInput
    some?: SceneNodeWhereInput
    none?: SceneNodeWhereInput
  }

  export type SceneAssetUsageListRelationFilter = {
    every?: SceneAssetUsageWhereInput
    some?: SceneAssetUsageWhereInput
    none?: SceneAssetUsageWhereInput
  }

  export type SceneNodeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SceneAssetUsageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SceneProjectIdPathCompoundUniqueInput = {
    projectId: string
    path: string
  }

  export type SceneCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    path?: SortOrder
    type?: SortOrder
    projectId?: SortOrder
    description?: SortOrder
    isMain?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sceneData?: SortOrder
  }

  export type SceneMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    path?: SortOrder
    type?: SortOrder
    projectId?: SortOrder
    description?: SortOrder
    isMain?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SceneMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    path?: SortOrder
    type?: SortOrder
    projectId?: SortOrder
    description?: SortOrder
    isMain?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }
  export type JsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type SceneScalarRelationFilter = {
    is?: SceneWhereInput
    isNot?: SceneWhereInput
  }

  export type SceneNodeNullableScalarRelationFilter = {
    is?: SceneNodeWhereInput | null
    isNot?: SceneNodeWhereInput | null
  }

  export type SceneNodeCountOrderByAggregateInput = {
    id?: SortOrder
    uuid?: SortOrder
    name?: SortOrder
    type?: SortOrder
    sceneId?: SortOrder
    parentId?: SortOrder
    position?: SortOrder
    rotation?: SortOrder
    scale?: SortOrder
    visible?: SortOrder
    properties?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SceneNodeMaxOrderByAggregateInput = {
    id?: SortOrder
    uuid?: SortOrder
    name?: SortOrder
    type?: SortOrder
    sceneId?: SortOrder
    parentId?: SortOrder
    visible?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SceneNodeMinOrderByAggregateInput = {
    id?: SortOrder
    uuid?: SortOrder
    name?: SortOrder
    type?: SortOrder
    sceneId?: SortOrder
    parentId?: SortOrder
    visible?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type ScriptAssetUsageListRelationFilter = {
    every?: ScriptAssetUsageWhereInput
    some?: ScriptAssetUsageWhereInput
    none?: ScriptAssetUsageWhereInput
  }

  export type ScriptAssetUsageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ScriptProjectIdPathCompoundUniqueInput = {
    projectId: string
    path: string
  }

  export type ScriptCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    path?: SortOrder
    language?: SortOrder
    content?: SortOrder
    projectId?: SortOrder
    description?: SortOrder
    isTemplate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ScriptMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    path?: SortOrder
    language?: SortOrder
    content?: SortOrder
    projectId?: SortOrder
    description?: SortOrder
    isTemplate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ScriptMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    path?: SortOrder
    language?: SortOrder
    content?: SortOrder
    projectId?: SortOrder
    description?: SortOrder
    isTemplate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type MaterialAssetUsageListRelationFilter = {
    every?: MaterialAssetUsageWhereInput
    some?: MaterialAssetUsageWhereInput
    none?: MaterialAssetUsageWhereInput
  }

  export type MaterialAssetUsageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MaterialProjectIdNameCompoundUniqueInput = {
    projectId: string
    name: string
  }

  export type MaterialCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    projectId?: SortOrder
    albedo?: SortOrder
    roughness?: SortOrder
    metalness?: SortOrder
    emission?: SortOrder
    albedoMap?: SortOrder
    normalMap?: SortOrder
    roughnessMap?: SortOrder
    metalnessMap?: SortOrder
    emissionMap?: SortOrder
    shaderCode?: SortOrder
    shaderParams?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MaterialAvgOrderByAggregateInput = {
    roughness?: SortOrder
    metalness?: SortOrder
  }

  export type MaterialMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    projectId?: SortOrder
    albedo?: SortOrder
    roughness?: SortOrder
    metalness?: SortOrder
    emission?: SortOrder
    albedoMap?: SortOrder
    normalMap?: SortOrder
    roughnessMap?: SortOrder
    metalnessMap?: SortOrder
    emissionMap?: SortOrder
    shaderCode?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MaterialMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    projectId?: SortOrder
    albedo?: SortOrder
    roughness?: SortOrder
    metalness?: SortOrder
    emission?: SortOrder
    albedoMap?: SortOrder
    normalMap?: SortOrder
    roughnessMap?: SortOrder
    metalnessMap?: SortOrder
    emissionMap?: SortOrder
    shaderCode?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MaterialSumOrderByAggregateInput = {
    roughness?: SortOrder
    metalness?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type TerrainProjectIdNameCompoundUniqueInput = {
    projectId: string
    name: string
  }

  export type TerrainCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    projectId?: SortOrder
    width?: SortOrder
    height?: SortOrder
    scale?: SortOrder
    heightmapPath?: SortOrder
    heightmapData?: SortOrder
    textureLayers?: SortOrder
    brushSettings?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TerrainAvgOrderByAggregateInput = {
    width?: SortOrder
    height?: SortOrder
    scale?: SortOrder
  }

  export type TerrainMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    projectId?: SortOrder
    width?: SortOrder
    height?: SortOrder
    scale?: SortOrder
    heightmapPath?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TerrainMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    projectId?: SortOrder
    width?: SortOrder
    height?: SortOrder
    scale?: SortOrder
    heightmapPath?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TerrainSumOrderByAggregateInput = {
    width?: SortOrder
    height?: SortOrder
    scale?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type AnimationProjectIdNameCompoundUniqueInput = {
    projectId: string
    name: string
  }

  export type AnimationCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    projectId?: SortOrder
    duration?: SortOrder
    frameRate?: SortOrder
    states?: SortOrder
    transitions?: SortOrder
    parameters?: SortOrder
    tracks?: SortOrder
    keyframes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AnimationAvgOrderByAggregateInput = {
    duration?: SortOrder
    frameRate?: SortOrder
  }

  export type AnimationMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    projectId?: SortOrder
    duration?: SortOrder
    frameRate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AnimationMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    projectId?: SortOrder
    duration?: SortOrder
    frameRate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AnimationSumOrderByAggregateInput = {
    duration?: SortOrder
    frameRate?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type ProjectSettingProjectIdKeyCompoundUniqueInput = {
    projectId: string
    key: string
  }

  export type ProjectSettingCountOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    type?: SortOrder
    projectId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProjectSettingMaxOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    type?: SortOrder
    projectId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProjectSettingMinOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    type?: SortOrder
    projectId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumAssetTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.AssetType | EnumAssetTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AssetType[]
    notIn?: $Enums.AssetType[]
    not?: NestedEnumAssetTypeFilter<$PrismaModel> | $Enums.AssetType
  }

  export type AssetNullableScalarRelationFilter = {
    is?: AssetWhereInput | null
    isNot?: AssetWhereInput | null
  }

  export type AssetProjectIdFilePathCompoundUniqueInput = {
    projectId: string
    filePath: string
  }

  export type AssetCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    filePath?: SortOrder
    fileSize?: SortOrder
    mimeType?: SortOrder
    checksum?: SortOrder
    width?: SortOrder
    height?: SortOrder
    duration?: SortOrder
    channels?: SortOrder
    sampleRate?: SortOrder
    bitRate?: SortOrder
    projectId?: SortOrder
    folderId?: SortOrder
    tags?: SortOrder
    version?: SortOrder
    parentId?: SortOrder
    dependencies?: SortOrder
    originalName?: SortOrder
    importedAt?: SortOrder
    importSettings?: SortOrder
    thumbnail?: SortOrder
    preview?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AssetAvgOrderByAggregateInput = {
    fileSize?: SortOrder
    width?: SortOrder
    height?: SortOrder
    duration?: SortOrder
    channels?: SortOrder
    sampleRate?: SortOrder
    bitRate?: SortOrder
  }

  export type AssetMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    filePath?: SortOrder
    fileSize?: SortOrder
    mimeType?: SortOrder
    checksum?: SortOrder
    width?: SortOrder
    height?: SortOrder
    duration?: SortOrder
    channels?: SortOrder
    sampleRate?: SortOrder
    bitRate?: SortOrder
    projectId?: SortOrder
    folderId?: SortOrder
    version?: SortOrder
    parentId?: SortOrder
    originalName?: SortOrder
    importedAt?: SortOrder
    thumbnail?: SortOrder
    preview?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AssetMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    filePath?: SortOrder
    fileSize?: SortOrder
    mimeType?: SortOrder
    checksum?: SortOrder
    width?: SortOrder
    height?: SortOrder
    duration?: SortOrder
    channels?: SortOrder
    sampleRate?: SortOrder
    bitRate?: SortOrder
    projectId?: SortOrder
    folderId?: SortOrder
    version?: SortOrder
    parentId?: SortOrder
    originalName?: SortOrder
    importedAt?: SortOrder
    thumbnail?: SortOrder
    preview?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AssetSumOrderByAggregateInput = {
    fileSize?: SortOrder
    width?: SortOrder
    height?: SortOrder
    duration?: SortOrder
    channels?: SortOrder
    sampleRate?: SortOrder
    bitRate?: SortOrder
  }

  export type EnumAssetTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AssetType | EnumAssetTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AssetType[]
    notIn?: $Enums.AssetType[]
    not?: NestedEnumAssetTypeWithAggregatesFilter<$PrismaModel> | $Enums.AssetType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAssetTypeFilter<$PrismaModel>
    _max?: NestedEnumAssetTypeFilter<$PrismaModel>
  }

  export type AssetScalarRelationFilter = {
    is?: AssetWhereInput
    isNot?: AssetWhereInput
  }

  export type SceneAssetUsageSceneIdAssetIdCompoundUniqueInput = {
    sceneId: string
    assetId: string
  }

  export type SceneAssetUsageCountOrderByAggregateInput = {
    id?: SortOrder
    sceneId?: SortOrder
    assetId?: SortOrder
    usage?: SortOrder
  }

  export type SceneAssetUsageMaxOrderByAggregateInput = {
    id?: SortOrder
    sceneId?: SortOrder
    assetId?: SortOrder
    usage?: SortOrder
  }

  export type SceneAssetUsageMinOrderByAggregateInput = {
    id?: SortOrder
    sceneId?: SortOrder
    assetId?: SortOrder
    usage?: SortOrder
  }

  export type ScriptScalarRelationFilter = {
    is?: ScriptWhereInput
    isNot?: ScriptWhereInput
  }

  export type ScriptAssetUsageScriptIdAssetIdCompoundUniqueInput = {
    scriptId: string
    assetId: string
  }

  export type ScriptAssetUsageCountOrderByAggregateInput = {
    id?: SortOrder
    scriptId?: SortOrder
    assetId?: SortOrder
    usage?: SortOrder
  }

  export type ScriptAssetUsageMaxOrderByAggregateInput = {
    id?: SortOrder
    scriptId?: SortOrder
    assetId?: SortOrder
    usage?: SortOrder
  }

  export type ScriptAssetUsageMinOrderByAggregateInput = {
    id?: SortOrder
    scriptId?: SortOrder
    assetId?: SortOrder
    usage?: SortOrder
  }

  export type MaterialScalarRelationFilter = {
    is?: MaterialWhereInput
    isNot?: MaterialWhereInput
  }

  export type MaterialAssetUsageMaterialIdAssetIdCompoundUniqueInput = {
    materialId: string
    assetId: string
  }

  export type MaterialAssetUsageCountOrderByAggregateInput = {
    id?: SortOrder
    materialId?: SortOrder
    assetId?: SortOrder
    usage?: SortOrder
  }

  export type MaterialAssetUsageMaxOrderByAggregateInput = {
    id?: SortOrder
    materialId?: SortOrder
    assetId?: SortOrder
    usage?: SortOrder
  }

  export type MaterialAssetUsageMinOrderByAggregateInput = {
    id?: SortOrder
    materialId?: SortOrder
    assetId?: SortOrder
    usage?: SortOrder
  }

  export type ProjectCreateNestedManyWithoutUserInput = {
    create?: XOR<ProjectCreateWithoutUserInput, ProjectUncheckedCreateWithoutUserInput> | ProjectCreateWithoutUserInput[] | ProjectUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutUserInput | ProjectCreateOrConnectWithoutUserInput[]
    createMany?: ProjectCreateManyUserInputEnvelope
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
  }

  export type UserSessionCreateNestedManyWithoutUserInput = {
    create?: XOR<UserSessionCreateWithoutUserInput, UserSessionUncheckedCreateWithoutUserInput> | UserSessionCreateWithoutUserInput[] | UserSessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserSessionCreateOrConnectWithoutUserInput | UserSessionCreateOrConnectWithoutUserInput[]
    createMany?: UserSessionCreateManyUserInputEnvelope
    connect?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
  }

  export type ProjectUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ProjectCreateWithoutUserInput, ProjectUncheckedCreateWithoutUserInput> | ProjectCreateWithoutUserInput[] | ProjectUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutUserInput | ProjectCreateOrConnectWithoutUserInput[]
    createMany?: ProjectCreateManyUserInputEnvelope
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
  }

  export type UserSessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserSessionCreateWithoutUserInput, UserSessionUncheckedCreateWithoutUserInput> | UserSessionCreateWithoutUserInput[] | UserSessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserSessionCreateOrConnectWithoutUserInput | UserSessionCreateOrConnectWithoutUserInput[]
    createMany?: UserSessionCreateManyUserInputEnvelope
    connect?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type ProjectUpdateManyWithoutUserNestedInput = {
    create?: XOR<ProjectCreateWithoutUserInput, ProjectUncheckedCreateWithoutUserInput> | ProjectCreateWithoutUserInput[] | ProjectUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutUserInput | ProjectCreateOrConnectWithoutUserInput[]
    upsert?: ProjectUpsertWithWhereUniqueWithoutUserInput | ProjectUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ProjectCreateManyUserInputEnvelope
    set?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    disconnect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    delete?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    update?: ProjectUpdateWithWhereUniqueWithoutUserInput | ProjectUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ProjectUpdateManyWithWhereWithoutUserInput | ProjectUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
  }

  export type UserSessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserSessionCreateWithoutUserInput, UserSessionUncheckedCreateWithoutUserInput> | UserSessionCreateWithoutUserInput[] | UserSessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserSessionCreateOrConnectWithoutUserInput | UserSessionCreateOrConnectWithoutUserInput[]
    upsert?: UserSessionUpsertWithWhereUniqueWithoutUserInput | UserSessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserSessionCreateManyUserInputEnvelope
    set?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    disconnect?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    delete?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    connect?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    update?: UserSessionUpdateWithWhereUniqueWithoutUserInput | UserSessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserSessionUpdateManyWithWhereWithoutUserInput | UserSessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserSessionScalarWhereInput | UserSessionScalarWhereInput[]
  }

  export type ProjectUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ProjectCreateWithoutUserInput, ProjectUncheckedCreateWithoutUserInput> | ProjectCreateWithoutUserInput[] | ProjectUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutUserInput | ProjectCreateOrConnectWithoutUserInput[]
    upsert?: ProjectUpsertWithWhereUniqueWithoutUserInput | ProjectUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ProjectCreateManyUserInputEnvelope
    set?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    disconnect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    delete?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    update?: ProjectUpdateWithWhereUniqueWithoutUserInput | ProjectUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ProjectUpdateManyWithWhereWithoutUserInput | ProjectUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
  }

  export type UserSessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserSessionCreateWithoutUserInput, UserSessionUncheckedCreateWithoutUserInput> | UserSessionCreateWithoutUserInput[] | UserSessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserSessionCreateOrConnectWithoutUserInput | UserSessionCreateOrConnectWithoutUserInput[]
    upsert?: UserSessionUpsertWithWhereUniqueWithoutUserInput | UserSessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserSessionCreateManyUserInputEnvelope
    set?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    disconnect?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    delete?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    connect?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    update?: UserSessionUpdateWithWhereUniqueWithoutUserInput | UserSessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserSessionUpdateManyWithWhereWithoutUserInput | UserSessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserSessionScalarWhereInput | UserSessionScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutSessionsInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    upsert?: UserUpsertWithoutSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSessionsInput, UserUpdateWithoutSessionsInput>, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserCreateNestedOneWithoutProjectsInput = {
    create?: XOR<UserCreateWithoutProjectsInput, UserUncheckedCreateWithoutProjectsInput>
    connectOrCreate?: UserCreateOrConnectWithoutProjectsInput
    connect?: UserWhereUniqueInput
  }

  export type SceneCreateNestedManyWithoutProjectInput = {
    create?: XOR<SceneCreateWithoutProjectInput, SceneUncheckedCreateWithoutProjectInput> | SceneCreateWithoutProjectInput[] | SceneUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: SceneCreateOrConnectWithoutProjectInput | SceneCreateOrConnectWithoutProjectInput[]
    createMany?: SceneCreateManyProjectInputEnvelope
    connect?: SceneWhereUniqueInput | SceneWhereUniqueInput[]
  }

  export type ScriptCreateNestedManyWithoutProjectInput = {
    create?: XOR<ScriptCreateWithoutProjectInput, ScriptUncheckedCreateWithoutProjectInput> | ScriptCreateWithoutProjectInput[] | ScriptUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ScriptCreateOrConnectWithoutProjectInput | ScriptCreateOrConnectWithoutProjectInput[]
    createMany?: ScriptCreateManyProjectInputEnvelope
    connect?: ScriptWhereUniqueInput | ScriptWhereUniqueInput[]
  }

  export type MaterialCreateNestedManyWithoutProjectInput = {
    create?: XOR<MaterialCreateWithoutProjectInput, MaterialUncheckedCreateWithoutProjectInput> | MaterialCreateWithoutProjectInput[] | MaterialUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: MaterialCreateOrConnectWithoutProjectInput | MaterialCreateOrConnectWithoutProjectInput[]
    createMany?: MaterialCreateManyProjectInputEnvelope
    connect?: MaterialWhereUniqueInput | MaterialWhereUniqueInput[]
  }

  export type TerrainCreateNestedManyWithoutProjectInput = {
    create?: XOR<TerrainCreateWithoutProjectInput, TerrainUncheckedCreateWithoutProjectInput> | TerrainCreateWithoutProjectInput[] | TerrainUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: TerrainCreateOrConnectWithoutProjectInput | TerrainCreateOrConnectWithoutProjectInput[]
    createMany?: TerrainCreateManyProjectInputEnvelope
    connect?: TerrainWhereUniqueInput | TerrainWhereUniqueInput[]
  }

  export type AnimationCreateNestedManyWithoutProjectInput = {
    create?: XOR<AnimationCreateWithoutProjectInput, AnimationUncheckedCreateWithoutProjectInput> | AnimationCreateWithoutProjectInput[] | AnimationUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: AnimationCreateOrConnectWithoutProjectInput | AnimationCreateOrConnectWithoutProjectInput[]
    createMany?: AnimationCreateManyProjectInputEnvelope
    connect?: AnimationWhereUniqueInput | AnimationWhereUniqueInput[]
  }

  export type FolderCreateNestedManyWithoutProjectInput = {
    create?: XOR<FolderCreateWithoutProjectInput, FolderUncheckedCreateWithoutProjectInput> | FolderCreateWithoutProjectInput[] | FolderUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: FolderCreateOrConnectWithoutProjectInput | FolderCreateOrConnectWithoutProjectInput[]
    createMany?: FolderCreateManyProjectInputEnvelope
    connect?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
  }

  export type ProjectSettingCreateNestedManyWithoutProjectInput = {
    create?: XOR<ProjectSettingCreateWithoutProjectInput, ProjectSettingUncheckedCreateWithoutProjectInput> | ProjectSettingCreateWithoutProjectInput[] | ProjectSettingUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ProjectSettingCreateOrConnectWithoutProjectInput | ProjectSettingCreateOrConnectWithoutProjectInput[]
    createMany?: ProjectSettingCreateManyProjectInputEnvelope
    connect?: ProjectSettingWhereUniqueInput | ProjectSettingWhereUniqueInput[]
  }

  export type AssetCreateNestedManyWithoutProjectInput = {
    create?: XOR<AssetCreateWithoutProjectInput, AssetUncheckedCreateWithoutProjectInput> | AssetCreateWithoutProjectInput[] | AssetUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: AssetCreateOrConnectWithoutProjectInput | AssetCreateOrConnectWithoutProjectInput[]
    createMany?: AssetCreateManyProjectInputEnvelope
    connect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
  }

  export type SceneUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<SceneCreateWithoutProjectInput, SceneUncheckedCreateWithoutProjectInput> | SceneCreateWithoutProjectInput[] | SceneUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: SceneCreateOrConnectWithoutProjectInput | SceneCreateOrConnectWithoutProjectInput[]
    createMany?: SceneCreateManyProjectInputEnvelope
    connect?: SceneWhereUniqueInput | SceneWhereUniqueInput[]
  }

  export type ScriptUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<ScriptCreateWithoutProjectInput, ScriptUncheckedCreateWithoutProjectInput> | ScriptCreateWithoutProjectInput[] | ScriptUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ScriptCreateOrConnectWithoutProjectInput | ScriptCreateOrConnectWithoutProjectInput[]
    createMany?: ScriptCreateManyProjectInputEnvelope
    connect?: ScriptWhereUniqueInput | ScriptWhereUniqueInput[]
  }

  export type MaterialUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<MaterialCreateWithoutProjectInput, MaterialUncheckedCreateWithoutProjectInput> | MaterialCreateWithoutProjectInput[] | MaterialUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: MaterialCreateOrConnectWithoutProjectInput | MaterialCreateOrConnectWithoutProjectInput[]
    createMany?: MaterialCreateManyProjectInputEnvelope
    connect?: MaterialWhereUniqueInput | MaterialWhereUniqueInput[]
  }

  export type TerrainUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<TerrainCreateWithoutProjectInput, TerrainUncheckedCreateWithoutProjectInput> | TerrainCreateWithoutProjectInput[] | TerrainUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: TerrainCreateOrConnectWithoutProjectInput | TerrainCreateOrConnectWithoutProjectInput[]
    createMany?: TerrainCreateManyProjectInputEnvelope
    connect?: TerrainWhereUniqueInput | TerrainWhereUniqueInput[]
  }

  export type AnimationUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<AnimationCreateWithoutProjectInput, AnimationUncheckedCreateWithoutProjectInput> | AnimationCreateWithoutProjectInput[] | AnimationUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: AnimationCreateOrConnectWithoutProjectInput | AnimationCreateOrConnectWithoutProjectInput[]
    createMany?: AnimationCreateManyProjectInputEnvelope
    connect?: AnimationWhereUniqueInput | AnimationWhereUniqueInput[]
  }

  export type FolderUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<FolderCreateWithoutProjectInput, FolderUncheckedCreateWithoutProjectInput> | FolderCreateWithoutProjectInput[] | FolderUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: FolderCreateOrConnectWithoutProjectInput | FolderCreateOrConnectWithoutProjectInput[]
    createMany?: FolderCreateManyProjectInputEnvelope
    connect?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
  }

  export type ProjectSettingUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<ProjectSettingCreateWithoutProjectInput, ProjectSettingUncheckedCreateWithoutProjectInput> | ProjectSettingCreateWithoutProjectInput[] | ProjectSettingUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ProjectSettingCreateOrConnectWithoutProjectInput | ProjectSettingCreateOrConnectWithoutProjectInput[]
    createMany?: ProjectSettingCreateManyProjectInputEnvelope
    connect?: ProjectSettingWhereUniqueInput | ProjectSettingWhereUniqueInput[]
  }

  export type AssetUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<AssetCreateWithoutProjectInput, AssetUncheckedCreateWithoutProjectInput> | AssetCreateWithoutProjectInput[] | AssetUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: AssetCreateOrConnectWithoutProjectInput | AssetCreateOrConnectWithoutProjectInput[]
    createMany?: AssetCreateManyProjectInputEnvelope
    connect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutProjectsNestedInput = {
    create?: XOR<UserCreateWithoutProjectsInput, UserUncheckedCreateWithoutProjectsInput>
    connectOrCreate?: UserCreateOrConnectWithoutProjectsInput
    upsert?: UserUpsertWithoutProjectsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutProjectsInput, UserUpdateWithoutProjectsInput>, UserUncheckedUpdateWithoutProjectsInput>
  }

  export type SceneUpdateManyWithoutProjectNestedInput = {
    create?: XOR<SceneCreateWithoutProjectInput, SceneUncheckedCreateWithoutProjectInput> | SceneCreateWithoutProjectInput[] | SceneUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: SceneCreateOrConnectWithoutProjectInput | SceneCreateOrConnectWithoutProjectInput[]
    upsert?: SceneUpsertWithWhereUniqueWithoutProjectInput | SceneUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: SceneCreateManyProjectInputEnvelope
    set?: SceneWhereUniqueInput | SceneWhereUniqueInput[]
    disconnect?: SceneWhereUniqueInput | SceneWhereUniqueInput[]
    delete?: SceneWhereUniqueInput | SceneWhereUniqueInput[]
    connect?: SceneWhereUniqueInput | SceneWhereUniqueInput[]
    update?: SceneUpdateWithWhereUniqueWithoutProjectInput | SceneUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: SceneUpdateManyWithWhereWithoutProjectInput | SceneUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: SceneScalarWhereInput | SceneScalarWhereInput[]
  }

  export type ScriptUpdateManyWithoutProjectNestedInput = {
    create?: XOR<ScriptCreateWithoutProjectInput, ScriptUncheckedCreateWithoutProjectInput> | ScriptCreateWithoutProjectInput[] | ScriptUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ScriptCreateOrConnectWithoutProjectInput | ScriptCreateOrConnectWithoutProjectInput[]
    upsert?: ScriptUpsertWithWhereUniqueWithoutProjectInput | ScriptUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: ScriptCreateManyProjectInputEnvelope
    set?: ScriptWhereUniqueInput | ScriptWhereUniqueInput[]
    disconnect?: ScriptWhereUniqueInput | ScriptWhereUniqueInput[]
    delete?: ScriptWhereUniqueInput | ScriptWhereUniqueInput[]
    connect?: ScriptWhereUniqueInput | ScriptWhereUniqueInput[]
    update?: ScriptUpdateWithWhereUniqueWithoutProjectInput | ScriptUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: ScriptUpdateManyWithWhereWithoutProjectInput | ScriptUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: ScriptScalarWhereInput | ScriptScalarWhereInput[]
  }

  export type MaterialUpdateManyWithoutProjectNestedInput = {
    create?: XOR<MaterialCreateWithoutProjectInput, MaterialUncheckedCreateWithoutProjectInput> | MaterialCreateWithoutProjectInput[] | MaterialUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: MaterialCreateOrConnectWithoutProjectInput | MaterialCreateOrConnectWithoutProjectInput[]
    upsert?: MaterialUpsertWithWhereUniqueWithoutProjectInput | MaterialUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: MaterialCreateManyProjectInputEnvelope
    set?: MaterialWhereUniqueInput | MaterialWhereUniqueInput[]
    disconnect?: MaterialWhereUniqueInput | MaterialWhereUniqueInput[]
    delete?: MaterialWhereUniqueInput | MaterialWhereUniqueInput[]
    connect?: MaterialWhereUniqueInput | MaterialWhereUniqueInput[]
    update?: MaterialUpdateWithWhereUniqueWithoutProjectInput | MaterialUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: MaterialUpdateManyWithWhereWithoutProjectInput | MaterialUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: MaterialScalarWhereInput | MaterialScalarWhereInput[]
  }

  export type TerrainUpdateManyWithoutProjectNestedInput = {
    create?: XOR<TerrainCreateWithoutProjectInput, TerrainUncheckedCreateWithoutProjectInput> | TerrainCreateWithoutProjectInput[] | TerrainUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: TerrainCreateOrConnectWithoutProjectInput | TerrainCreateOrConnectWithoutProjectInput[]
    upsert?: TerrainUpsertWithWhereUniqueWithoutProjectInput | TerrainUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: TerrainCreateManyProjectInputEnvelope
    set?: TerrainWhereUniqueInput | TerrainWhereUniqueInput[]
    disconnect?: TerrainWhereUniqueInput | TerrainWhereUniqueInput[]
    delete?: TerrainWhereUniqueInput | TerrainWhereUniqueInput[]
    connect?: TerrainWhereUniqueInput | TerrainWhereUniqueInput[]
    update?: TerrainUpdateWithWhereUniqueWithoutProjectInput | TerrainUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: TerrainUpdateManyWithWhereWithoutProjectInput | TerrainUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: TerrainScalarWhereInput | TerrainScalarWhereInput[]
  }

  export type AnimationUpdateManyWithoutProjectNestedInput = {
    create?: XOR<AnimationCreateWithoutProjectInput, AnimationUncheckedCreateWithoutProjectInput> | AnimationCreateWithoutProjectInput[] | AnimationUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: AnimationCreateOrConnectWithoutProjectInput | AnimationCreateOrConnectWithoutProjectInput[]
    upsert?: AnimationUpsertWithWhereUniqueWithoutProjectInput | AnimationUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: AnimationCreateManyProjectInputEnvelope
    set?: AnimationWhereUniqueInput | AnimationWhereUniqueInput[]
    disconnect?: AnimationWhereUniqueInput | AnimationWhereUniqueInput[]
    delete?: AnimationWhereUniqueInput | AnimationWhereUniqueInput[]
    connect?: AnimationWhereUniqueInput | AnimationWhereUniqueInput[]
    update?: AnimationUpdateWithWhereUniqueWithoutProjectInput | AnimationUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: AnimationUpdateManyWithWhereWithoutProjectInput | AnimationUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: AnimationScalarWhereInput | AnimationScalarWhereInput[]
  }

  export type FolderUpdateManyWithoutProjectNestedInput = {
    create?: XOR<FolderCreateWithoutProjectInput, FolderUncheckedCreateWithoutProjectInput> | FolderCreateWithoutProjectInput[] | FolderUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: FolderCreateOrConnectWithoutProjectInput | FolderCreateOrConnectWithoutProjectInput[]
    upsert?: FolderUpsertWithWhereUniqueWithoutProjectInput | FolderUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: FolderCreateManyProjectInputEnvelope
    set?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
    disconnect?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
    delete?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
    connect?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
    update?: FolderUpdateWithWhereUniqueWithoutProjectInput | FolderUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: FolderUpdateManyWithWhereWithoutProjectInput | FolderUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: FolderScalarWhereInput | FolderScalarWhereInput[]
  }

  export type ProjectSettingUpdateManyWithoutProjectNestedInput = {
    create?: XOR<ProjectSettingCreateWithoutProjectInput, ProjectSettingUncheckedCreateWithoutProjectInput> | ProjectSettingCreateWithoutProjectInput[] | ProjectSettingUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ProjectSettingCreateOrConnectWithoutProjectInput | ProjectSettingCreateOrConnectWithoutProjectInput[]
    upsert?: ProjectSettingUpsertWithWhereUniqueWithoutProjectInput | ProjectSettingUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: ProjectSettingCreateManyProjectInputEnvelope
    set?: ProjectSettingWhereUniqueInput | ProjectSettingWhereUniqueInput[]
    disconnect?: ProjectSettingWhereUniqueInput | ProjectSettingWhereUniqueInput[]
    delete?: ProjectSettingWhereUniqueInput | ProjectSettingWhereUniqueInput[]
    connect?: ProjectSettingWhereUniqueInput | ProjectSettingWhereUniqueInput[]
    update?: ProjectSettingUpdateWithWhereUniqueWithoutProjectInput | ProjectSettingUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: ProjectSettingUpdateManyWithWhereWithoutProjectInput | ProjectSettingUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: ProjectSettingScalarWhereInput | ProjectSettingScalarWhereInput[]
  }

  export type AssetUpdateManyWithoutProjectNestedInput = {
    create?: XOR<AssetCreateWithoutProjectInput, AssetUncheckedCreateWithoutProjectInput> | AssetCreateWithoutProjectInput[] | AssetUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: AssetCreateOrConnectWithoutProjectInput | AssetCreateOrConnectWithoutProjectInput[]
    upsert?: AssetUpsertWithWhereUniqueWithoutProjectInput | AssetUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: AssetCreateManyProjectInputEnvelope
    set?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    disconnect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    delete?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    connect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    update?: AssetUpdateWithWhereUniqueWithoutProjectInput | AssetUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: AssetUpdateManyWithWhereWithoutProjectInput | AssetUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: AssetScalarWhereInput | AssetScalarWhereInput[]
  }

  export type SceneUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<SceneCreateWithoutProjectInput, SceneUncheckedCreateWithoutProjectInput> | SceneCreateWithoutProjectInput[] | SceneUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: SceneCreateOrConnectWithoutProjectInput | SceneCreateOrConnectWithoutProjectInput[]
    upsert?: SceneUpsertWithWhereUniqueWithoutProjectInput | SceneUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: SceneCreateManyProjectInputEnvelope
    set?: SceneWhereUniqueInput | SceneWhereUniqueInput[]
    disconnect?: SceneWhereUniqueInput | SceneWhereUniqueInput[]
    delete?: SceneWhereUniqueInput | SceneWhereUniqueInput[]
    connect?: SceneWhereUniqueInput | SceneWhereUniqueInput[]
    update?: SceneUpdateWithWhereUniqueWithoutProjectInput | SceneUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: SceneUpdateManyWithWhereWithoutProjectInput | SceneUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: SceneScalarWhereInput | SceneScalarWhereInput[]
  }

  export type ScriptUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<ScriptCreateWithoutProjectInput, ScriptUncheckedCreateWithoutProjectInput> | ScriptCreateWithoutProjectInput[] | ScriptUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ScriptCreateOrConnectWithoutProjectInput | ScriptCreateOrConnectWithoutProjectInput[]
    upsert?: ScriptUpsertWithWhereUniqueWithoutProjectInput | ScriptUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: ScriptCreateManyProjectInputEnvelope
    set?: ScriptWhereUniqueInput | ScriptWhereUniqueInput[]
    disconnect?: ScriptWhereUniqueInput | ScriptWhereUniqueInput[]
    delete?: ScriptWhereUniqueInput | ScriptWhereUniqueInput[]
    connect?: ScriptWhereUniqueInput | ScriptWhereUniqueInput[]
    update?: ScriptUpdateWithWhereUniqueWithoutProjectInput | ScriptUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: ScriptUpdateManyWithWhereWithoutProjectInput | ScriptUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: ScriptScalarWhereInput | ScriptScalarWhereInput[]
  }

  export type MaterialUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<MaterialCreateWithoutProjectInput, MaterialUncheckedCreateWithoutProjectInput> | MaterialCreateWithoutProjectInput[] | MaterialUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: MaterialCreateOrConnectWithoutProjectInput | MaterialCreateOrConnectWithoutProjectInput[]
    upsert?: MaterialUpsertWithWhereUniqueWithoutProjectInput | MaterialUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: MaterialCreateManyProjectInputEnvelope
    set?: MaterialWhereUniqueInput | MaterialWhereUniqueInput[]
    disconnect?: MaterialWhereUniqueInput | MaterialWhereUniqueInput[]
    delete?: MaterialWhereUniqueInput | MaterialWhereUniqueInput[]
    connect?: MaterialWhereUniqueInput | MaterialWhereUniqueInput[]
    update?: MaterialUpdateWithWhereUniqueWithoutProjectInput | MaterialUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: MaterialUpdateManyWithWhereWithoutProjectInput | MaterialUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: MaterialScalarWhereInput | MaterialScalarWhereInput[]
  }

  export type TerrainUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<TerrainCreateWithoutProjectInput, TerrainUncheckedCreateWithoutProjectInput> | TerrainCreateWithoutProjectInput[] | TerrainUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: TerrainCreateOrConnectWithoutProjectInput | TerrainCreateOrConnectWithoutProjectInput[]
    upsert?: TerrainUpsertWithWhereUniqueWithoutProjectInput | TerrainUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: TerrainCreateManyProjectInputEnvelope
    set?: TerrainWhereUniqueInput | TerrainWhereUniqueInput[]
    disconnect?: TerrainWhereUniqueInput | TerrainWhereUniqueInput[]
    delete?: TerrainWhereUniqueInput | TerrainWhereUniqueInput[]
    connect?: TerrainWhereUniqueInput | TerrainWhereUniqueInput[]
    update?: TerrainUpdateWithWhereUniqueWithoutProjectInput | TerrainUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: TerrainUpdateManyWithWhereWithoutProjectInput | TerrainUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: TerrainScalarWhereInput | TerrainScalarWhereInput[]
  }

  export type AnimationUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<AnimationCreateWithoutProjectInput, AnimationUncheckedCreateWithoutProjectInput> | AnimationCreateWithoutProjectInput[] | AnimationUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: AnimationCreateOrConnectWithoutProjectInput | AnimationCreateOrConnectWithoutProjectInput[]
    upsert?: AnimationUpsertWithWhereUniqueWithoutProjectInput | AnimationUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: AnimationCreateManyProjectInputEnvelope
    set?: AnimationWhereUniqueInput | AnimationWhereUniqueInput[]
    disconnect?: AnimationWhereUniqueInput | AnimationWhereUniqueInput[]
    delete?: AnimationWhereUniqueInput | AnimationWhereUniqueInput[]
    connect?: AnimationWhereUniqueInput | AnimationWhereUniqueInput[]
    update?: AnimationUpdateWithWhereUniqueWithoutProjectInput | AnimationUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: AnimationUpdateManyWithWhereWithoutProjectInput | AnimationUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: AnimationScalarWhereInput | AnimationScalarWhereInput[]
  }

  export type FolderUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<FolderCreateWithoutProjectInput, FolderUncheckedCreateWithoutProjectInput> | FolderCreateWithoutProjectInput[] | FolderUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: FolderCreateOrConnectWithoutProjectInput | FolderCreateOrConnectWithoutProjectInput[]
    upsert?: FolderUpsertWithWhereUniqueWithoutProjectInput | FolderUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: FolderCreateManyProjectInputEnvelope
    set?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
    disconnect?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
    delete?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
    connect?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
    update?: FolderUpdateWithWhereUniqueWithoutProjectInput | FolderUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: FolderUpdateManyWithWhereWithoutProjectInput | FolderUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: FolderScalarWhereInput | FolderScalarWhereInput[]
  }

  export type ProjectSettingUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<ProjectSettingCreateWithoutProjectInput, ProjectSettingUncheckedCreateWithoutProjectInput> | ProjectSettingCreateWithoutProjectInput[] | ProjectSettingUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ProjectSettingCreateOrConnectWithoutProjectInput | ProjectSettingCreateOrConnectWithoutProjectInput[]
    upsert?: ProjectSettingUpsertWithWhereUniqueWithoutProjectInput | ProjectSettingUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: ProjectSettingCreateManyProjectInputEnvelope
    set?: ProjectSettingWhereUniqueInput | ProjectSettingWhereUniqueInput[]
    disconnect?: ProjectSettingWhereUniqueInput | ProjectSettingWhereUniqueInput[]
    delete?: ProjectSettingWhereUniqueInput | ProjectSettingWhereUniqueInput[]
    connect?: ProjectSettingWhereUniqueInput | ProjectSettingWhereUniqueInput[]
    update?: ProjectSettingUpdateWithWhereUniqueWithoutProjectInput | ProjectSettingUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: ProjectSettingUpdateManyWithWhereWithoutProjectInput | ProjectSettingUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: ProjectSettingScalarWhereInput | ProjectSettingScalarWhereInput[]
  }

  export type AssetUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<AssetCreateWithoutProjectInput, AssetUncheckedCreateWithoutProjectInput> | AssetCreateWithoutProjectInput[] | AssetUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: AssetCreateOrConnectWithoutProjectInput | AssetCreateOrConnectWithoutProjectInput[]
    upsert?: AssetUpsertWithWhereUniqueWithoutProjectInput | AssetUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: AssetCreateManyProjectInputEnvelope
    set?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    disconnect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    delete?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    connect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    update?: AssetUpdateWithWhereUniqueWithoutProjectInput | AssetUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: AssetUpdateManyWithWhereWithoutProjectInput | AssetUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: AssetScalarWhereInput | AssetScalarWhereInput[]
  }

  export type ProjectCreateNestedOneWithoutFoldersInput = {
    create?: XOR<ProjectCreateWithoutFoldersInput, ProjectUncheckedCreateWithoutFoldersInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutFoldersInput
    connect?: ProjectWhereUniqueInput
  }

  export type FolderCreateNestedOneWithoutChildrenInput = {
    create?: XOR<FolderCreateWithoutChildrenInput, FolderUncheckedCreateWithoutChildrenInput>
    connectOrCreate?: FolderCreateOrConnectWithoutChildrenInput
    connect?: FolderWhereUniqueInput
  }

  export type FolderCreateNestedManyWithoutParentInput = {
    create?: XOR<FolderCreateWithoutParentInput, FolderUncheckedCreateWithoutParentInput> | FolderCreateWithoutParentInput[] | FolderUncheckedCreateWithoutParentInput[]
    connectOrCreate?: FolderCreateOrConnectWithoutParentInput | FolderCreateOrConnectWithoutParentInput[]
    createMany?: FolderCreateManyParentInputEnvelope
    connect?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
  }

  export type AssetCreateNestedManyWithoutFolderInput = {
    create?: XOR<AssetCreateWithoutFolderInput, AssetUncheckedCreateWithoutFolderInput> | AssetCreateWithoutFolderInput[] | AssetUncheckedCreateWithoutFolderInput[]
    connectOrCreate?: AssetCreateOrConnectWithoutFolderInput | AssetCreateOrConnectWithoutFolderInput[]
    createMany?: AssetCreateManyFolderInputEnvelope
    connect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
  }

  export type FolderUncheckedCreateNestedManyWithoutParentInput = {
    create?: XOR<FolderCreateWithoutParentInput, FolderUncheckedCreateWithoutParentInput> | FolderCreateWithoutParentInput[] | FolderUncheckedCreateWithoutParentInput[]
    connectOrCreate?: FolderCreateOrConnectWithoutParentInput | FolderCreateOrConnectWithoutParentInput[]
    createMany?: FolderCreateManyParentInputEnvelope
    connect?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
  }

  export type AssetUncheckedCreateNestedManyWithoutFolderInput = {
    create?: XOR<AssetCreateWithoutFolderInput, AssetUncheckedCreateWithoutFolderInput> | AssetCreateWithoutFolderInput[] | AssetUncheckedCreateWithoutFolderInput[]
    connectOrCreate?: AssetCreateOrConnectWithoutFolderInput | AssetCreateOrConnectWithoutFolderInput[]
    createMany?: AssetCreateManyFolderInputEnvelope
    connect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
  }

  export type ProjectUpdateOneRequiredWithoutFoldersNestedInput = {
    create?: XOR<ProjectCreateWithoutFoldersInput, ProjectUncheckedCreateWithoutFoldersInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutFoldersInput
    upsert?: ProjectUpsertWithoutFoldersInput
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutFoldersInput, ProjectUpdateWithoutFoldersInput>, ProjectUncheckedUpdateWithoutFoldersInput>
  }

  export type FolderUpdateOneWithoutChildrenNestedInput = {
    create?: XOR<FolderCreateWithoutChildrenInput, FolderUncheckedCreateWithoutChildrenInput>
    connectOrCreate?: FolderCreateOrConnectWithoutChildrenInput
    upsert?: FolderUpsertWithoutChildrenInput
    disconnect?: FolderWhereInput | boolean
    delete?: FolderWhereInput | boolean
    connect?: FolderWhereUniqueInput
    update?: XOR<XOR<FolderUpdateToOneWithWhereWithoutChildrenInput, FolderUpdateWithoutChildrenInput>, FolderUncheckedUpdateWithoutChildrenInput>
  }

  export type FolderUpdateManyWithoutParentNestedInput = {
    create?: XOR<FolderCreateWithoutParentInput, FolderUncheckedCreateWithoutParentInput> | FolderCreateWithoutParentInput[] | FolderUncheckedCreateWithoutParentInput[]
    connectOrCreate?: FolderCreateOrConnectWithoutParentInput | FolderCreateOrConnectWithoutParentInput[]
    upsert?: FolderUpsertWithWhereUniqueWithoutParentInput | FolderUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: FolderCreateManyParentInputEnvelope
    set?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
    disconnect?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
    delete?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
    connect?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
    update?: FolderUpdateWithWhereUniqueWithoutParentInput | FolderUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: FolderUpdateManyWithWhereWithoutParentInput | FolderUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: FolderScalarWhereInput | FolderScalarWhereInput[]
  }

  export type AssetUpdateManyWithoutFolderNestedInput = {
    create?: XOR<AssetCreateWithoutFolderInput, AssetUncheckedCreateWithoutFolderInput> | AssetCreateWithoutFolderInput[] | AssetUncheckedCreateWithoutFolderInput[]
    connectOrCreate?: AssetCreateOrConnectWithoutFolderInput | AssetCreateOrConnectWithoutFolderInput[]
    upsert?: AssetUpsertWithWhereUniqueWithoutFolderInput | AssetUpsertWithWhereUniqueWithoutFolderInput[]
    createMany?: AssetCreateManyFolderInputEnvelope
    set?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    disconnect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    delete?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    connect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    update?: AssetUpdateWithWhereUniqueWithoutFolderInput | AssetUpdateWithWhereUniqueWithoutFolderInput[]
    updateMany?: AssetUpdateManyWithWhereWithoutFolderInput | AssetUpdateManyWithWhereWithoutFolderInput[]
    deleteMany?: AssetScalarWhereInput | AssetScalarWhereInput[]
  }

  export type FolderUncheckedUpdateManyWithoutParentNestedInput = {
    create?: XOR<FolderCreateWithoutParentInput, FolderUncheckedCreateWithoutParentInput> | FolderCreateWithoutParentInput[] | FolderUncheckedCreateWithoutParentInput[]
    connectOrCreate?: FolderCreateOrConnectWithoutParentInput | FolderCreateOrConnectWithoutParentInput[]
    upsert?: FolderUpsertWithWhereUniqueWithoutParentInput | FolderUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: FolderCreateManyParentInputEnvelope
    set?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
    disconnect?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
    delete?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
    connect?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
    update?: FolderUpdateWithWhereUniqueWithoutParentInput | FolderUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: FolderUpdateManyWithWhereWithoutParentInput | FolderUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: FolderScalarWhereInput | FolderScalarWhereInput[]
  }

  export type AssetUncheckedUpdateManyWithoutFolderNestedInput = {
    create?: XOR<AssetCreateWithoutFolderInput, AssetUncheckedCreateWithoutFolderInput> | AssetCreateWithoutFolderInput[] | AssetUncheckedCreateWithoutFolderInput[]
    connectOrCreate?: AssetCreateOrConnectWithoutFolderInput | AssetCreateOrConnectWithoutFolderInput[]
    upsert?: AssetUpsertWithWhereUniqueWithoutFolderInput | AssetUpsertWithWhereUniqueWithoutFolderInput[]
    createMany?: AssetCreateManyFolderInputEnvelope
    set?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    disconnect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    delete?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    connect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    update?: AssetUpdateWithWhereUniqueWithoutFolderInput | AssetUpdateWithWhereUniqueWithoutFolderInput[]
    updateMany?: AssetUpdateManyWithWhereWithoutFolderInput | AssetUpdateManyWithWhereWithoutFolderInput[]
    deleteMany?: AssetScalarWhereInput | AssetScalarWhereInput[]
  }

  export type ProjectCreateNestedOneWithoutScenesInput = {
    create?: XOR<ProjectCreateWithoutScenesInput, ProjectUncheckedCreateWithoutScenesInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutScenesInput
    connect?: ProjectWhereUniqueInput
  }

  export type SceneNodeCreateNestedManyWithoutSceneInput = {
    create?: XOR<SceneNodeCreateWithoutSceneInput, SceneNodeUncheckedCreateWithoutSceneInput> | SceneNodeCreateWithoutSceneInput[] | SceneNodeUncheckedCreateWithoutSceneInput[]
    connectOrCreate?: SceneNodeCreateOrConnectWithoutSceneInput | SceneNodeCreateOrConnectWithoutSceneInput[]
    createMany?: SceneNodeCreateManySceneInputEnvelope
    connect?: SceneNodeWhereUniqueInput | SceneNodeWhereUniqueInput[]
  }

  export type SceneAssetUsageCreateNestedManyWithoutSceneInput = {
    create?: XOR<SceneAssetUsageCreateWithoutSceneInput, SceneAssetUsageUncheckedCreateWithoutSceneInput> | SceneAssetUsageCreateWithoutSceneInput[] | SceneAssetUsageUncheckedCreateWithoutSceneInput[]
    connectOrCreate?: SceneAssetUsageCreateOrConnectWithoutSceneInput | SceneAssetUsageCreateOrConnectWithoutSceneInput[]
    createMany?: SceneAssetUsageCreateManySceneInputEnvelope
    connect?: SceneAssetUsageWhereUniqueInput | SceneAssetUsageWhereUniqueInput[]
  }

  export type SceneNodeUncheckedCreateNestedManyWithoutSceneInput = {
    create?: XOR<SceneNodeCreateWithoutSceneInput, SceneNodeUncheckedCreateWithoutSceneInput> | SceneNodeCreateWithoutSceneInput[] | SceneNodeUncheckedCreateWithoutSceneInput[]
    connectOrCreate?: SceneNodeCreateOrConnectWithoutSceneInput | SceneNodeCreateOrConnectWithoutSceneInput[]
    createMany?: SceneNodeCreateManySceneInputEnvelope
    connect?: SceneNodeWhereUniqueInput | SceneNodeWhereUniqueInput[]
  }

  export type SceneAssetUsageUncheckedCreateNestedManyWithoutSceneInput = {
    create?: XOR<SceneAssetUsageCreateWithoutSceneInput, SceneAssetUsageUncheckedCreateWithoutSceneInput> | SceneAssetUsageCreateWithoutSceneInput[] | SceneAssetUsageUncheckedCreateWithoutSceneInput[]
    connectOrCreate?: SceneAssetUsageCreateOrConnectWithoutSceneInput | SceneAssetUsageCreateOrConnectWithoutSceneInput[]
    createMany?: SceneAssetUsageCreateManySceneInputEnvelope
    connect?: SceneAssetUsageWhereUniqueInput | SceneAssetUsageWhereUniqueInput[]
  }

  export type ProjectUpdateOneRequiredWithoutScenesNestedInput = {
    create?: XOR<ProjectCreateWithoutScenesInput, ProjectUncheckedCreateWithoutScenesInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutScenesInput
    upsert?: ProjectUpsertWithoutScenesInput
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutScenesInput, ProjectUpdateWithoutScenesInput>, ProjectUncheckedUpdateWithoutScenesInput>
  }

  export type SceneNodeUpdateManyWithoutSceneNestedInput = {
    create?: XOR<SceneNodeCreateWithoutSceneInput, SceneNodeUncheckedCreateWithoutSceneInput> | SceneNodeCreateWithoutSceneInput[] | SceneNodeUncheckedCreateWithoutSceneInput[]
    connectOrCreate?: SceneNodeCreateOrConnectWithoutSceneInput | SceneNodeCreateOrConnectWithoutSceneInput[]
    upsert?: SceneNodeUpsertWithWhereUniqueWithoutSceneInput | SceneNodeUpsertWithWhereUniqueWithoutSceneInput[]
    createMany?: SceneNodeCreateManySceneInputEnvelope
    set?: SceneNodeWhereUniqueInput | SceneNodeWhereUniqueInput[]
    disconnect?: SceneNodeWhereUniqueInput | SceneNodeWhereUniqueInput[]
    delete?: SceneNodeWhereUniqueInput | SceneNodeWhereUniqueInput[]
    connect?: SceneNodeWhereUniqueInput | SceneNodeWhereUniqueInput[]
    update?: SceneNodeUpdateWithWhereUniqueWithoutSceneInput | SceneNodeUpdateWithWhereUniqueWithoutSceneInput[]
    updateMany?: SceneNodeUpdateManyWithWhereWithoutSceneInput | SceneNodeUpdateManyWithWhereWithoutSceneInput[]
    deleteMany?: SceneNodeScalarWhereInput | SceneNodeScalarWhereInput[]
  }

  export type SceneAssetUsageUpdateManyWithoutSceneNestedInput = {
    create?: XOR<SceneAssetUsageCreateWithoutSceneInput, SceneAssetUsageUncheckedCreateWithoutSceneInput> | SceneAssetUsageCreateWithoutSceneInput[] | SceneAssetUsageUncheckedCreateWithoutSceneInput[]
    connectOrCreate?: SceneAssetUsageCreateOrConnectWithoutSceneInput | SceneAssetUsageCreateOrConnectWithoutSceneInput[]
    upsert?: SceneAssetUsageUpsertWithWhereUniqueWithoutSceneInput | SceneAssetUsageUpsertWithWhereUniqueWithoutSceneInput[]
    createMany?: SceneAssetUsageCreateManySceneInputEnvelope
    set?: SceneAssetUsageWhereUniqueInput | SceneAssetUsageWhereUniqueInput[]
    disconnect?: SceneAssetUsageWhereUniqueInput | SceneAssetUsageWhereUniqueInput[]
    delete?: SceneAssetUsageWhereUniqueInput | SceneAssetUsageWhereUniqueInput[]
    connect?: SceneAssetUsageWhereUniqueInput | SceneAssetUsageWhereUniqueInput[]
    update?: SceneAssetUsageUpdateWithWhereUniqueWithoutSceneInput | SceneAssetUsageUpdateWithWhereUniqueWithoutSceneInput[]
    updateMany?: SceneAssetUsageUpdateManyWithWhereWithoutSceneInput | SceneAssetUsageUpdateManyWithWhereWithoutSceneInput[]
    deleteMany?: SceneAssetUsageScalarWhereInput | SceneAssetUsageScalarWhereInput[]
  }

  export type SceneNodeUncheckedUpdateManyWithoutSceneNestedInput = {
    create?: XOR<SceneNodeCreateWithoutSceneInput, SceneNodeUncheckedCreateWithoutSceneInput> | SceneNodeCreateWithoutSceneInput[] | SceneNodeUncheckedCreateWithoutSceneInput[]
    connectOrCreate?: SceneNodeCreateOrConnectWithoutSceneInput | SceneNodeCreateOrConnectWithoutSceneInput[]
    upsert?: SceneNodeUpsertWithWhereUniqueWithoutSceneInput | SceneNodeUpsertWithWhereUniqueWithoutSceneInput[]
    createMany?: SceneNodeCreateManySceneInputEnvelope
    set?: SceneNodeWhereUniqueInput | SceneNodeWhereUniqueInput[]
    disconnect?: SceneNodeWhereUniqueInput | SceneNodeWhereUniqueInput[]
    delete?: SceneNodeWhereUniqueInput | SceneNodeWhereUniqueInput[]
    connect?: SceneNodeWhereUniqueInput | SceneNodeWhereUniqueInput[]
    update?: SceneNodeUpdateWithWhereUniqueWithoutSceneInput | SceneNodeUpdateWithWhereUniqueWithoutSceneInput[]
    updateMany?: SceneNodeUpdateManyWithWhereWithoutSceneInput | SceneNodeUpdateManyWithWhereWithoutSceneInput[]
    deleteMany?: SceneNodeScalarWhereInput | SceneNodeScalarWhereInput[]
  }

  export type SceneAssetUsageUncheckedUpdateManyWithoutSceneNestedInput = {
    create?: XOR<SceneAssetUsageCreateWithoutSceneInput, SceneAssetUsageUncheckedCreateWithoutSceneInput> | SceneAssetUsageCreateWithoutSceneInput[] | SceneAssetUsageUncheckedCreateWithoutSceneInput[]
    connectOrCreate?: SceneAssetUsageCreateOrConnectWithoutSceneInput | SceneAssetUsageCreateOrConnectWithoutSceneInput[]
    upsert?: SceneAssetUsageUpsertWithWhereUniqueWithoutSceneInput | SceneAssetUsageUpsertWithWhereUniqueWithoutSceneInput[]
    createMany?: SceneAssetUsageCreateManySceneInputEnvelope
    set?: SceneAssetUsageWhereUniqueInput | SceneAssetUsageWhereUniqueInput[]
    disconnect?: SceneAssetUsageWhereUniqueInput | SceneAssetUsageWhereUniqueInput[]
    delete?: SceneAssetUsageWhereUniqueInput | SceneAssetUsageWhereUniqueInput[]
    connect?: SceneAssetUsageWhereUniqueInput | SceneAssetUsageWhereUniqueInput[]
    update?: SceneAssetUsageUpdateWithWhereUniqueWithoutSceneInput | SceneAssetUsageUpdateWithWhereUniqueWithoutSceneInput[]
    updateMany?: SceneAssetUsageUpdateManyWithWhereWithoutSceneInput | SceneAssetUsageUpdateManyWithWhereWithoutSceneInput[]
    deleteMany?: SceneAssetUsageScalarWhereInput | SceneAssetUsageScalarWhereInput[]
  }

  export type SceneCreateNestedOneWithoutNodesInput = {
    create?: XOR<SceneCreateWithoutNodesInput, SceneUncheckedCreateWithoutNodesInput>
    connectOrCreate?: SceneCreateOrConnectWithoutNodesInput
    connect?: SceneWhereUniqueInput
  }

  export type SceneNodeCreateNestedOneWithoutChildrenInput = {
    create?: XOR<SceneNodeCreateWithoutChildrenInput, SceneNodeUncheckedCreateWithoutChildrenInput>
    connectOrCreate?: SceneNodeCreateOrConnectWithoutChildrenInput
    connect?: SceneNodeWhereUniqueInput
  }

  export type SceneNodeCreateNestedManyWithoutParentInput = {
    create?: XOR<SceneNodeCreateWithoutParentInput, SceneNodeUncheckedCreateWithoutParentInput> | SceneNodeCreateWithoutParentInput[] | SceneNodeUncheckedCreateWithoutParentInput[]
    connectOrCreate?: SceneNodeCreateOrConnectWithoutParentInput | SceneNodeCreateOrConnectWithoutParentInput[]
    createMany?: SceneNodeCreateManyParentInputEnvelope
    connect?: SceneNodeWhereUniqueInput | SceneNodeWhereUniqueInput[]
  }

  export type SceneNodeUncheckedCreateNestedManyWithoutParentInput = {
    create?: XOR<SceneNodeCreateWithoutParentInput, SceneNodeUncheckedCreateWithoutParentInput> | SceneNodeCreateWithoutParentInput[] | SceneNodeUncheckedCreateWithoutParentInput[]
    connectOrCreate?: SceneNodeCreateOrConnectWithoutParentInput | SceneNodeCreateOrConnectWithoutParentInput[]
    createMany?: SceneNodeCreateManyParentInputEnvelope
    connect?: SceneNodeWhereUniqueInput | SceneNodeWhereUniqueInput[]
  }

  export type SceneUpdateOneRequiredWithoutNodesNestedInput = {
    create?: XOR<SceneCreateWithoutNodesInput, SceneUncheckedCreateWithoutNodesInput>
    connectOrCreate?: SceneCreateOrConnectWithoutNodesInput
    upsert?: SceneUpsertWithoutNodesInput
    connect?: SceneWhereUniqueInput
    update?: XOR<XOR<SceneUpdateToOneWithWhereWithoutNodesInput, SceneUpdateWithoutNodesInput>, SceneUncheckedUpdateWithoutNodesInput>
  }

  export type SceneNodeUpdateOneWithoutChildrenNestedInput = {
    create?: XOR<SceneNodeCreateWithoutChildrenInput, SceneNodeUncheckedCreateWithoutChildrenInput>
    connectOrCreate?: SceneNodeCreateOrConnectWithoutChildrenInput
    upsert?: SceneNodeUpsertWithoutChildrenInput
    disconnect?: SceneNodeWhereInput | boolean
    delete?: SceneNodeWhereInput | boolean
    connect?: SceneNodeWhereUniqueInput
    update?: XOR<XOR<SceneNodeUpdateToOneWithWhereWithoutChildrenInput, SceneNodeUpdateWithoutChildrenInput>, SceneNodeUncheckedUpdateWithoutChildrenInput>
  }

  export type SceneNodeUpdateManyWithoutParentNestedInput = {
    create?: XOR<SceneNodeCreateWithoutParentInput, SceneNodeUncheckedCreateWithoutParentInput> | SceneNodeCreateWithoutParentInput[] | SceneNodeUncheckedCreateWithoutParentInput[]
    connectOrCreate?: SceneNodeCreateOrConnectWithoutParentInput | SceneNodeCreateOrConnectWithoutParentInput[]
    upsert?: SceneNodeUpsertWithWhereUniqueWithoutParentInput | SceneNodeUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: SceneNodeCreateManyParentInputEnvelope
    set?: SceneNodeWhereUniqueInput | SceneNodeWhereUniqueInput[]
    disconnect?: SceneNodeWhereUniqueInput | SceneNodeWhereUniqueInput[]
    delete?: SceneNodeWhereUniqueInput | SceneNodeWhereUniqueInput[]
    connect?: SceneNodeWhereUniqueInput | SceneNodeWhereUniqueInput[]
    update?: SceneNodeUpdateWithWhereUniqueWithoutParentInput | SceneNodeUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: SceneNodeUpdateManyWithWhereWithoutParentInput | SceneNodeUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: SceneNodeScalarWhereInput | SceneNodeScalarWhereInput[]
  }

  export type SceneNodeUncheckedUpdateManyWithoutParentNestedInput = {
    create?: XOR<SceneNodeCreateWithoutParentInput, SceneNodeUncheckedCreateWithoutParentInput> | SceneNodeCreateWithoutParentInput[] | SceneNodeUncheckedCreateWithoutParentInput[]
    connectOrCreate?: SceneNodeCreateOrConnectWithoutParentInput | SceneNodeCreateOrConnectWithoutParentInput[]
    upsert?: SceneNodeUpsertWithWhereUniqueWithoutParentInput | SceneNodeUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: SceneNodeCreateManyParentInputEnvelope
    set?: SceneNodeWhereUniqueInput | SceneNodeWhereUniqueInput[]
    disconnect?: SceneNodeWhereUniqueInput | SceneNodeWhereUniqueInput[]
    delete?: SceneNodeWhereUniqueInput | SceneNodeWhereUniqueInput[]
    connect?: SceneNodeWhereUniqueInput | SceneNodeWhereUniqueInput[]
    update?: SceneNodeUpdateWithWhereUniqueWithoutParentInput | SceneNodeUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: SceneNodeUpdateManyWithWhereWithoutParentInput | SceneNodeUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: SceneNodeScalarWhereInput | SceneNodeScalarWhereInput[]
  }

  export type ProjectCreateNestedOneWithoutScriptsInput = {
    create?: XOR<ProjectCreateWithoutScriptsInput, ProjectUncheckedCreateWithoutScriptsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutScriptsInput
    connect?: ProjectWhereUniqueInput
  }

  export type ScriptAssetUsageCreateNestedManyWithoutScriptInput = {
    create?: XOR<ScriptAssetUsageCreateWithoutScriptInput, ScriptAssetUsageUncheckedCreateWithoutScriptInput> | ScriptAssetUsageCreateWithoutScriptInput[] | ScriptAssetUsageUncheckedCreateWithoutScriptInput[]
    connectOrCreate?: ScriptAssetUsageCreateOrConnectWithoutScriptInput | ScriptAssetUsageCreateOrConnectWithoutScriptInput[]
    createMany?: ScriptAssetUsageCreateManyScriptInputEnvelope
    connect?: ScriptAssetUsageWhereUniqueInput | ScriptAssetUsageWhereUniqueInput[]
  }

  export type ScriptAssetUsageUncheckedCreateNestedManyWithoutScriptInput = {
    create?: XOR<ScriptAssetUsageCreateWithoutScriptInput, ScriptAssetUsageUncheckedCreateWithoutScriptInput> | ScriptAssetUsageCreateWithoutScriptInput[] | ScriptAssetUsageUncheckedCreateWithoutScriptInput[]
    connectOrCreate?: ScriptAssetUsageCreateOrConnectWithoutScriptInput | ScriptAssetUsageCreateOrConnectWithoutScriptInput[]
    createMany?: ScriptAssetUsageCreateManyScriptInputEnvelope
    connect?: ScriptAssetUsageWhereUniqueInput | ScriptAssetUsageWhereUniqueInput[]
  }

  export type ProjectUpdateOneRequiredWithoutScriptsNestedInput = {
    create?: XOR<ProjectCreateWithoutScriptsInput, ProjectUncheckedCreateWithoutScriptsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutScriptsInput
    upsert?: ProjectUpsertWithoutScriptsInput
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutScriptsInput, ProjectUpdateWithoutScriptsInput>, ProjectUncheckedUpdateWithoutScriptsInput>
  }

  export type ScriptAssetUsageUpdateManyWithoutScriptNestedInput = {
    create?: XOR<ScriptAssetUsageCreateWithoutScriptInput, ScriptAssetUsageUncheckedCreateWithoutScriptInput> | ScriptAssetUsageCreateWithoutScriptInput[] | ScriptAssetUsageUncheckedCreateWithoutScriptInput[]
    connectOrCreate?: ScriptAssetUsageCreateOrConnectWithoutScriptInput | ScriptAssetUsageCreateOrConnectWithoutScriptInput[]
    upsert?: ScriptAssetUsageUpsertWithWhereUniqueWithoutScriptInput | ScriptAssetUsageUpsertWithWhereUniqueWithoutScriptInput[]
    createMany?: ScriptAssetUsageCreateManyScriptInputEnvelope
    set?: ScriptAssetUsageWhereUniqueInput | ScriptAssetUsageWhereUniqueInput[]
    disconnect?: ScriptAssetUsageWhereUniqueInput | ScriptAssetUsageWhereUniqueInput[]
    delete?: ScriptAssetUsageWhereUniqueInput | ScriptAssetUsageWhereUniqueInput[]
    connect?: ScriptAssetUsageWhereUniqueInput | ScriptAssetUsageWhereUniqueInput[]
    update?: ScriptAssetUsageUpdateWithWhereUniqueWithoutScriptInput | ScriptAssetUsageUpdateWithWhereUniqueWithoutScriptInput[]
    updateMany?: ScriptAssetUsageUpdateManyWithWhereWithoutScriptInput | ScriptAssetUsageUpdateManyWithWhereWithoutScriptInput[]
    deleteMany?: ScriptAssetUsageScalarWhereInput | ScriptAssetUsageScalarWhereInput[]
  }

  export type ScriptAssetUsageUncheckedUpdateManyWithoutScriptNestedInput = {
    create?: XOR<ScriptAssetUsageCreateWithoutScriptInput, ScriptAssetUsageUncheckedCreateWithoutScriptInput> | ScriptAssetUsageCreateWithoutScriptInput[] | ScriptAssetUsageUncheckedCreateWithoutScriptInput[]
    connectOrCreate?: ScriptAssetUsageCreateOrConnectWithoutScriptInput | ScriptAssetUsageCreateOrConnectWithoutScriptInput[]
    upsert?: ScriptAssetUsageUpsertWithWhereUniqueWithoutScriptInput | ScriptAssetUsageUpsertWithWhereUniqueWithoutScriptInput[]
    createMany?: ScriptAssetUsageCreateManyScriptInputEnvelope
    set?: ScriptAssetUsageWhereUniqueInput | ScriptAssetUsageWhereUniqueInput[]
    disconnect?: ScriptAssetUsageWhereUniqueInput | ScriptAssetUsageWhereUniqueInput[]
    delete?: ScriptAssetUsageWhereUniqueInput | ScriptAssetUsageWhereUniqueInput[]
    connect?: ScriptAssetUsageWhereUniqueInput | ScriptAssetUsageWhereUniqueInput[]
    update?: ScriptAssetUsageUpdateWithWhereUniqueWithoutScriptInput | ScriptAssetUsageUpdateWithWhereUniqueWithoutScriptInput[]
    updateMany?: ScriptAssetUsageUpdateManyWithWhereWithoutScriptInput | ScriptAssetUsageUpdateManyWithWhereWithoutScriptInput[]
    deleteMany?: ScriptAssetUsageScalarWhereInput | ScriptAssetUsageScalarWhereInput[]
  }

  export type ProjectCreateNestedOneWithoutMaterialsInput = {
    create?: XOR<ProjectCreateWithoutMaterialsInput, ProjectUncheckedCreateWithoutMaterialsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutMaterialsInput
    connect?: ProjectWhereUniqueInput
  }

  export type MaterialAssetUsageCreateNestedManyWithoutMaterialInput = {
    create?: XOR<MaterialAssetUsageCreateWithoutMaterialInput, MaterialAssetUsageUncheckedCreateWithoutMaterialInput> | MaterialAssetUsageCreateWithoutMaterialInput[] | MaterialAssetUsageUncheckedCreateWithoutMaterialInput[]
    connectOrCreate?: MaterialAssetUsageCreateOrConnectWithoutMaterialInput | MaterialAssetUsageCreateOrConnectWithoutMaterialInput[]
    createMany?: MaterialAssetUsageCreateManyMaterialInputEnvelope
    connect?: MaterialAssetUsageWhereUniqueInput | MaterialAssetUsageWhereUniqueInput[]
  }

  export type MaterialAssetUsageUncheckedCreateNestedManyWithoutMaterialInput = {
    create?: XOR<MaterialAssetUsageCreateWithoutMaterialInput, MaterialAssetUsageUncheckedCreateWithoutMaterialInput> | MaterialAssetUsageCreateWithoutMaterialInput[] | MaterialAssetUsageUncheckedCreateWithoutMaterialInput[]
    connectOrCreate?: MaterialAssetUsageCreateOrConnectWithoutMaterialInput | MaterialAssetUsageCreateOrConnectWithoutMaterialInput[]
    createMany?: MaterialAssetUsageCreateManyMaterialInputEnvelope
    connect?: MaterialAssetUsageWhereUniqueInput | MaterialAssetUsageWhereUniqueInput[]
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ProjectUpdateOneRequiredWithoutMaterialsNestedInput = {
    create?: XOR<ProjectCreateWithoutMaterialsInput, ProjectUncheckedCreateWithoutMaterialsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutMaterialsInput
    upsert?: ProjectUpsertWithoutMaterialsInput
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutMaterialsInput, ProjectUpdateWithoutMaterialsInput>, ProjectUncheckedUpdateWithoutMaterialsInput>
  }

  export type MaterialAssetUsageUpdateManyWithoutMaterialNestedInput = {
    create?: XOR<MaterialAssetUsageCreateWithoutMaterialInput, MaterialAssetUsageUncheckedCreateWithoutMaterialInput> | MaterialAssetUsageCreateWithoutMaterialInput[] | MaterialAssetUsageUncheckedCreateWithoutMaterialInput[]
    connectOrCreate?: MaterialAssetUsageCreateOrConnectWithoutMaterialInput | MaterialAssetUsageCreateOrConnectWithoutMaterialInput[]
    upsert?: MaterialAssetUsageUpsertWithWhereUniqueWithoutMaterialInput | MaterialAssetUsageUpsertWithWhereUniqueWithoutMaterialInput[]
    createMany?: MaterialAssetUsageCreateManyMaterialInputEnvelope
    set?: MaterialAssetUsageWhereUniqueInput | MaterialAssetUsageWhereUniqueInput[]
    disconnect?: MaterialAssetUsageWhereUniqueInput | MaterialAssetUsageWhereUniqueInput[]
    delete?: MaterialAssetUsageWhereUniqueInput | MaterialAssetUsageWhereUniqueInput[]
    connect?: MaterialAssetUsageWhereUniqueInput | MaterialAssetUsageWhereUniqueInput[]
    update?: MaterialAssetUsageUpdateWithWhereUniqueWithoutMaterialInput | MaterialAssetUsageUpdateWithWhereUniqueWithoutMaterialInput[]
    updateMany?: MaterialAssetUsageUpdateManyWithWhereWithoutMaterialInput | MaterialAssetUsageUpdateManyWithWhereWithoutMaterialInput[]
    deleteMany?: MaterialAssetUsageScalarWhereInput | MaterialAssetUsageScalarWhereInput[]
  }

  export type MaterialAssetUsageUncheckedUpdateManyWithoutMaterialNestedInput = {
    create?: XOR<MaterialAssetUsageCreateWithoutMaterialInput, MaterialAssetUsageUncheckedCreateWithoutMaterialInput> | MaterialAssetUsageCreateWithoutMaterialInput[] | MaterialAssetUsageUncheckedCreateWithoutMaterialInput[]
    connectOrCreate?: MaterialAssetUsageCreateOrConnectWithoutMaterialInput | MaterialAssetUsageCreateOrConnectWithoutMaterialInput[]
    upsert?: MaterialAssetUsageUpsertWithWhereUniqueWithoutMaterialInput | MaterialAssetUsageUpsertWithWhereUniqueWithoutMaterialInput[]
    createMany?: MaterialAssetUsageCreateManyMaterialInputEnvelope
    set?: MaterialAssetUsageWhereUniqueInput | MaterialAssetUsageWhereUniqueInput[]
    disconnect?: MaterialAssetUsageWhereUniqueInput | MaterialAssetUsageWhereUniqueInput[]
    delete?: MaterialAssetUsageWhereUniqueInput | MaterialAssetUsageWhereUniqueInput[]
    connect?: MaterialAssetUsageWhereUniqueInput | MaterialAssetUsageWhereUniqueInput[]
    update?: MaterialAssetUsageUpdateWithWhereUniqueWithoutMaterialInput | MaterialAssetUsageUpdateWithWhereUniqueWithoutMaterialInput[]
    updateMany?: MaterialAssetUsageUpdateManyWithWhereWithoutMaterialInput | MaterialAssetUsageUpdateManyWithWhereWithoutMaterialInput[]
    deleteMany?: MaterialAssetUsageScalarWhereInput | MaterialAssetUsageScalarWhereInput[]
  }

  export type ProjectCreateNestedOneWithoutTerrainsInput = {
    create?: XOR<ProjectCreateWithoutTerrainsInput, ProjectUncheckedCreateWithoutTerrainsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutTerrainsInput
    connect?: ProjectWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ProjectUpdateOneRequiredWithoutTerrainsNestedInput = {
    create?: XOR<ProjectCreateWithoutTerrainsInput, ProjectUncheckedCreateWithoutTerrainsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutTerrainsInput
    upsert?: ProjectUpsertWithoutTerrainsInput
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutTerrainsInput, ProjectUpdateWithoutTerrainsInput>, ProjectUncheckedUpdateWithoutTerrainsInput>
  }

  export type ProjectCreateNestedOneWithoutAnimationsInput = {
    create?: XOR<ProjectCreateWithoutAnimationsInput, ProjectUncheckedCreateWithoutAnimationsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutAnimationsInput
    connect?: ProjectWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ProjectUpdateOneRequiredWithoutAnimationsNestedInput = {
    create?: XOR<ProjectCreateWithoutAnimationsInput, ProjectUncheckedCreateWithoutAnimationsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutAnimationsInput
    upsert?: ProjectUpsertWithoutAnimationsInput
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutAnimationsInput, ProjectUpdateWithoutAnimationsInput>, ProjectUncheckedUpdateWithoutAnimationsInput>
  }

  export type ProjectCreateNestedOneWithoutProjectSettingsInput = {
    create?: XOR<ProjectCreateWithoutProjectSettingsInput, ProjectUncheckedCreateWithoutProjectSettingsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutProjectSettingsInput
    connect?: ProjectWhereUniqueInput
  }

  export type ProjectUpdateOneRequiredWithoutProjectSettingsNestedInput = {
    create?: XOR<ProjectCreateWithoutProjectSettingsInput, ProjectUncheckedCreateWithoutProjectSettingsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutProjectSettingsInput
    upsert?: ProjectUpsertWithoutProjectSettingsInput
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutProjectSettingsInput, ProjectUpdateWithoutProjectSettingsInput>, ProjectUncheckedUpdateWithoutProjectSettingsInput>
  }

  export type ProjectCreateNestedOneWithoutAssetsInput = {
    create?: XOR<ProjectCreateWithoutAssetsInput, ProjectUncheckedCreateWithoutAssetsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutAssetsInput
    connect?: ProjectWhereUniqueInput
  }

  export type FolderCreateNestedOneWithoutAssetsInput = {
    create?: XOR<FolderCreateWithoutAssetsInput, FolderUncheckedCreateWithoutAssetsInput>
    connectOrCreate?: FolderCreateOrConnectWithoutAssetsInput
    connect?: FolderWhereUniqueInput
  }

  export type AssetCreateNestedOneWithoutVersionsInput = {
    create?: XOR<AssetCreateWithoutVersionsInput, AssetUncheckedCreateWithoutVersionsInput>
    connectOrCreate?: AssetCreateOrConnectWithoutVersionsInput
    connect?: AssetWhereUniqueInput
  }

  export type AssetCreateNestedManyWithoutParentInput = {
    create?: XOR<AssetCreateWithoutParentInput, AssetUncheckedCreateWithoutParentInput> | AssetCreateWithoutParentInput[] | AssetUncheckedCreateWithoutParentInput[]
    connectOrCreate?: AssetCreateOrConnectWithoutParentInput | AssetCreateOrConnectWithoutParentInput[]
    createMany?: AssetCreateManyParentInputEnvelope
    connect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
  }

  export type SceneAssetUsageCreateNestedManyWithoutAssetInput = {
    create?: XOR<SceneAssetUsageCreateWithoutAssetInput, SceneAssetUsageUncheckedCreateWithoutAssetInput> | SceneAssetUsageCreateWithoutAssetInput[] | SceneAssetUsageUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: SceneAssetUsageCreateOrConnectWithoutAssetInput | SceneAssetUsageCreateOrConnectWithoutAssetInput[]
    createMany?: SceneAssetUsageCreateManyAssetInputEnvelope
    connect?: SceneAssetUsageWhereUniqueInput | SceneAssetUsageWhereUniqueInput[]
  }

  export type ScriptAssetUsageCreateNestedManyWithoutAssetInput = {
    create?: XOR<ScriptAssetUsageCreateWithoutAssetInput, ScriptAssetUsageUncheckedCreateWithoutAssetInput> | ScriptAssetUsageCreateWithoutAssetInput[] | ScriptAssetUsageUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: ScriptAssetUsageCreateOrConnectWithoutAssetInput | ScriptAssetUsageCreateOrConnectWithoutAssetInput[]
    createMany?: ScriptAssetUsageCreateManyAssetInputEnvelope
    connect?: ScriptAssetUsageWhereUniqueInput | ScriptAssetUsageWhereUniqueInput[]
  }

  export type MaterialAssetUsageCreateNestedManyWithoutAssetInput = {
    create?: XOR<MaterialAssetUsageCreateWithoutAssetInput, MaterialAssetUsageUncheckedCreateWithoutAssetInput> | MaterialAssetUsageCreateWithoutAssetInput[] | MaterialAssetUsageUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: MaterialAssetUsageCreateOrConnectWithoutAssetInput | MaterialAssetUsageCreateOrConnectWithoutAssetInput[]
    createMany?: MaterialAssetUsageCreateManyAssetInputEnvelope
    connect?: MaterialAssetUsageWhereUniqueInput | MaterialAssetUsageWhereUniqueInput[]
  }

  export type AssetUncheckedCreateNestedManyWithoutParentInput = {
    create?: XOR<AssetCreateWithoutParentInput, AssetUncheckedCreateWithoutParentInput> | AssetCreateWithoutParentInput[] | AssetUncheckedCreateWithoutParentInput[]
    connectOrCreate?: AssetCreateOrConnectWithoutParentInput | AssetCreateOrConnectWithoutParentInput[]
    createMany?: AssetCreateManyParentInputEnvelope
    connect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
  }

  export type SceneAssetUsageUncheckedCreateNestedManyWithoutAssetInput = {
    create?: XOR<SceneAssetUsageCreateWithoutAssetInput, SceneAssetUsageUncheckedCreateWithoutAssetInput> | SceneAssetUsageCreateWithoutAssetInput[] | SceneAssetUsageUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: SceneAssetUsageCreateOrConnectWithoutAssetInput | SceneAssetUsageCreateOrConnectWithoutAssetInput[]
    createMany?: SceneAssetUsageCreateManyAssetInputEnvelope
    connect?: SceneAssetUsageWhereUniqueInput | SceneAssetUsageWhereUniqueInput[]
  }

  export type ScriptAssetUsageUncheckedCreateNestedManyWithoutAssetInput = {
    create?: XOR<ScriptAssetUsageCreateWithoutAssetInput, ScriptAssetUsageUncheckedCreateWithoutAssetInput> | ScriptAssetUsageCreateWithoutAssetInput[] | ScriptAssetUsageUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: ScriptAssetUsageCreateOrConnectWithoutAssetInput | ScriptAssetUsageCreateOrConnectWithoutAssetInput[]
    createMany?: ScriptAssetUsageCreateManyAssetInputEnvelope
    connect?: ScriptAssetUsageWhereUniqueInput | ScriptAssetUsageWhereUniqueInput[]
  }

  export type MaterialAssetUsageUncheckedCreateNestedManyWithoutAssetInput = {
    create?: XOR<MaterialAssetUsageCreateWithoutAssetInput, MaterialAssetUsageUncheckedCreateWithoutAssetInput> | MaterialAssetUsageCreateWithoutAssetInput[] | MaterialAssetUsageUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: MaterialAssetUsageCreateOrConnectWithoutAssetInput | MaterialAssetUsageCreateOrConnectWithoutAssetInput[]
    createMany?: MaterialAssetUsageCreateManyAssetInputEnvelope
    connect?: MaterialAssetUsageWhereUniqueInput | MaterialAssetUsageWhereUniqueInput[]
  }

  export type EnumAssetTypeFieldUpdateOperationsInput = {
    set?: $Enums.AssetType
  }

  export type ProjectUpdateOneRequiredWithoutAssetsNestedInput = {
    create?: XOR<ProjectCreateWithoutAssetsInput, ProjectUncheckedCreateWithoutAssetsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutAssetsInput
    upsert?: ProjectUpsertWithoutAssetsInput
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutAssetsInput, ProjectUpdateWithoutAssetsInput>, ProjectUncheckedUpdateWithoutAssetsInput>
  }

  export type FolderUpdateOneWithoutAssetsNestedInput = {
    create?: XOR<FolderCreateWithoutAssetsInput, FolderUncheckedCreateWithoutAssetsInput>
    connectOrCreate?: FolderCreateOrConnectWithoutAssetsInput
    upsert?: FolderUpsertWithoutAssetsInput
    disconnect?: FolderWhereInput | boolean
    delete?: FolderWhereInput | boolean
    connect?: FolderWhereUniqueInput
    update?: XOR<XOR<FolderUpdateToOneWithWhereWithoutAssetsInput, FolderUpdateWithoutAssetsInput>, FolderUncheckedUpdateWithoutAssetsInput>
  }

  export type AssetUpdateOneWithoutVersionsNestedInput = {
    create?: XOR<AssetCreateWithoutVersionsInput, AssetUncheckedCreateWithoutVersionsInput>
    connectOrCreate?: AssetCreateOrConnectWithoutVersionsInput
    upsert?: AssetUpsertWithoutVersionsInput
    disconnect?: AssetWhereInput | boolean
    delete?: AssetWhereInput | boolean
    connect?: AssetWhereUniqueInput
    update?: XOR<XOR<AssetUpdateToOneWithWhereWithoutVersionsInput, AssetUpdateWithoutVersionsInput>, AssetUncheckedUpdateWithoutVersionsInput>
  }

  export type AssetUpdateManyWithoutParentNestedInput = {
    create?: XOR<AssetCreateWithoutParentInput, AssetUncheckedCreateWithoutParentInput> | AssetCreateWithoutParentInput[] | AssetUncheckedCreateWithoutParentInput[]
    connectOrCreate?: AssetCreateOrConnectWithoutParentInput | AssetCreateOrConnectWithoutParentInput[]
    upsert?: AssetUpsertWithWhereUniqueWithoutParentInput | AssetUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: AssetCreateManyParentInputEnvelope
    set?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    disconnect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    delete?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    connect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    update?: AssetUpdateWithWhereUniqueWithoutParentInput | AssetUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: AssetUpdateManyWithWhereWithoutParentInput | AssetUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: AssetScalarWhereInput | AssetScalarWhereInput[]
  }

  export type SceneAssetUsageUpdateManyWithoutAssetNestedInput = {
    create?: XOR<SceneAssetUsageCreateWithoutAssetInput, SceneAssetUsageUncheckedCreateWithoutAssetInput> | SceneAssetUsageCreateWithoutAssetInput[] | SceneAssetUsageUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: SceneAssetUsageCreateOrConnectWithoutAssetInput | SceneAssetUsageCreateOrConnectWithoutAssetInput[]
    upsert?: SceneAssetUsageUpsertWithWhereUniqueWithoutAssetInput | SceneAssetUsageUpsertWithWhereUniqueWithoutAssetInput[]
    createMany?: SceneAssetUsageCreateManyAssetInputEnvelope
    set?: SceneAssetUsageWhereUniqueInput | SceneAssetUsageWhereUniqueInput[]
    disconnect?: SceneAssetUsageWhereUniqueInput | SceneAssetUsageWhereUniqueInput[]
    delete?: SceneAssetUsageWhereUniqueInput | SceneAssetUsageWhereUniqueInput[]
    connect?: SceneAssetUsageWhereUniqueInput | SceneAssetUsageWhereUniqueInput[]
    update?: SceneAssetUsageUpdateWithWhereUniqueWithoutAssetInput | SceneAssetUsageUpdateWithWhereUniqueWithoutAssetInput[]
    updateMany?: SceneAssetUsageUpdateManyWithWhereWithoutAssetInput | SceneAssetUsageUpdateManyWithWhereWithoutAssetInput[]
    deleteMany?: SceneAssetUsageScalarWhereInput | SceneAssetUsageScalarWhereInput[]
  }

  export type ScriptAssetUsageUpdateManyWithoutAssetNestedInput = {
    create?: XOR<ScriptAssetUsageCreateWithoutAssetInput, ScriptAssetUsageUncheckedCreateWithoutAssetInput> | ScriptAssetUsageCreateWithoutAssetInput[] | ScriptAssetUsageUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: ScriptAssetUsageCreateOrConnectWithoutAssetInput | ScriptAssetUsageCreateOrConnectWithoutAssetInput[]
    upsert?: ScriptAssetUsageUpsertWithWhereUniqueWithoutAssetInput | ScriptAssetUsageUpsertWithWhereUniqueWithoutAssetInput[]
    createMany?: ScriptAssetUsageCreateManyAssetInputEnvelope
    set?: ScriptAssetUsageWhereUniqueInput | ScriptAssetUsageWhereUniqueInput[]
    disconnect?: ScriptAssetUsageWhereUniqueInput | ScriptAssetUsageWhereUniqueInput[]
    delete?: ScriptAssetUsageWhereUniqueInput | ScriptAssetUsageWhereUniqueInput[]
    connect?: ScriptAssetUsageWhereUniqueInput | ScriptAssetUsageWhereUniqueInput[]
    update?: ScriptAssetUsageUpdateWithWhereUniqueWithoutAssetInput | ScriptAssetUsageUpdateWithWhereUniqueWithoutAssetInput[]
    updateMany?: ScriptAssetUsageUpdateManyWithWhereWithoutAssetInput | ScriptAssetUsageUpdateManyWithWhereWithoutAssetInput[]
    deleteMany?: ScriptAssetUsageScalarWhereInput | ScriptAssetUsageScalarWhereInput[]
  }

  export type MaterialAssetUsageUpdateManyWithoutAssetNestedInput = {
    create?: XOR<MaterialAssetUsageCreateWithoutAssetInput, MaterialAssetUsageUncheckedCreateWithoutAssetInput> | MaterialAssetUsageCreateWithoutAssetInput[] | MaterialAssetUsageUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: MaterialAssetUsageCreateOrConnectWithoutAssetInput | MaterialAssetUsageCreateOrConnectWithoutAssetInput[]
    upsert?: MaterialAssetUsageUpsertWithWhereUniqueWithoutAssetInput | MaterialAssetUsageUpsertWithWhereUniqueWithoutAssetInput[]
    createMany?: MaterialAssetUsageCreateManyAssetInputEnvelope
    set?: MaterialAssetUsageWhereUniqueInput | MaterialAssetUsageWhereUniqueInput[]
    disconnect?: MaterialAssetUsageWhereUniqueInput | MaterialAssetUsageWhereUniqueInput[]
    delete?: MaterialAssetUsageWhereUniqueInput | MaterialAssetUsageWhereUniqueInput[]
    connect?: MaterialAssetUsageWhereUniqueInput | MaterialAssetUsageWhereUniqueInput[]
    update?: MaterialAssetUsageUpdateWithWhereUniqueWithoutAssetInput | MaterialAssetUsageUpdateWithWhereUniqueWithoutAssetInput[]
    updateMany?: MaterialAssetUsageUpdateManyWithWhereWithoutAssetInput | MaterialAssetUsageUpdateManyWithWhereWithoutAssetInput[]
    deleteMany?: MaterialAssetUsageScalarWhereInput | MaterialAssetUsageScalarWhereInput[]
  }

  export type AssetUncheckedUpdateManyWithoutParentNestedInput = {
    create?: XOR<AssetCreateWithoutParentInput, AssetUncheckedCreateWithoutParentInput> | AssetCreateWithoutParentInput[] | AssetUncheckedCreateWithoutParentInput[]
    connectOrCreate?: AssetCreateOrConnectWithoutParentInput | AssetCreateOrConnectWithoutParentInput[]
    upsert?: AssetUpsertWithWhereUniqueWithoutParentInput | AssetUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: AssetCreateManyParentInputEnvelope
    set?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    disconnect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    delete?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    connect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    update?: AssetUpdateWithWhereUniqueWithoutParentInput | AssetUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: AssetUpdateManyWithWhereWithoutParentInput | AssetUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: AssetScalarWhereInput | AssetScalarWhereInput[]
  }

  export type SceneAssetUsageUncheckedUpdateManyWithoutAssetNestedInput = {
    create?: XOR<SceneAssetUsageCreateWithoutAssetInput, SceneAssetUsageUncheckedCreateWithoutAssetInput> | SceneAssetUsageCreateWithoutAssetInput[] | SceneAssetUsageUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: SceneAssetUsageCreateOrConnectWithoutAssetInput | SceneAssetUsageCreateOrConnectWithoutAssetInput[]
    upsert?: SceneAssetUsageUpsertWithWhereUniqueWithoutAssetInput | SceneAssetUsageUpsertWithWhereUniqueWithoutAssetInput[]
    createMany?: SceneAssetUsageCreateManyAssetInputEnvelope
    set?: SceneAssetUsageWhereUniqueInput | SceneAssetUsageWhereUniqueInput[]
    disconnect?: SceneAssetUsageWhereUniqueInput | SceneAssetUsageWhereUniqueInput[]
    delete?: SceneAssetUsageWhereUniqueInput | SceneAssetUsageWhereUniqueInput[]
    connect?: SceneAssetUsageWhereUniqueInput | SceneAssetUsageWhereUniqueInput[]
    update?: SceneAssetUsageUpdateWithWhereUniqueWithoutAssetInput | SceneAssetUsageUpdateWithWhereUniqueWithoutAssetInput[]
    updateMany?: SceneAssetUsageUpdateManyWithWhereWithoutAssetInput | SceneAssetUsageUpdateManyWithWhereWithoutAssetInput[]
    deleteMany?: SceneAssetUsageScalarWhereInput | SceneAssetUsageScalarWhereInput[]
  }

  export type ScriptAssetUsageUncheckedUpdateManyWithoutAssetNestedInput = {
    create?: XOR<ScriptAssetUsageCreateWithoutAssetInput, ScriptAssetUsageUncheckedCreateWithoutAssetInput> | ScriptAssetUsageCreateWithoutAssetInput[] | ScriptAssetUsageUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: ScriptAssetUsageCreateOrConnectWithoutAssetInput | ScriptAssetUsageCreateOrConnectWithoutAssetInput[]
    upsert?: ScriptAssetUsageUpsertWithWhereUniqueWithoutAssetInput | ScriptAssetUsageUpsertWithWhereUniqueWithoutAssetInput[]
    createMany?: ScriptAssetUsageCreateManyAssetInputEnvelope
    set?: ScriptAssetUsageWhereUniqueInput | ScriptAssetUsageWhereUniqueInput[]
    disconnect?: ScriptAssetUsageWhereUniqueInput | ScriptAssetUsageWhereUniqueInput[]
    delete?: ScriptAssetUsageWhereUniqueInput | ScriptAssetUsageWhereUniqueInput[]
    connect?: ScriptAssetUsageWhereUniqueInput | ScriptAssetUsageWhereUniqueInput[]
    update?: ScriptAssetUsageUpdateWithWhereUniqueWithoutAssetInput | ScriptAssetUsageUpdateWithWhereUniqueWithoutAssetInput[]
    updateMany?: ScriptAssetUsageUpdateManyWithWhereWithoutAssetInput | ScriptAssetUsageUpdateManyWithWhereWithoutAssetInput[]
    deleteMany?: ScriptAssetUsageScalarWhereInput | ScriptAssetUsageScalarWhereInput[]
  }

  export type MaterialAssetUsageUncheckedUpdateManyWithoutAssetNestedInput = {
    create?: XOR<MaterialAssetUsageCreateWithoutAssetInput, MaterialAssetUsageUncheckedCreateWithoutAssetInput> | MaterialAssetUsageCreateWithoutAssetInput[] | MaterialAssetUsageUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: MaterialAssetUsageCreateOrConnectWithoutAssetInput | MaterialAssetUsageCreateOrConnectWithoutAssetInput[]
    upsert?: MaterialAssetUsageUpsertWithWhereUniqueWithoutAssetInput | MaterialAssetUsageUpsertWithWhereUniqueWithoutAssetInput[]
    createMany?: MaterialAssetUsageCreateManyAssetInputEnvelope
    set?: MaterialAssetUsageWhereUniqueInput | MaterialAssetUsageWhereUniqueInput[]
    disconnect?: MaterialAssetUsageWhereUniqueInput | MaterialAssetUsageWhereUniqueInput[]
    delete?: MaterialAssetUsageWhereUniqueInput | MaterialAssetUsageWhereUniqueInput[]
    connect?: MaterialAssetUsageWhereUniqueInput | MaterialAssetUsageWhereUniqueInput[]
    update?: MaterialAssetUsageUpdateWithWhereUniqueWithoutAssetInput | MaterialAssetUsageUpdateWithWhereUniqueWithoutAssetInput[]
    updateMany?: MaterialAssetUsageUpdateManyWithWhereWithoutAssetInput | MaterialAssetUsageUpdateManyWithWhereWithoutAssetInput[]
    deleteMany?: MaterialAssetUsageScalarWhereInput | MaterialAssetUsageScalarWhereInput[]
  }

  export type SceneCreateNestedOneWithoutAssetUsagesInput = {
    create?: XOR<SceneCreateWithoutAssetUsagesInput, SceneUncheckedCreateWithoutAssetUsagesInput>
    connectOrCreate?: SceneCreateOrConnectWithoutAssetUsagesInput
    connect?: SceneWhereUniqueInput
  }

  export type AssetCreateNestedOneWithoutSceneUsagesInput = {
    create?: XOR<AssetCreateWithoutSceneUsagesInput, AssetUncheckedCreateWithoutSceneUsagesInput>
    connectOrCreate?: AssetCreateOrConnectWithoutSceneUsagesInput
    connect?: AssetWhereUniqueInput
  }

  export type SceneUpdateOneRequiredWithoutAssetUsagesNestedInput = {
    create?: XOR<SceneCreateWithoutAssetUsagesInput, SceneUncheckedCreateWithoutAssetUsagesInput>
    connectOrCreate?: SceneCreateOrConnectWithoutAssetUsagesInput
    upsert?: SceneUpsertWithoutAssetUsagesInput
    connect?: SceneWhereUniqueInput
    update?: XOR<XOR<SceneUpdateToOneWithWhereWithoutAssetUsagesInput, SceneUpdateWithoutAssetUsagesInput>, SceneUncheckedUpdateWithoutAssetUsagesInput>
  }

  export type AssetUpdateOneRequiredWithoutSceneUsagesNestedInput = {
    create?: XOR<AssetCreateWithoutSceneUsagesInput, AssetUncheckedCreateWithoutSceneUsagesInput>
    connectOrCreate?: AssetCreateOrConnectWithoutSceneUsagesInput
    upsert?: AssetUpsertWithoutSceneUsagesInput
    connect?: AssetWhereUniqueInput
    update?: XOR<XOR<AssetUpdateToOneWithWhereWithoutSceneUsagesInput, AssetUpdateWithoutSceneUsagesInput>, AssetUncheckedUpdateWithoutSceneUsagesInput>
  }

  export type ScriptCreateNestedOneWithoutAssetUsagesInput = {
    create?: XOR<ScriptCreateWithoutAssetUsagesInput, ScriptUncheckedCreateWithoutAssetUsagesInput>
    connectOrCreate?: ScriptCreateOrConnectWithoutAssetUsagesInput
    connect?: ScriptWhereUniqueInput
  }

  export type AssetCreateNestedOneWithoutScriptUsagesInput = {
    create?: XOR<AssetCreateWithoutScriptUsagesInput, AssetUncheckedCreateWithoutScriptUsagesInput>
    connectOrCreate?: AssetCreateOrConnectWithoutScriptUsagesInput
    connect?: AssetWhereUniqueInput
  }

  export type ScriptUpdateOneRequiredWithoutAssetUsagesNestedInput = {
    create?: XOR<ScriptCreateWithoutAssetUsagesInput, ScriptUncheckedCreateWithoutAssetUsagesInput>
    connectOrCreate?: ScriptCreateOrConnectWithoutAssetUsagesInput
    upsert?: ScriptUpsertWithoutAssetUsagesInput
    connect?: ScriptWhereUniqueInput
    update?: XOR<XOR<ScriptUpdateToOneWithWhereWithoutAssetUsagesInput, ScriptUpdateWithoutAssetUsagesInput>, ScriptUncheckedUpdateWithoutAssetUsagesInput>
  }

  export type AssetUpdateOneRequiredWithoutScriptUsagesNestedInput = {
    create?: XOR<AssetCreateWithoutScriptUsagesInput, AssetUncheckedCreateWithoutScriptUsagesInput>
    connectOrCreate?: AssetCreateOrConnectWithoutScriptUsagesInput
    upsert?: AssetUpsertWithoutScriptUsagesInput
    connect?: AssetWhereUniqueInput
    update?: XOR<XOR<AssetUpdateToOneWithWhereWithoutScriptUsagesInput, AssetUpdateWithoutScriptUsagesInput>, AssetUncheckedUpdateWithoutScriptUsagesInput>
  }

  export type MaterialCreateNestedOneWithoutAssetUsagesInput = {
    create?: XOR<MaterialCreateWithoutAssetUsagesInput, MaterialUncheckedCreateWithoutAssetUsagesInput>
    connectOrCreate?: MaterialCreateOrConnectWithoutAssetUsagesInput
    connect?: MaterialWhereUniqueInput
  }

  export type AssetCreateNestedOneWithoutMaterialUsagesInput = {
    create?: XOR<AssetCreateWithoutMaterialUsagesInput, AssetUncheckedCreateWithoutMaterialUsagesInput>
    connectOrCreate?: AssetCreateOrConnectWithoutMaterialUsagesInput
    connect?: AssetWhereUniqueInput
  }

  export type MaterialUpdateOneRequiredWithoutAssetUsagesNestedInput = {
    create?: XOR<MaterialCreateWithoutAssetUsagesInput, MaterialUncheckedCreateWithoutAssetUsagesInput>
    connectOrCreate?: MaterialCreateOrConnectWithoutAssetUsagesInput
    upsert?: MaterialUpsertWithoutAssetUsagesInput
    connect?: MaterialWhereUniqueInput
    update?: XOR<XOR<MaterialUpdateToOneWithWhereWithoutAssetUsagesInput, MaterialUpdateWithoutAssetUsagesInput>, MaterialUncheckedUpdateWithoutAssetUsagesInput>
  }

  export type AssetUpdateOneRequiredWithoutMaterialUsagesNestedInput = {
    create?: XOR<AssetCreateWithoutMaterialUsagesInput, AssetUncheckedCreateWithoutMaterialUsagesInput>
    connectOrCreate?: AssetCreateOrConnectWithoutMaterialUsagesInput
    upsert?: AssetUpsertWithoutMaterialUsagesInput
    connect?: AssetWhereUniqueInput
    update?: XOR<XOR<AssetUpdateToOneWithWhereWithoutMaterialUsagesInput, AssetUpdateWithoutMaterialUsagesInput>, AssetUncheckedUpdateWithoutMaterialUsagesInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }
  export type NestedJsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedEnumAssetTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.AssetType | EnumAssetTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AssetType[]
    notIn?: $Enums.AssetType[]
    not?: NestedEnumAssetTypeFilter<$PrismaModel> | $Enums.AssetType
  }

  export type NestedEnumAssetTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AssetType | EnumAssetTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AssetType[]
    notIn?: $Enums.AssetType[]
    not?: NestedEnumAssetTypeWithAggregatesFilter<$PrismaModel> | $Enums.AssetType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAssetTypeFilter<$PrismaModel>
    _max?: NestedEnumAssetTypeFilter<$PrismaModel>
  }

  export type ProjectCreateWithoutUserInput = {
    id?: string
    name: string
    description?: string | null
    path: string
    version?: string
    engineVersion?: string
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastOpened?: Date | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    scenes?: SceneCreateNestedManyWithoutProjectInput
    scripts?: ScriptCreateNestedManyWithoutProjectInput
    materials?: MaterialCreateNestedManyWithoutProjectInput
    terrains?: TerrainCreateNestedManyWithoutProjectInput
    animations?: AnimationCreateNestedManyWithoutProjectInput
    folders?: FolderCreateNestedManyWithoutProjectInput
    projectSettings?: ProjectSettingCreateNestedManyWithoutProjectInput
    assets?: AssetCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutUserInput = {
    id?: string
    name: string
    description?: string | null
    path: string
    version?: string
    engineVersion?: string
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastOpened?: Date | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    scenes?: SceneUncheckedCreateNestedManyWithoutProjectInput
    scripts?: ScriptUncheckedCreateNestedManyWithoutProjectInput
    materials?: MaterialUncheckedCreateNestedManyWithoutProjectInput
    terrains?: TerrainUncheckedCreateNestedManyWithoutProjectInput
    animations?: AnimationUncheckedCreateNestedManyWithoutProjectInput
    folders?: FolderUncheckedCreateNestedManyWithoutProjectInput
    projectSettings?: ProjectSettingUncheckedCreateNestedManyWithoutProjectInput
    assets?: AssetUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutUserInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutUserInput, ProjectUncheckedCreateWithoutUserInput>
  }

  export type ProjectCreateManyUserInputEnvelope = {
    data: ProjectCreateManyUserInput | ProjectCreateManyUserInput[]
  }

  export type UserSessionCreateWithoutUserInput = {
    id?: string
    token: string
    refreshToken?: string | null
    expiresAt: Date | string
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserSessionUncheckedCreateWithoutUserInput = {
    id?: string
    token: string
    refreshToken?: string | null
    expiresAt: Date | string
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserSessionCreateOrConnectWithoutUserInput = {
    where: UserSessionWhereUniqueInput
    create: XOR<UserSessionCreateWithoutUserInput, UserSessionUncheckedCreateWithoutUserInput>
  }

  export type UserSessionCreateManyUserInputEnvelope = {
    data: UserSessionCreateManyUserInput | UserSessionCreateManyUserInput[]
  }

  export type ProjectUpsertWithWhereUniqueWithoutUserInput = {
    where: ProjectWhereUniqueInput
    update: XOR<ProjectUpdateWithoutUserInput, ProjectUncheckedUpdateWithoutUserInput>
    create: XOR<ProjectCreateWithoutUserInput, ProjectUncheckedCreateWithoutUserInput>
  }

  export type ProjectUpdateWithWhereUniqueWithoutUserInput = {
    where: ProjectWhereUniqueInput
    data: XOR<ProjectUpdateWithoutUserInput, ProjectUncheckedUpdateWithoutUserInput>
  }

  export type ProjectUpdateManyWithWhereWithoutUserInput = {
    where: ProjectScalarWhereInput
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyWithoutUserInput>
  }

  export type ProjectScalarWhereInput = {
    AND?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
    OR?: ProjectScalarWhereInput[]
    NOT?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
    id?: StringFilter<"Project"> | string
    name?: StringFilter<"Project"> | string
    description?: StringNullableFilter<"Project"> | string | null
    path?: StringFilter<"Project"> | string
    version?: StringFilter<"Project"> | string
    engineVersion?: StringFilter<"Project"> | string
    userId?: StringFilter<"Project"> | string
    isPublic?: BoolFilter<"Project"> | boolean
    createdAt?: DateTimeFilter<"Project"> | Date | string
    updatedAt?: DateTimeFilter<"Project"> | Date | string
    lastOpened?: DateTimeFilter<"Project"> | Date | string
    settings?: JsonNullableFilter<"Project">
  }

  export type UserSessionUpsertWithWhereUniqueWithoutUserInput = {
    where: UserSessionWhereUniqueInput
    update: XOR<UserSessionUpdateWithoutUserInput, UserSessionUncheckedUpdateWithoutUserInput>
    create: XOR<UserSessionCreateWithoutUserInput, UserSessionUncheckedCreateWithoutUserInput>
  }

  export type UserSessionUpdateWithWhereUniqueWithoutUserInput = {
    where: UserSessionWhereUniqueInput
    data: XOR<UserSessionUpdateWithoutUserInput, UserSessionUncheckedUpdateWithoutUserInput>
  }

  export type UserSessionUpdateManyWithWhereWithoutUserInput = {
    where: UserSessionScalarWhereInput
    data: XOR<UserSessionUpdateManyMutationInput, UserSessionUncheckedUpdateManyWithoutUserInput>
  }

  export type UserSessionScalarWhereInput = {
    AND?: UserSessionScalarWhereInput | UserSessionScalarWhereInput[]
    OR?: UserSessionScalarWhereInput[]
    NOT?: UserSessionScalarWhereInput | UserSessionScalarWhereInput[]
    id?: StringFilter<"UserSession"> | string
    userId?: StringFilter<"UserSession"> | string
    token?: StringFilter<"UserSession"> | string
    refreshToken?: StringNullableFilter<"UserSession"> | string | null
    expiresAt?: DateTimeFilter<"UserSession"> | Date | string
    ipAddress?: StringNullableFilter<"UserSession"> | string | null
    userAgent?: StringNullableFilter<"UserSession"> | string | null
    createdAt?: DateTimeFilter<"UserSession"> | Date | string
    updatedAt?: DateTimeFilter<"UserSession"> | Date | string
  }

  export type UserCreateWithoutSessionsInput = {
    id?: string
    email: string
    username?: string | null
    firstName?: string | null
    lastName?: string | null
    password: string
    avatar?: string | null
    isActive?: boolean
    isVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    projects?: ProjectCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSessionsInput = {
    id?: string
    email: string
    username?: string | null
    firstName?: string | null
    lastName?: string | null
    password: string
    avatar?: string | null
    isActive?: boolean
    isVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    projects?: ProjectUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpsertWithoutSessionsInput = {
    update: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    projects?: ProjectUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    projects?: ProjectUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutProjectsInput = {
    id?: string
    email: string
    username?: string | null
    firstName?: string | null
    lastName?: string | null
    password: string
    avatar?: string | null
    isActive?: boolean
    isVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    sessions?: UserSessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutProjectsInput = {
    id?: string
    email: string
    username?: string | null
    firstName?: string | null
    lastName?: string | null
    password: string
    avatar?: string | null
    isActive?: boolean
    isVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    sessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutProjectsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProjectsInput, UserUncheckedCreateWithoutProjectsInput>
  }

  export type SceneCreateWithoutProjectInput = {
    id?: string
    name: string
    path: string
    type?: string
    description?: string | null
    isMain?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    sceneData?: NullableJsonNullValueInput | InputJsonValue
    nodes?: SceneNodeCreateNestedManyWithoutSceneInput
    assetUsages?: SceneAssetUsageCreateNestedManyWithoutSceneInput
  }

  export type SceneUncheckedCreateWithoutProjectInput = {
    id?: string
    name: string
    path: string
    type?: string
    description?: string | null
    isMain?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    sceneData?: NullableJsonNullValueInput | InputJsonValue
    nodes?: SceneNodeUncheckedCreateNestedManyWithoutSceneInput
    assetUsages?: SceneAssetUsageUncheckedCreateNestedManyWithoutSceneInput
  }

  export type SceneCreateOrConnectWithoutProjectInput = {
    where: SceneWhereUniqueInput
    create: XOR<SceneCreateWithoutProjectInput, SceneUncheckedCreateWithoutProjectInput>
  }

  export type SceneCreateManyProjectInputEnvelope = {
    data: SceneCreateManyProjectInput | SceneCreateManyProjectInput[]
  }

  export type ScriptCreateWithoutProjectInput = {
    id?: string
    name: string
    path: string
    language?: string
    content?: string
    description?: string | null
    isTemplate?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    assetUsages?: ScriptAssetUsageCreateNestedManyWithoutScriptInput
  }

  export type ScriptUncheckedCreateWithoutProjectInput = {
    id?: string
    name: string
    path: string
    language?: string
    content?: string
    description?: string | null
    isTemplate?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    assetUsages?: ScriptAssetUsageUncheckedCreateNestedManyWithoutScriptInput
  }

  export type ScriptCreateOrConnectWithoutProjectInput = {
    where: ScriptWhereUniqueInput
    create: XOR<ScriptCreateWithoutProjectInput, ScriptUncheckedCreateWithoutProjectInput>
  }

  export type ScriptCreateManyProjectInputEnvelope = {
    data: ScriptCreateManyProjectInput | ScriptCreateManyProjectInput[]
  }

  export type MaterialCreateWithoutProjectInput = {
    id?: string
    name: string
    type?: string
    albedo?: string | null
    roughness?: number | null
    metalness?: number | null
    emission?: string | null
    albedoMap?: string | null
    normalMap?: string | null
    roughnessMap?: string | null
    metalnessMap?: string | null
    emissionMap?: string | null
    shaderCode?: string | null
    shaderParams?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    assetUsages?: MaterialAssetUsageCreateNestedManyWithoutMaterialInput
  }

  export type MaterialUncheckedCreateWithoutProjectInput = {
    id?: string
    name: string
    type?: string
    albedo?: string | null
    roughness?: number | null
    metalness?: number | null
    emission?: string | null
    albedoMap?: string | null
    normalMap?: string | null
    roughnessMap?: string | null
    metalnessMap?: string | null
    emissionMap?: string | null
    shaderCode?: string | null
    shaderParams?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    assetUsages?: MaterialAssetUsageUncheckedCreateNestedManyWithoutMaterialInput
  }

  export type MaterialCreateOrConnectWithoutProjectInput = {
    where: MaterialWhereUniqueInput
    create: XOR<MaterialCreateWithoutProjectInput, MaterialUncheckedCreateWithoutProjectInput>
  }

  export type MaterialCreateManyProjectInputEnvelope = {
    data: MaterialCreateManyProjectInput | MaterialCreateManyProjectInput[]
  }

  export type TerrainCreateWithoutProjectInput = {
    id?: string
    name: string
    width?: number
    height?: number
    scale?: number
    heightmapPath?: string | null
    heightmapData?: NullableJsonNullValueInput | InputJsonValue
    textureLayers?: NullableJsonNullValueInput | InputJsonValue
    brushSettings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TerrainUncheckedCreateWithoutProjectInput = {
    id?: string
    name: string
    width?: number
    height?: number
    scale?: number
    heightmapPath?: string | null
    heightmapData?: NullableJsonNullValueInput | InputJsonValue
    textureLayers?: NullableJsonNullValueInput | InputJsonValue
    brushSettings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TerrainCreateOrConnectWithoutProjectInput = {
    where: TerrainWhereUniqueInput
    create: XOR<TerrainCreateWithoutProjectInput, TerrainUncheckedCreateWithoutProjectInput>
  }

  export type TerrainCreateManyProjectInputEnvelope = {
    data: TerrainCreateManyProjectInput | TerrainCreateManyProjectInput[]
  }

  export type AnimationCreateWithoutProjectInput = {
    id?: string
    name: string
    type?: string
    duration?: number | null
    frameRate?: number | null
    states?: NullableJsonNullValueInput | InputJsonValue
    transitions?: NullableJsonNullValueInput | InputJsonValue
    parameters?: NullableJsonNullValueInput | InputJsonValue
    tracks?: NullableJsonNullValueInput | InputJsonValue
    keyframes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AnimationUncheckedCreateWithoutProjectInput = {
    id?: string
    name: string
    type?: string
    duration?: number | null
    frameRate?: number | null
    states?: NullableJsonNullValueInput | InputJsonValue
    transitions?: NullableJsonNullValueInput | InputJsonValue
    parameters?: NullableJsonNullValueInput | InputJsonValue
    tracks?: NullableJsonNullValueInput | InputJsonValue
    keyframes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AnimationCreateOrConnectWithoutProjectInput = {
    where: AnimationWhereUniqueInput
    create: XOR<AnimationCreateWithoutProjectInput, AnimationUncheckedCreateWithoutProjectInput>
  }

  export type AnimationCreateManyProjectInputEnvelope = {
    data: AnimationCreateManyProjectInput | AnimationCreateManyProjectInput[]
  }

  export type FolderCreateWithoutProjectInput = {
    id?: string
    name: string
    path: string
    createdAt?: Date | string
    updatedAt?: Date | string
    parent?: FolderCreateNestedOneWithoutChildrenInput
    children?: FolderCreateNestedManyWithoutParentInput
    assets?: AssetCreateNestedManyWithoutFolderInput
  }

  export type FolderUncheckedCreateWithoutProjectInput = {
    id?: string
    name: string
    path: string
    parentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    children?: FolderUncheckedCreateNestedManyWithoutParentInput
    assets?: AssetUncheckedCreateNestedManyWithoutFolderInput
  }

  export type FolderCreateOrConnectWithoutProjectInput = {
    where: FolderWhereUniqueInput
    create: XOR<FolderCreateWithoutProjectInput, FolderUncheckedCreateWithoutProjectInput>
  }

  export type FolderCreateManyProjectInputEnvelope = {
    data: FolderCreateManyProjectInput | FolderCreateManyProjectInput[]
  }

  export type ProjectSettingCreateWithoutProjectInput = {
    id?: string
    key: string
    value: string
    type?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProjectSettingUncheckedCreateWithoutProjectInput = {
    id?: string
    key: string
    value: string
    type?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProjectSettingCreateOrConnectWithoutProjectInput = {
    where: ProjectSettingWhereUniqueInput
    create: XOR<ProjectSettingCreateWithoutProjectInput, ProjectSettingUncheckedCreateWithoutProjectInput>
  }

  export type ProjectSettingCreateManyProjectInputEnvelope = {
    data: ProjectSettingCreateManyProjectInput | ProjectSettingCreateManyProjectInput[]
  }

  export type AssetCreateWithoutProjectInput = {
    id?: string
    name: string
    type: $Enums.AssetType
    filePath: string
    fileSize: number
    mimeType?: string | null
    checksum?: string | null
    width?: number | null
    height?: number | null
    duration?: number | null
    channels?: number | null
    sampleRate?: number | null
    bitRate?: number | null
    tags?: NullableJsonNullValueInput | InputJsonValue
    version?: string
    dependencies?: NullableJsonNullValueInput | InputJsonValue
    originalName?: string | null
    importedAt?: Date | string
    importSettings?: NullableJsonNullValueInput | InputJsonValue
    thumbnail?: string | null
    preview?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    folder?: FolderCreateNestedOneWithoutAssetsInput
    parent?: AssetCreateNestedOneWithoutVersionsInput
    versions?: AssetCreateNestedManyWithoutParentInput
    sceneUsages?: SceneAssetUsageCreateNestedManyWithoutAssetInput
    scriptUsages?: ScriptAssetUsageCreateNestedManyWithoutAssetInput
    materialUsages?: MaterialAssetUsageCreateNestedManyWithoutAssetInput
  }

  export type AssetUncheckedCreateWithoutProjectInput = {
    id?: string
    name: string
    type: $Enums.AssetType
    filePath: string
    fileSize: number
    mimeType?: string | null
    checksum?: string | null
    width?: number | null
    height?: number | null
    duration?: number | null
    channels?: number | null
    sampleRate?: number | null
    bitRate?: number | null
    folderId?: string | null
    tags?: NullableJsonNullValueInput | InputJsonValue
    version?: string
    parentId?: string | null
    dependencies?: NullableJsonNullValueInput | InputJsonValue
    originalName?: string | null
    importedAt?: Date | string
    importSettings?: NullableJsonNullValueInput | InputJsonValue
    thumbnail?: string | null
    preview?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    versions?: AssetUncheckedCreateNestedManyWithoutParentInput
    sceneUsages?: SceneAssetUsageUncheckedCreateNestedManyWithoutAssetInput
    scriptUsages?: ScriptAssetUsageUncheckedCreateNestedManyWithoutAssetInput
    materialUsages?: MaterialAssetUsageUncheckedCreateNestedManyWithoutAssetInput
  }

  export type AssetCreateOrConnectWithoutProjectInput = {
    where: AssetWhereUniqueInput
    create: XOR<AssetCreateWithoutProjectInput, AssetUncheckedCreateWithoutProjectInput>
  }

  export type AssetCreateManyProjectInputEnvelope = {
    data: AssetCreateManyProjectInput | AssetCreateManyProjectInput[]
  }

  export type UserUpsertWithoutProjectsInput = {
    update: XOR<UserUpdateWithoutProjectsInput, UserUncheckedUpdateWithoutProjectsInput>
    create: XOR<UserCreateWithoutProjectsInput, UserUncheckedCreateWithoutProjectsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutProjectsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutProjectsInput, UserUncheckedUpdateWithoutProjectsInput>
  }

  export type UserUpdateWithoutProjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessions?: UserSessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutProjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type SceneUpsertWithWhereUniqueWithoutProjectInput = {
    where: SceneWhereUniqueInput
    update: XOR<SceneUpdateWithoutProjectInput, SceneUncheckedUpdateWithoutProjectInput>
    create: XOR<SceneCreateWithoutProjectInput, SceneUncheckedCreateWithoutProjectInput>
  }

  export type SceneUpdateWithWhereUniqueWithoutProjectInput = {
    where: SceneWhereUniqueInput
    data: XOR<SceneUpdateWithoutProjectInput, SceneUncheckedUpdateWithoutProjectInput>
  }

  export type SceneUpdateManyWithWhereWithoutProjectInput = {
    where: SceneScalarWhereInput
    data: XOR<SceneUpdateManyMutationInput, SceneUncheckedUpdateManyWithoutProjectInput>
  }

  export type SceneScalarWhereInput = {
    AND?: SceneScalarWhereInput | SceneScalarWhereInput[]
    OR?: SceneScalarWhereInput[]
    NOT?: SceneScalarWhereInput | SceneScalarWhereInput[]
    id?: StringFilter<"Scene"> | string
    name?: StringFilter<"Scene"> | string
    path?: StringFilter<"Scene"> | string
    type?: StringFilter<"Scene"> | string
    projectId?: StringFilter<"Scene"> | string
    description?: StringNullableFilter<"Scene"> | string | null
    isMain?: BoolFilter<"Scene"> | boolean
    createdAt?: DateTimeFilter<"Scene"> | Date | string
    updatedAt?: DateTimeFilter<"Scene"> | Date | string
    sceneData?: JsonNullableFilter<"Scene">
  }

  export type ScriptUpsertWithWhereUniqueWithoutProjectInput = {
    where: ScriptWhereUniqueInput
    update: XOR<ScriptUpdateWithoutProjectInput, ScriptUncheckedUpdateWithoutProjectInput>
    create: XOR<ScriptCreateWithoutProjectInput, ScriptUncheckedCreateWithoutProjectInput>
  }

  export type ScriptUpdateWithWhereUniqueWithoutProjectInput = {
    where: ScriptWhereUniqueInput
    data: XOR<ScriptUpdateWithoutProjectInput, ScriptUncheckedUpdateWithoutProjectInput>
  }

  export type ScriptUpdateManyWithWhereWithoutProjectInput = {
    where: ScriptScalarWhereInput
    data: XOR<ScriptUpdateManyMutationInput, ScriptUncheckedUpdateManyWithoutProjectInput>
  }

  export type ScriptScalarWhereInput = {
    AND?: ScriptScalarWhereInput | ScriptScalarWhereInput[]
    OR?: ScriptScalarWhereInput[]
    NOT?: ScriptScalarWhereInput | ScriptScalarWhereInput[]
    id?: StringFilter<"Script"> | string
    name?: StringFilter<"Script"> | string
    path?: StringFilter<"Script"> | string
    language?: StringFilter<"Script"> | string
    content?: StringFilter<"Script"> | string
    projectId?: StringFilter<"Script"> | string
    description?: StringNullableFilter<"Script"> | string | null
    isTemplate?: BoolFilter<"Script"> | boolean
    createdAt?: DateTimeFilter<"Script"> | Date | string
    updatedAt?: DateTimeFilter<"Script"> | Date | string
  }

  export type MaterialUpsertWithWhereUniqueWithoutProjectInput = {
    where: MaterialWhereUniqueInput
    update: XOR<MaterialUpdateWithoutProjectInput, MaterialUncheckedUpdateWithoutProjectInput>
    create: XOR<MaterialCreateWithoutProjectInput, MaterialUncheckedCreateWithoutProjectInput>
  }

  export type MaterialUpdateWithWhereUniqueWithoutProjectInput = {
    where: MaterialWhereUniqueInput
    data: XOR<MaterialUpdateWithoutProjectInput, MaterialUncheckedUpdateWithoutProjectInput>
  }

  export type MaterialUpdateManyWithWhereWithoutProjectInput = {
    where: MaterialScalarWhereInput
    data: XOR<MaterialUpdateManyMutationInput, MaterialUncheckedUpdateManyWithoutProjectInput>
  }

  export type MaterialScalarWhereInput = {
    AND?: MaterialScalarWhereInput | MaterialScalarWhereInput[]
    OR?: MaterialScalarWhereInput[]
    NOT?: MaterialScalarWhereInput | MaterialScalarWhereInput[]
    id?: StringFilter<"Material"> | string
    name?: StringFilter<"Material"> | string
    type?: StringFilter<"Material"> | string
    projectId?: StringFilter<"Material"> | string
    albedo?: StringNullableFilter<"Material"> | string | null
    roughness?: FloatNullableFilter<"Material"> | number | null
    metalness?: FloatNullableFilter<"Material"> | number | null
    emission?: StringNullableFilter<"Material"> | string | null
    albedoMap?: StringNullableFilter<"Material"> | string | null
    normalMap?: StringNullableFilter<"Material"> | string | null
    roughnessMap?: StringNullableFilter<"Material"> | string | null
    metalnessMap?: StringNullableFilter<"Material"> | string | null
    emissionMap?: StringNullableFilter<"Material"> | string | null
    shaderCode?: StringNullableFilter<"Material"> | string | null
    shaderParams?: JsonNullableFilter<"Material">
    createdAt?: DateTimeFilter<"Material"> | Date | string
    updatedAt?: DateTimeFilter<"Material"> | Date | string
  }

  export type TerrainUpsertWithWhereUniqueWithoutProjectInput = {
    where: TerrainWhereUniqueInput
    update: XOR<TerrainUpdateWithoutProjectInput, TerrainUncheckedUpdateWithoutProjectInput>
    create: XOR<TerrainCreateWithoutProjectInput, TerrainUncheckedCreateWithoutProjectInput>
  }

  export type TerrainUpdateWithWhereUniqueWithoutProjectInput = {
    where: TerrainWhereUniqueInput
    data: XOR<TerrainUpdateWithoutProjectInput, TerrainUncheckedUpdateWithoutProjectInput>
  }

  export type TerrainUpdateManyWithWhereWithoutProjectInput = {
    where: TerrainScalarWhereInput
    data: XOR<TerrainUpdateManyMutationInput, TerrainUncheckedUpdateManyWithoutProjectInput>
  }

  export type TerrainScalarWhereInput = {
    AND?: TerrainScalarWhereInput | TerrainScalarWhereInput[]
    OR?: TerrainScalarWhereInput[]
    NOT?: TerrainScalarWhereInput | TerrainScalarWhereInput[]
    id?: StringFilter<"Terrain"> | string
    name?: StringFilter<"Terrain"> | string
    projectId?: StringFilter<"Terrain"> | string
    width?: IntFilter<"Terrain"> | number
    height?: IntFilter<"Terrain"> | number
    scale?: FloatFilter<"Terrain"> | number
    heightmapPath?: StringNullableFilter<"Terrain"> | string | null
    heightmapData?: JsonNullableFilter<"Terrain">
    textureLayers?: JsonNullableFilter<"Terrain">
    brushSettings?: JsonNullableFilter<"Terrain">
    createdAt?: DateTimeFilter<"Terrain"> | Date | string
    updatedAt?: DateTimeFilter<"Terrain"> | Date | string
  }

  export type AnimationUpsertWithWhereUniqueWithoutProjectInput = {
    where: AnimationWhereUniqueInput
    update: XOR<AnimationUpdateWithoutProjectInput, AnimationUncheckedUpdateWithoutProjectInput>
    create: XOR<AnimationCreateWithoutProjectInput, AnimationUncheckedCreateWithoutProjectInput>
  }

  export type AnimationUpdateWithWhereUniqueWithoutProjectInput = {
    where: AnimationWhereUniqueInput
    data: XOR<AnimationUpdateWithoutProjectInput, AnimationUncheckedUpdateWithoutProjectInput>
  }

  export type AnimationUpdateManyWithWhereWithoutProjectInput = {
    where: AnimationScalarWhereInput
    data: XOR<AnimationUpdateManyMutationInput, AnimationUncheckedUpdateManyWithoutProjectInput>
  }

  export type AnimationScalarWhereInput = {
    AND?: AnimationScalarWhereInput | AnimationScalarWhereInput[]
    OR?: AnimationScalarWhereInput[]
    NOT?: AnimationScalarWhereInput | AnimationScalarWhereInput[]
    id?: StringFilter<"Animation"> | string
    name?: StringFilter<"Animation"> | string
    type?: StringFilter<"Animation"> | string
    projectId?: StringFilter<"Animation"> | string
    duration?: FloatNullableFilter<"Animation"> | number | null
    frameRate?: IntNullableFilter<"Animation"> | number | null
    states?: JsonNullableFilter<"Animation">
    transitions?: JsonNullableFilter<"Animation">
    parameters?: JsonNullableFilter<"Animation">
    tracks?: JsonNullableFilter<"Animation">
    keyframes?: JsonNullableFilter<"Animation">
    createdAt?: DateTimeFilter<"Animation"> | Date | string
    updatedAt?: DateTimeFilter<"Animation"> | Date | string
  }

  export type FolderUpsertWithWhereUniqueWithoutProjectInput = {
    where: FolderWhereUniqueInput
    update: XOR<FolderUpdateWithoutProjectInput, FolderUncheckedUpdateWithoutProjectInput>
    create: XOR<FolderCreateWithoutProjectInput, FolderUncheckedCreateWithoutProjectInput>
  }

  export type FolderUpdateWithWhereUniqueWithoutProjectInput = {
    where: FolderWhereUniqueInput
    data: XOR<FolderUpdateWithoutProjectInput, FolderUncheckedUpdateWithoutProjectInput>
  }

  export type FolderUpdateManyWithWhereWithoutProjectInput = {
    where: FolderScalarWhereInput
    data: XOR<FolderUpdateManyMutationInput, FolderUncheckedUpdateManyWithoutProjectInput>
  }

  export type FolderScalarWhereInput = {
    AND?: FolderScalarWhereInput | FolderScalarWhereInput[]
    OR?: FolderScalarWhereInput[]
    NOT?: FolderScalarWhereInput | FolderScalarWhereInput[]
    id?: StringFilter<"Folder"> | string
    name?: StringFilter<"Folder"> | string
    path?: StringFilter<"Folder"> | string
    parentId?: StringNullableFilter<"Folder"> | string | null
    projectId?: StringFilter<"Folder"> | string
    createdAt?: DateTimeFilter<"Folder"> | Date | string
    updatedAt?: DateTimeFilter<"Folder"> | Date | string
  }

  export type ProjectSettingUpsertWithWhereUniqueWithoutProjectInput = {
    where: ProjectSettingWhereUniqueInput
    update: XOR<ProjectSettingUpdateWithoutProjectInput, ProjectSettingUncheckedUpdateWithoutProjectInput>
    create: XOR<ProjectSettingCreateWithoutProjectInput, ProjectSettingUncheckedCreateWithoutProjectInput>
  }

  export type ProjectSettingUpdateWithWhereUniqueWithoutProjectInput = {
    where: ProjectSettingWhereUniqueInput
    data: XOR<ProjectSettingUpdateWithoutProjectInput, ProjectSettingUncheckedUpdateWithoutProjectInput>
  }

  export type ProjectSettingUpdateManyWithWhereWithoutProjectInput = {
    where: ProjectSettingScalarWhereInput
    data: XOR<ProjectSettingUpdateManyMutationInput, ProjectSettingUncheckedUpdateManyWithoutProjectInput>
  }

  export type ProjectSettingScalarWhereInput = {
    AND?: ProjectSettingScalarWhereInput | ProjectSettingScalarWhereInput[]
    OR?: ProjectSettingScalarWhereInput[]
    NOT?: ProjectSettingScalarWhereInput | ProjectSettingScalarWhereInput[]
    id?: StringFilter<"ProjectSetting"> | string
    key?: StringFilter<"ProjectSetting"> | string
    value?: StringFilter<"ProjectSetting"> | string
    type?: StringFilter<"ProjectSetting"> | string
    projectId?: StringFilter<"ProjectSetting"> | string
    createdAt?: DateTimeFilter<"ProjectSetting"> | Date | string
    updatedAt?: DateTimeFilter<"ProjectSetting"> | Date | string
  }

  export type AssetUpsertWithWhereUniqueWithoutProjectInput = {
    where: AssetWhereUniqueInput
    update: XOR<AssetUpdateWithoutProjectInput, AssetUncheckedUpdateWithoutProjectInput>
    create: XOR<AssetCreateWithoutProjectInput, AssetUncheckedCreateWithoutProjectInput>
  }

  export type AssetUpdateWithWhereUniqueWithoutProjectInput = {
    where: AssetWhereUniqueInput
    data: XOR<AssetUpdateWithoutProjectInput, AssetUncheckedUpdateWithoutProjectInput>
  }

  export type AssetUpdateManyWithWhereWithoutProjectInput = {
    where: AssetScalarWhereInput
    data: XOR<AssetUpdateManyMutationInput, AssetUncheckedUpdateManyWithoutProjectInput>
  }

  export type AssetScalarWhereInput = {
    AND?: AssetScalarWhereInput | AssetScalarWhereInput[]
    OR?: AssetScalarWhereInput[]
    NOT?: AssetScalarWhereInput | AssetScalarWhereInput[]
    id?: StringFilter<"Asset"> | string
    name?: StringFilter<"Asset"> | string
    type?: EnumAssetTypeFilter<"Asset"> | $Enums.AssetType
    filePath?: StringFilter<"Asset"> | string
    fileSize?: IntFilter<"Asset"> | number
    mimeType?: StringNullableFilter<"Asset"> | string | null
    checksum?: StringNullableFilter<"Asset"> | string | null
    width?: IntNullableFilter<"Asset"> | number | null
    height?: IntNullableFilter<"Asset"> | number | null
    duration?: FloatNullableFilter<"Asset"> | number | null
    channels?: IntNullableFilter<"Asset"> | number | null
    sampleRate?: IntNullableFilter<"Asset"> | number | null
    bitRate?: IntNullableFilter<"Asset"> | number | null
    projectId?: StringFilter<"Asset"> | string
    folderId?: StringNullableFilter<"Asset"> | string | null
    tags?: JsonNullableFilter<"Asset">
    version?: StringFilter<"Asset"> | string
    parentId?: StringNullableFilter<"Asset"> | string | null
    dependencies?: JsonNullableFilter<"Asset">
    originalName?: StringNullableFilter<"Asset"> | string | null
    importedAt?: DateTimeFilter<"Asset"> | Date | string
    importSettings?: JsonNullableFilter<"Asset">
    thumbnail?: StringNullableFilter<"Asset"> | string | null
    preview?: StringNullableFilter<"Asset"> | string | null
    createdAt?: DateTimeFilter<"Asset"> | Date | string
    updatedAt?: DateTimeFilter<"Asset"> | Date | string
  }

  export type ProjectCreateWithoutFoldersInput = {
    id?: string
    name: string
    description?: string | null
    path: string
    version?: string
    engineVersion?: string
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastOpened?: Date | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    user: UserCreateNestedOneWithoutProjectsInput
    scenes?: SceneCreateNestedManyWithoutProjectInput
    scripts?: ScriptCreateNestedManyWithoutProjectInput
    materials?: MaterialCreateNestedManyWithoutProjectInput
    terrains?: TerrainCreateNestedManyWithoutProjectInput
    animations?: AnimationCreateNestedManyWithoutProjectInput
    projectSettings?: ProjectSettingCreateNestedManyWithoutProjectInput
    assets?: AssetCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutFoldersInput = {
    id?: string
    name: string
    description?: string | null
    path: string
    version?: string
    engineVersion?: string
    userId: string
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastOpened?: Date | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    scenes?: SceneUncheckedCreateNestedManyWithoutProjectInput
    scripts?: ScriptUncheckedCreateNestedManyWithoutProjectInput
    materials?: MaterialUncheckedCreateNestedManyWithoutProjectInput
    terrains?: TerrainUncheckedCreateNestedManyWithoutProjectInput
    animations?: AnimationUncheckedCreateNestedManyWithoutProjectInput
    projectSettings?: ProjectSettingUncheckedCreateNestedManyWithoutProjectInput
    assets?: AssetUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutFoldersInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutFoldersInput, ProjectUncheckedCreateWithoutFoldersInput>
  }

  export type FolderCreateWithoutChildrenInput = {
    id?: string
    name: string
    path: string
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutFoldersInput
    parent?: FolderCreateNestedOneWithoutChildrenInput
    assets?: AssetCreateNestedManyWithoutFolderInput
  }

  export type FolderUncheckedCreateWithoutChildrenInput = {
    id?: string
    name: string
    path: string
    parentId?: string | null
    projectId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    assets?: AssetUncheckedCreateNestedManyWithoutFolderInput
  }

  export type FolderCreateOrConnectWithoutChildrenInput = {
    where: FolderWhereUniqueInput
    create: XOR<FolderCreateWithoutChildrenInput, FolderUncheckedCreateWithoutChildrenInput>
  }

  export type FolderCreateWithoutParentInput = {
    id?: string
    name: string
    path: string
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutFoldersInput
    children?: FolderCreateNestedManyWithoutParentInput
    assets?: AssetCreateNestedManyWithoutFolderInput
  }

  export type FolderUncheckedCreateWithoutParentInput = {
    id?: string
    name: string
    path: string
    projectId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    children?: FolderUncheckedCreateNestedManyWithoutParentInput
    assets?: AssetUncheckedCreateNestedManyWithoutFolderInput
  }

  export type FolderCreateOrConnectWithoutParentInput = {
    where: FolderWhereUniqueInput
    create: XOR<FolderCreateWithoutParentInput, FolderUncheckedCreateWithoutParentInput>
  }

  export type FolderCreateManyParentInputEnvelope = {
    data: FolderCreateManyParentInput | FolderCreateManyParentInput[]
  }

  export type AssetCreateWithoutFolderInput = {
    id?: string
    name: string
    type: $Enums.AssetType
    filePath: string
    fileSize: number
    mimeType?: string | null
    checksum?: string | null
    width?: number | null
    height?: number | null
    duration?: number | null
    channels?: number | null
    sampleRate?: number | null
    bitRate?: number | null
    tags?: NullableJsonNullValueInput | InputJsonValue
    version?: string
    dependencies?: NullableJsonNullValueInput | InputJsonValue
    originalName?: string | null
    importedAt?: Date | string
    importSettings?: NullableJsonNullValueInput | InputJsonValue
    thumbnail?: string | null
    preview?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutAssetsInput
    parent?: AssetCreateNestedOneWithoutVersionsInput
    versions?: AssetCreateNestedManyWithoutParentInput
    sceneUsages?: SceneAssetUsageCreateNestedManyWithoutAssetInput
    scriptUsages?: ScriptAssetUsageCreateNestedManyWithoutAssetInput
    materialUsages?: MaterialAssetUsageCreateNestedManyWithoutAssetInput
  }

  export type AssetUncheckedCreateWithoutFolderInput = {
    id?: string
    name: string
    type: $Enums.AssetType
    filePath: string
    fileSize: number
    mimeType?: string | null
    checksum?: string | null
    width?: number | null
    height?: number | null
    duration?: number | null
    channels?: number | null
    sampleRate?: number | null
    bitRate?: number | null
    projectId: string
    tags?: NullableJsonNullValueInput | InputJsonValue
    version?: string
    parentId?: string | null
    dependencies?: NullableJsonNullValueInput | InputJsonValue
    originalName?: string | null
    importedAt?: Date | string
    importSettings?: NullableJsonNullValueInput | InputJsonValue
    thumbnail?: string | null
    preview?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    versions?: AssetUncheckedCreateNestedManyWithoutParentInput
    sceneUsages?: SceneAssetUsageUncheckedCreateNestedManyWithoutAssetInput
    scriptUsages?: ScriptAssetUsageUncheckedCreateNestedManyWithoutAssetInput
    materialUsages?: MaterialAssetUsageUncheckedCreateNestedManyWithoutAssetInput
  }

  export type AssetCreateOrConnectWithoutFolderInput = {
    where: AssetWhereUniqueInput
    create: XOR<AssetCreateWithoutFolderInput, AssetUncheckedCreateWithoutFolderInput>
  }

  export type AssetCreateManyFolderInputEnvelope = {
    data: AssetCreateManyFolderInput | AssetCreateManyFolderInput[]
  }

  export type ProjectUpsertWithoutFoldersInput = {
    update: XOR<ProjectUpdateWithoutFoldersInput, ProjectUncheckedUpdateWithoutFoldersInput>
    create: XOR<ProjectCreateWithoutFoldersInput, ProjectUncheckedCreateWithoutFoldersInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutFoldersInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutFoldersInput, ProjectUncheckedUpdateWithoutFoldersInput>
  }

  export type ProjectUpdateWithoutFoldersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    path?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    engineVersion?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastOpened?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    user?: UserUpdateOneRequiredWithoutProjectsNestedInput
    scenes?: SceneUpdateManyWithoutProjectNestedInput
    scripts?: ScriptUpdateManyWithoutProjectNestedInput
    materials?: MaterialUpdateManyWithoutProjectNestedInput
    terrains?: TerrainUpdateManyWithoutProjectNestedInput
    animations?: AnimationUpdateManyWithoutProjectNestedInput
    projectSettings?: ProjectSettingUpdateManyWithoutProjectNestedInput
    assets?: AssetUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutFoldersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    path?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    engineVersion?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastOpened?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    scenes?: SceneUncheckedUpdateManyWithoutProjectNestedInput
    scripts?: ScriptUncheckedUpdateManyWithoutProjectNestedInput
    materials?: MaterialUncheckedUpdateManyWithoutProjectNestedInput
    terrains?: TerrainUncheckedUpdateManyWithoutProjectNestedInput
    animations?: AnimationUncheckedUpdateManyWithoutProjectNestedInput
    projectSettings?: ProjectSettingUncheckedUpdateManyWithoutProjectNestedInput
    assets?: AssetUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type FolderUpsertWithoutChildrenInput = {
    update: XOR<FolderUpdateWithoutChildrenInput, FolderUncheckedUpdateWithoutChildrenInput>
    create: XOR<FolderCreateWithoutChildrenInput, FolderUncheckedCreateWithoutChildrenInput>
    where?: FolderWhereInput
  }

  export type FolderUpdateToOneWithWhereWithoutChildrenInput = {
    where?: FolderWhereInput
    data: XOR<FolderUpdateWithoutChildrenInput, FolderUncheckedUpdateWithoutChildrenInput>
  }

  export type FolderUpdateWithoutChildrenInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutFoldersNestedInput
    parent?: FolderUpdateOneWithoutChildrenNestedInput
    assets?: AssetUpdateManyWithoutFolderNestedInput
  }

  export type FolderUncheckedUpdateWithoutChildrenInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assets?: AssetUncheckedUpdateManyWithoutFolderNestedInput
  }

  export type FolderUpsertWithWhereUniqueWithoutParentInput = {
    where: FolderWhereUniqueInput
    update: XOR<FolderUpdateWithoutParentInput, FolderUncheckedUpdateWithoutParentInput>
    create: XOR<FolderCreateWithoutParentInput, FolderUncheckedCreateWithoutParentInput>
  }

  export type FolderUpdateWithWhereUniqueWithoutParentInput = {
    where: FolderWhereUniqueInput
    data: XOR<FolderUpdateWithoutParentInput, FolderUncheckedUpdateWithoutParentInput>
  }

  export type FolderUpdateManyWithWhereWithoutParentInput = {
    where: FolderScalarWhereInput
    data: XOR<FolderUpdateManyMutationInput, FolderUncheckedUpdateManyWithoutParentInput>
  }

  export type AssetUpsertWithWhereUniqueWithoutFolderInput = {
    where: AssetWhereUniqueInput
    update: XOR<AssetUpdateWithoutFolderInput, AssetUncheckedUpdateWithoutFolderInput>
    create: XOR<AssetCreateWithoutFolderInput, AssetUncheckedCreateWithoutFolderInput>
  }

  export type AssetUpdateWithWhereUniqueWithoutFolderInput = {
    where: AssetWhereUniqueInput
    data: XOR<AssetUpdateWithoutFolderInput, AssetUncheckedUpdateWithoutFolderInput>
  }

  export type AssetUpdateManyWithWhereWithoutFolderInput = {
    where: AssetScalarWhereInput
    data: XOR<AssetUpdateManyMutationInput, AssetUncheckedUpdateManyWithoutFolderInput>
  }

  export type ProjectCreateWithoutScenesInput = {
    id?: string
    name: string
    description?: string | null
    path: string
    version?: string
    engineVersion?: string
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastOpened?: Date | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    user: UserCreateNestedOneWithoutProjectsInput
    scripts?: ScriptCreateNestedManyWithoutProjectInput
    materials?: MaterialCreateNestedManyWithoutProjectInput
    terrains?: TerrainCreateNestedManyWithoutProjectInput
    animations?: AnimationCreateNestedManyWithoutProjectInput
    folders?: FolderCreateNestedManyWithoutProjectInput
    projectSettings?: ProjectSettingCreateNestedManyWithoutProjectInput
    assets?: AssetCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutScenesInput = {
    id?: string
    name: string
    description?: string | null
    path: string
    version?: string
    engineVersion?: string
    userId: string
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastOpened?: Date | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    scripts?: ScriptUncheckedCreateNestedManyWithoutProjectInput
    materials?: MaterialUncheckedCreateNestedManyWithoutProjectInput
    terrains?: TerrainUncheckedCreateNestedManyWithoutProjectInput
    animations?: AnimationUncheckedCreateNestedManyWithoutProjectInput
    folders?: FolderUncheckedCreateNestedManyWithoutProjectInput
    projectSettings?: ProjectSettingUncheckedCreateNestedManyWithoutProjectInput
    assets?: AssetUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutScenesInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutScenesInput, ProjectUncheckedCreateWithoutScenesInput>
  }

  export type SceneNodeCreateWithoutSceneInput = {
    id?: string
    uuid: string
    name: string
    type: string
    position: JsonNullValueInput | InputJsonValue
    rotation: JsonNullValueInput | InputJsonValue
    scale: JsonNullValueInput | InputJsonValue
    visible?: boolean
    properties?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    parent?: SceneNodeCreateNestedOneWithoutChildrenInput
    children?: SceneNodeCreateNestedManyWithoutParentInput
  }

  export type SceneNodeUncheckedCreateWithoutSceneInput = {
    id?: string
    uuid: string
    name: string
    type: string
    parentId?: string | null
    position: JsonNullValueInput | InputJsonValue
    rotation: JsonNullValueInput | InputJsonValue
    scale: JsonNullValueInput | InputJsonValue
    visible?: boolean
    properties?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    children?: SceneNodeUncheckedCreateNestedManyWithoutParentInput
  }

  export type SceneNodeCreateOrConnectWithoutSceneInput = {
    where: SceneNodeWhereUniqueInput
    create: XOR<SceneNodeCreateWithoutSceneInput, SceneNodeUncheckedCreateWithoutSceneInput>
  }

  export type SceneNodeCreateManySceneInputEnvelope = {
    data: SceneNodeCreateManySceneInput | SceneNodeCreateManySceneInput[]
  }

  export type SceneAssetUsageCreateWithoutSceneInput = {
    id?: string
    usage: string
    asset: AssetCreateNestedOneWithoutSceneUsagesInput
  }

  export type SceneAssetUsageUncheckedCreateWithoutSceneInput = {
    id?: string
    assetId: string
    usage: string
  }

  export type SceneAssetUsageCreateOrConnectWithoutSceneInput = {
    where: SceneAssetUsageWhereUniqueInput
    create: XOR<SceneAssetUsageCreateWithoutSceneInput, SceneAssetUsageUncheckedCreateWithoutSceneInput>
  }

  export type SceneAssetUsageCreateManySceneInputEnvelope = {
    data: SceneAssetUsageCreateManySceneInput | SceneAssetUsageCreateManySceneInput[]
  }

  export type ProjectUpsertWithoutScenesInput = {
    update: XOR<ProjectUpdateWithoutScenesInput, ProjectUncheckedUpdateWithoutScenesInput>
    create: XOR<ProjectCreateWithoutScenesInput, ProjectUncheckedCreateWithoutScenesInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutScenesInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutScenesInput, ProjectUncheckedUpdateWithoutScenesInput>
  }

  export type ProjectUpdateWithoutScenesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    path?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    engineVersion?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastOpened?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    user?: UserUpdateOneRequiredWithoutProjectsNestedInput
    scripts?: ScriptUpdateManyWithoutProjectNestedInput
    materials?: MaterialUpdateManyWithoutProjectNestedInput
    terrains?: TerrainUpdateManyWithoutProjectNestedInput
    animations?: AnimationUpdateManyWithoutProjectNestedInput
    folders?: FolderUpdateManyWithoutProjectNestedInput
    projectSettings?: ProjectSettingUpdateManyWithoutProjectNestedInput
    assets?: AssetUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutScenesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    path?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    engineVersion?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastOpened?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    scripts?: ScriptUncheckedUpdateManyWithoutProjectNestedInput
    materials?: MaterialUncheckedUpdateManyWithoutProjectNestedInput
    terrains?: TerrainUncheckedUpdateManyWithoutProjectNestedInput
    animations?: AnimationUncheckedUpdateManyWithoutProjectNestedInput
    folders?: FolderUncheckedUpdateManyWithoutProjectNestedInput
    projectSettings?: ProjectSettingUncheckedUpdateManyWithoutProjectNestedInput
    assets?: AssetUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type SceneNodeUpsertWithWhereUniqueWithoutSceneInput = {
    where: SceneNodeWhereUniqueInput
    update: XOR<SceneNodeUpdateWithoutSceneInput, SceneNodeUncheckedUpdateWithoutSceneInput>
    create: XOR<SceneNodeCreateWithoutSceneInput, SceneNodeUncheckedCreateWithoutSceneInput>
  }

  export type SceneNodeUpdateWithWhereUniqueWithoutSceneInput = {
    where: SceneNodeWhereUniqueInput
    data: XOR<SceneNodeUpdateWithoutSceneInput, SceneNodeUncheckedUpdateWithoutSceneInput>
  }

  export type SceneNodeUpdateManyWithWhereWithoutSceneInput = {
    where: SceneNodeScalarWhereInput
    data: XOR<SceneNodeUpdateManyMutationInput, SceneNodeUncheckedUpdateManyWithoutSceneInput>
  }

  export type SceneNodeScalarWhereInput = {
    AND?: SceneNodeScalarWhereInput | SceneNodeScalarWhereInput[]
    OR?: SceneNodeScalarWhereInput[]
    NOT?: SceneNodeScalarWhereInput | SceneNodeScalarWhereInput[]
    id?: StringFilter<"SceneNode"> | string
    uuid?: StringFilter<"SceneNode"> | string
    name?: StringFilter<"SceneNode"> | string
    type?: StringFilter<"SceneNode"> | string
    sceneId?: StringFilter<"SceneNode"> | string
    parentId?: StringNullableFilter<"SceneNode"> | string | null
    position?: JsonFilter<"SceneNode">
    rotation?: JsonFilter<"SceneNode">
    scale?: JsonFilter<"SceneNode">
    visible?: BoolFilter<"SceneNode"> | boolean
    properties?: JsonNullableFilter<"SceneNode">
    createdAt?: DateTimeFilter<"SceneNode"> | Date | string
    updatedAt?: DateTimeFilter<"SceneNode"> | Date | string
  }

  export type SceneAssetUsageUpsertWithWhereUniqueWithoutSceneInput = {
    where: SceneAssetUsageWhereUniqueInput
    update: XOR<SceneAssetUsageUpdateWithoutSceneInput, SceneAssetUsageUncheckedUpdateWithoutSceneInput>
    create: XOR<SceneAssetUsageCreateWithoutSceneInput, SceneAssetUsageUncheckedCreateWithoutSceneInput>
  }

  export type SceneAssetUsageUpdateWithWhereUniqueWithoutSceneInput = {
    where: SceneAssetUsageWhereUniqueInput
    data: XOR<SceneAssetUsageUpdateWithoutSceneInput, SceneAssetUsageUncheckedUpdateWithoutSceneInput>
  }

  export type SceneAssetUsageUpdateManyWithWhereWithoutSceneInput = {
    where: SceneAssetUsageScalarWhereInput
    data: XOR<SceneAssetUsageUpdateManyMutationInput, SceneAssetUsageUncheckedUpdateManyWithoutSceneInput>
  }

  export type SceneAssetUsageScalarWhereInput = {
    AND?: SceneAssetUsageScalarWhereInput | SceneAssetUsageScalarWhereInput[]
    OR?: SceneAssetUsageScalarWhereInput[]
    NOT?: SceneAssetUsageScalarWhereInput | SceneAssetUsageScalarWhereInput[]
    id?: StringFilter<"SceneAssetUsage"> | string
    sceneId?: StringFilter<"SceneAssetUsage"> | string
    assetId?: StringFilter<"SceneAssetUsage"> | string
    usage?: StringFilter<"SceneAssetUsage"> | string
  }

  export type SceneCreateWithoutNodesInput = {
    id?: string
    name: string
    path: string
    type?: string
    description?: string | null
    isMain?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    sceneData?: NullableJsonNullValueInput | InputJsonValue
    project: ProjectCreateNestedOneWithoutScenesInput
    assetUsages?: SceneAssetUsageCreateNestedManyWithoutSceneInput
  }

  export type SceneUncheckedCreateWithoutNodesInput = {
    id?: string
    name: string
    path: string
    type?: string
    projectId: string
    description?: string | null
    isMain?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    sceneData?: NullableJsonNullValueInput | InputJsonValue
    assetUsages?: SceneAssetUsageUncheckedCreateNestedManyWithoutSceneInput
  }

  export type SceneCreateOrConnectWithoutNodesInput = {
    where: SceneWhereUniqueInput
    create: XOR<SceneCreateWithoutNodesInput, SceneUncheckedCreateWithoutNodesInput>
  }

  export type SceneNodeCreateWithoutChildrenInput = {
    id?: string
    uuid: string
    name: string
    type: string
    position: JsonNullValueInput | InputJsonValue
    rotation: JsonNullValueInput | InputJsonValue
    scale: JsonNullValueInput | InputJsonValue
    visible?: boolean
    properties?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    scene: SceneCreateNestedOneWithoutNodesInput
    parent?: SceneNodeCreateNestedOneWithoutChildrenInput
  }

  export type SceneNodeUncheckedCreateWithoutChildrenInput = {
    id?: string
    uuid: string
    name: string
    type: string
    sceneId: string
    parentId?: string | null
    position: JsonNullValueInput | InputJsonValue
    rotation: JsonNullValueInput | InputJsonValue
    scale: JsonNullValueInput | InputJsonValue
    visible?: boolean
    properties?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SceneNodeCreateOrConnectWithoutChildrenInput = {
    where: SceneNodeWhereUniqueInput
    create: XOR<SceneNodeCreateWithoutChildrenInput, SceneNodeUncheckedCreateWithoutChildrenInput>
  }

  export type SceneNodeCreateWithoutParentInput = {
    id?: string
    uuid: string
    name: string
    type: string
    position: JsonNullValueInput | InputJsonValue
    rotation: JsonNullValueInput | InputJsonValue
    scale: JsonNullValueInput | InputJsonValue
    visible?: boolean
    properties?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    scene: SceneCreateNestedOneWithoutNodesInput
    children?: SceneNodeCreateNestedManyWithoutParentInput
  }

  export type SceneNodeUncheckedCreateWithoutParentInput = {
    id?: string
    uuid: string
    name: string
    type: string
    sceneId: string
    position: JsonNullValueInput | InputJsonValue
    rotation: JsonNullValueInput | InputJsonValue
    scale: JsonNullValueInput | InputJsonValue
    visible?: boolean
    properties?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    children?: SceneNodeUncheckedCreateNestedManyWithoutParentInput
  }

  export type SceneNodeCreateOrConnectWithoutParentInput = {
    where: SceneNodeWhereUniqueInput
    create: XOR<SceneNodeCreateWithoutParentInput, SceneNodeUncheckedCreateWithoutParentInput>
  }

  export type SceneNodeCreateManyParentInputEnvelope = {
    data: SceneNodeCreateManyParentInput | SceneNodeCreateManyParentInput[]
  }

  export type SceneUpsertWithoutNodesInput = {
    update: XOR<SceneUpdateWithoutNodesInput, SceneUncheckedUpdateWithoutNodesInput>
    create: XOR<SceneCreateWithoutNodesInput, SceneUncheckedCreateWithoutNodesInput>
    where?: SceneWhereInput
  }

  export type SceneUpdateToOneWithWhereWithoutNodesInput = {
    where?: SceneWhereInput
    data: XOR<SceneUpdateWithoutNodesInput, SceneUncheckedUpdateWithoutNodesInput>
  }

  export type SceneUpdateWithoutNodesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isMain?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sceneData?: NullableJsonNullValueInput | InputJsonValue
    project?: ProjectUpdateOneRequiredWithoutScenesNestedInput
    assetUsages?: SceneAssetUsageUpdateManyWithoutSceneNestedInput
  }

  export type SceneUncheckedUpdateWithoutNodesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isMain?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sceneData?: NullableJsonNullValueInput | InputJsonValue
    assetUsages?: SceneAssetUsageUncheckedUpdateManyWithoutSceneNestedInput
  }

  export type SceneNodeUpsertWithoutChildrenInput = {
    update: XOR<SceneNodeUpdateWithoutChildrenInput, SceneNodeUncheckedUpdateWithoutChildrenInput>
    create: XOR<SceneNodeCreateWithoutChildrenInput, SceneNodeUncheckedCreateWithoutChildrenInput>
    where?: SceneNodeWhereInput
  }

  export type SceneNodeUpdateToOneWithWhereWithoutChildrenInput = {
    where?: SceneNodeWhereInput
    data: XOR<SceneNodeUpdateWithoutChildrenInput, SceneNodeUncheckedUpdateWithoutChildrenInput>
  }

  export type SceneNodeUpdateWithoutChildrenInput = {
    id?: StringFieldUpdateOperationsInput | string
    uuid?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    position?: JsonNullValueInput | InputJsonValue
    rotation?: JsonNullValueInput | InputJsonValue
    scale?: JsonNullValueInput | InputJsonValue
    visible?: BoolFieldUpdateOperationsInput | boolean
    properties?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    scene?: SceneUpdateOneRequiredWithoutNodesNestedInput
    parent?: SceneNodeUpdateOneWithoutChildrenNestedInput
  }

  export type SceneNodeUncheckedUpdateWithoutChildrenInput = {
    id?: StringFieldUpdateOperationsInput | string
    uuid?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    sceneId?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    position?: JsonNullValueInput | InputJsonValue
    rotation?: JsonNullValueInput | InputJsonValue
    scale?: JsonNullValueInput | InputJsonValue
    visible?: BoolFieldUpdateOperationsInput | boolean
    properties?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SceneNodeUpsertWithWhereUniqueWithoutParentInput = {
    where: SceneNodeWhereUniqueInput
    update: XOR<SceneNodeUpdateWithoutParentInput, SceneNodeUncheckedUpdateWithoutParentInput>
    create: XOR<SceneNodeCreateWithoutParentInput, SceneNodeUncheckedCreateWithoutParentInput>
  }

  export type SceneNodeUpdateWithWhereUniqueWithoutParentInput = {
    where: SceneNodeWhereUniqueInput
    data: XOR<SceneNodeUpdateWithoutParentInput, SceneNodeUncheckedUpdateWithoutParentInput>
  }

  export type SceneNodeUpdateManyWithWhereWithoutParentInput = {
    where: SceneNodeScalarWhereInput
    data: XOR<SceneNodeUpdateManyMutationInput, SceneNodeUncheckedUpdateManyWithoutParentInput>
  }

  export type ProjectCreateWithoutScriptsInput = {
    id?: string
    name: string
    description?: string | null
    path: string
    version?: string
    engineVersion?: string
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastOpened?: Date | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    user: UserCreateNestedOneWithoutProjectsInput
    scenes?: SceneCreateNestedManyWithoutProjectInput
    materials?: MaterialCreateNestedManyWithoutProjectInput
    terrains?: TerrainCreateNestedManyWithoutProjectInput
    animations?: AnimationCreateNestedManyWithoutProjectInput
    folders?: FolderCreateNestedManyWithoutProjectInput
    projectSettings?: ProjectSettingCreateNestedManyWithoutProjectInput
    assets?: AssetCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutScriptsInput = {
    id?: string
    name: string
    description?: string | null
    path: string
    version?: string
    engineVersion?: string
    userId: string
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastOpened?: Date | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    scenes?: SceneUncheckedCreateNestedManyWithoutProjectInput
    materials?: MaterialUncheckedCreateNestedManyWithoutProjectInput
    terrains?: TerrainUncheckedCreateNestedManyWithoutProjectInput
    animations?: AnimationUncheckedCreateNestedManyWithoutProjectInput
    folders?: FolderUncheckedCreateNestedManyWithoutProjectInput
    projectSettings?: ProjectSettingUncheckedCreateNestedManyWithoutProjectInput
    assets?: AssetUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutScriptsInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutScriptsInput, ProjectUncheckedCreateWithoutScriptsInput>
  }

  export type ScriptAssetUsageCreateWithoutScriptInput = {
    id?: string
    usage: string
    asset: AssetCreateNestedOneWithoutScriptUsagesInput
  }

  export type ScriptAssetUsageUncheckedCreateWithoutScriptInput = {
    id?: string
    assetId: string
    usage: string
  }

  export type ScriptAssetUsageCreateOrConnectWithoutScriptInput = {
    where: ScriptAssetUsageWhereUniqueInput
    create: XOR<ScriptAssetUsageCreateWithoutScriptInput, ScriptAssetUsageUncheckedCreateWithoutScriptInput>
  }

  export type ScriptAssetUsageCreateManyScriptInputEnvelope = {
    data: ScriptAssetUsageCreateManyScriptInput | ScriptAssetUsageCreateManyScriptInput[]
  }

  export type ProjectUpsertWithoutScriptsInput = {
    update: XOR<ProjectUpdateWithoutScriptsInput, ProjectUncheckedUpdateWithoutScriptsInput>
    create: XOR<ProjectCreateWithoutScriptsInput, ProjectUncheckedCreateWithoutScriptsInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutScriptsInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutScriptsInput, ProjectUncheckedUpdateWithoutScriptsInput>
  }

  export type ProjectUpdateWithoutScriptsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    path?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    engineVersion?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastOpened?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    user?: UserUpdateOneRequiredWithoutProjectsNestedInput
    scenes?: SceneUpdateManyWithoutProjectNestedInput
    materials?: MaterialUpdateManyWithoutProjectNestedInput
    terrains?: TerrainUpdateManyWithoutProjectNestedInput
    animations?: AnimationUpdateManyWithoutProjectNestedInput
    folders?: FolderUpdateManyWithoutProjectNestedInput
    projectSettings?: ProjectSettingUpdateManyWithoutProjectNestedInput
    assets?: AssetUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutScriptsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    path?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    engineVersion?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastOpened?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    scenes?: SceneUncheckedUpdateManyWithoutProjectNestedInput
    materials?: MaterialUncheckedUpdateManyWithoutProjectNestedInput
    terrains?: TerrainUncheckedUpdateManyWithoutProjectNestedInput
    animations?: AnimationUncheckedUpdateManyWithoutProjectNestedInput
    folders?: FolderUncheckedUpdateManyWithoutProjectNestedInput
    projectSettings?: ProjectSettingUncheckedUpdateManyWithoutProjectNestedInput
    assets?: AssetUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ScriptAssetUsageUpsertWithWhereUniqueWithoutScriptInput = {
    where: ScriptAssetUsageWhereUniqueInput
    update: XOR<ScriptAssetUsageUpdateWithoutScriptInput, ScriptAssetUsageUncheckedUpdateWithoutScriptInput>
    create: XOR<ScriptAssetUsageCreateWithoutScriptInput, ScriptAssetUsageUncheckedCreateWithoutScriptInput>
  }

  export type ScriptAssetUsageUpdateWithWhereUniqueWithoutScriptInput = {
    where: ScriptAssetUsageWhereUniqueInput
    data: XOR<ScriptAssetUsageUpdateWithoutScriptInput, ScriptAssetUsageUncheckedUpdateWithoutScriptInput>
  }

  export type ScriptAssetUsageUpdateManyWithWhereWithoutScriptInput = {
    where: ScriptAssetUsageScalarWhereInput
    data: XOR<ScriptAssetUsageUpdateManyMutationInput, ScriptAssetUsageUncheckedUpdateManyWithoutScriptInput>
  }

  export type ScriptAssetUsageScalarWhereInput = {
    AND?: ScriptAssetUsageScalarWhereInput | ScriptAssetUsageScalarWhereInput[]
    OR?: ScriptAssetUsageScalarWhereInput[]
    NOT?: ScriptAssetUsageScalarWhereInput | ScriptAssetUsageScalarWhereInput[]
    id?: StringFilter<"ScriptAssetUsage"> | string
    scriptId?: StringFilter<"ScriptAssetUsage"> | string
    assetId?: StringFilter<"ScriptAssetUsage"> | string
    usage?: StringFilter<"ScriptAssetUsage"> | string
  }

  export type ProjectCreateWithoutMaterialsInput = {
    id?: string
    name: string
    description?: string | null
    path: string
    version?: string
    engineVersion?: string
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastOpened?: Date | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    user: UserCreateNestedOneWithoutProjectsInput
    scenes?: SceneCreateNestedManyWithoutProjectInput
    scripts?: ScriptCreateNestedManyWithoutProjectInput
    terrains?: TerrainCreateNestedManyWithoutProjectInput
    animations?: AnimationCreateNestedManyWithoutProjectInput
    folders?: FolderCreateNestedManyWithoutProjectInput
    projectSettings?: ProjectSettingCreateNestedManyWithoutProjectInput
    assets?: AssetCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutMaterialsInput = {
    id?: string
    name: string
    description?: string | null
    path: string
    version?: string
    engineVersion?: string
    userId: string
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastOpened?: Date | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    scenes?: SceneUncheckedCreateNestedManyWithoutProjectInput
    scripts?: ScriptUncheckedCreateNestedManyWithoutProjectInput
    terrains?: TerrainUncheckedCreateNestedManyWithoutProjectInput
    animations?: AnimationUncheckedCreateNestedManyWithoutProjectInput
    folders?: FolderUncheckedCreateNestedManyWithoutProjectInput
    projectSettings?: ProjectSettingUncheckedCreateNestedManyWithoutProjectInput
    assets?: AssetUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutMaterialsInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutMaterialsInput, ProjectUncheckedCreateWithoutMaterialsInput>
  }

  export type MaterialAssetUsageCreateWithoutMaterialInput = {
    id?: string
    usage: string
    asset: AssetCreateNestedOneWithoutMaterialUsagesInput
  }

  export type MaterialAssetUsageUncheckedCreateWithoutMaterialInput = {
    id?: string
    assetId: string
    usage: string
  }

  export type MaterialAssetUsageCreateOrConnectWithoutMaterialInput = {
    where: MaterialAssetUsageWhereUniqueInput
    create: XOR<MaterialAssetUsageCreateWithoutMaterialInput, MaterialAssetUsageUncheckedCreateWithoutMaterialInput>
  }

  export type MaterialAssetUsageCreateManyMaterialInputEnvelope = {
    data: MaterialAssetUsageCreateManyMaterialInput | MaterialAssetUsageCreateManyMaterialInput[]
  }

  export type ProjectUpsertWithoutMaterialsInput = {
    update: XOR<ProjectUpdateWithoutMaterialsInput, ProjectUncheckedUpdateWithoutMaterialsInput>
    create: XOR<ProjectCreateWithoutMaterialsInput, ProjectUncheckedCreateWithoutMaterialsInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutMaterialsInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutMaterialsInput, ProjectUncheckedUpdateWithoutMaterialsInput>
  }

  export type ProjectUpdateWithoutMaterialsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    path?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    engineVersion?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastOpened?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    user?: UserUpdateOneRequiredWithoutProjectsNestedInput
    scenes?: SceneUpdateManyWithoutProjectNestedInput
    scripts?: ScriptUpdateManyWithoutProjectNestedInput
    terrains?: TerrainUpdateManyWithoutProjectNestedInput
    animations?: AnimationUpdateManyWithoutProjectNestedInput
    folders?: FolderUpdateManyWithoutProjectNestedInput
    projectSettings?: ProjectSettingUpdateManyWithoutProjectNestedInput
    assets?: AssetUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutMaterialsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    path?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    engineVersion?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastOpened?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    scenes?: SceneUncheckedUpdateManyWithoutProjectNestedInput
    scripts?: ScriptUncheckedUpdateManyWithoutProjectNestedInput
    terrains?: TerrainUncheckedUpdateManyWithoutProjectNestedInput
    animations?: AnimationUncheckedUpdateManyWithoutProjectNestedInput
    folders?: FolderUncheckedUpdateManyWithoutProjectNestedInput
    projectSettings?: ProjectSettingUncheckedUpdateManyWithoutProjectNestedInput
    assets?: AssetUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type MaterialAssetUsageUpsertWithWhereUniqueWithoutMaterialInput = {
    where: MaterialAssetUsageWhereUniqueInput
    update: XOR<MaterialAssetUsageUpdateWithoutMaterialInput, MaterialAssetUsageUncheckedUpdateWithoutMaterialInput>
    create: XOR<MaterialAssetUsageCreateWithoutMaterialInput, MaterialAssetUsageUncheckedCreateWithoutMaterialInput>
  }

  export type MaterialAssetUsageUpdateWithWhereUniqueWithoutMaterialInput = {
    where: MaterialAssetUsageWhereUniqueInput
    data: XOR<MaterialAssetUsageUpdateWithoutMaterialInput, MaterialAssetUsageUncheckedUpdateWithoutMaterialInput>
  }

  export type MaterialAssetUsageUpdateManyWithWhereWithoutMaterialInput = {
    where: MaterialAssetUsageScalarWhereInput
    data: XOR<MaterialAssetUsageUpdateManyMutationInput, MaterialAssetUsageUncheckedUpdateManyWithoutMaterialInput>
  }

  export type MaterialAssetUsageScalarWhereInput = {
    AND?: MaterialAssetUsageScalarWhereInput | MaterialAssetUsageScalarWhereInput[]
    OR?: MaterialAssetUsageScalarWhereInput[]
    NOT?: MaterialAssetUsageScalarWhereInput | MaterialAssetUsageScalarWhereInput[]
    id?: StringFilter<"MaterialAssetUsage"> | string
    materialId?: StringFilter<"MaterialAssetUsage"> | string
    assetId?: StringFilter<"MaterialAssetUsage"> | string
    usage?: StringFilter<"MaterialAssetUsage"> | string
  }

  export type ProjectCreateWithoutTerrainsInput = {
    id?: string
    name: string
    description?: string | null
    path: string
    version?: string
    engineVersion?: string
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastOpened?: Date | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    user: UserCreateNestedOneWithoutProjectsInput
    scenes?: SceneCreateNestedManyWithoutProjectInput
    scripts?: ScriptCreateNestedManyWithoutProjectInput
    materials?: MaterialCreateNestedManyWithoutProjectInput
    animations?: AnimationCreateNestedManyWithoutProjectInput
    folders?: FolderCreateNestedManyWithoutProjectInput
    projectSettings?: ProjectSettingCreateNestedManyWithoutProjectInput
    assets?: AssetCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutTerrainsInput = {
    id?: string
    name: string
    description?: string | null
    path: string
    version?: string
    engineVersion?: string
    userId: string
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastOpened?: Date | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    scenes?: SceneUncheckedCreateNestedManyWithoutProjectInput
    scripts?: ScriptUncheckedCreateNestedManyWithoutProjectInput
    materials?: MaterialUncheckedCreateNestedManyWithoutProjectInput
    animations?: AnimationUncheckedCreateNestedManyWithoutProjectInput
    folders?: FolderUncheckedCreateNestedManyWithoutProjectInput
    projectSettings?: ProjectSettingUncheckedCreateNestedManyWithoutProjectInput
    assets?: AssetUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutTerrainsInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutTerrainsInput, ProjectUncheckedCreateWithoutTerrainsInput>
  }

  export type ProjectUpsertWithoutTerrainsInput = {
    update: XOR<ProjectUpdateWithoutTerrainsInput, ProjectUncheckedUpdateWithoutTerrainsInput>
    create: XOR<ProjectCreateWithoutTerrainsInput, ProjectUncheckedCreateWithoutTerrainsInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutTerrainsInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutTerrainsInput, ProjectUncheckedUpdateWithoutTerrainsInput>
  }

  export type ProjectUpdateWithoutTerrainsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    path?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    engineVersion?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastOpened?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    user?: UserUpdateOneRequiredWithoutProjectsNestedInput
    scenes?: SceneUpdateManyWithoutProjectNestedInput
    scripts?: ScriptUpdateManyWithoutProjectNestedInput
    materials?: MaterialUpdateManyWithoutProjectNestedInput
    animations?: AnimationUpdateManyWithoutProjectNestedInput
    folders?: FolderUpdateManyWithoutProjectNestedInput
    projectSettings?: ProjectSettingUpdateManyWithoutProjectNestedInput
    assets?: AssetUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutTerrainsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    path?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    engineVersion?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastOpened?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    scenes?: SceneUncheckedUpdateManyWithoutProjectNestedInput
    scripts?: ScriptUncheckedUpdateManyWithoutProjectNestedInput
    materials?: MaterialUncheckedUpdateManyWithoutProjectNestedInput
    animations?: AnimationUncheckedUpdateManyWithoutProjectNestedInput
    folders?: FolderUncheckedUpdateManyWithoutProjectNestedInput
    projectSettings?: ProjectSettingUncheckedUpdateManyWithoutProjectNestedInput
    assets?: AssetUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectCreateWithoutAnimationsInput = {
    id?: string
    name: string
    description?: string | null
    path: string
    version?: string
    engineVersion?: string
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastOpened?: Date | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    user: UserCreateNestedOneWithoutProjectsInput
    scenes?: SceneCreateNestedManyWithoutProjectInput
    scripts?: ScriptCreateNestedManyWithoutProjectInput
    materials?: MaterialCreateNestedManyWithoutProjectInput
    terrains?: TerrainCreateNestedManyWithoutProjectInput
    folders?: FolderCreateNestedManyWithoutProjectInput
    projectSettings?: ProjectSettingCreateNestedManyWithoutProjectInput
    assets?: AssetCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutAnimationsInput = {
    id?: string
    name: string
    description?: string | null
    path: string
    version?: string
    engineVersion?: string
    userId: string
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastOpened?: Date | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    scenes?: SceneUncheckedCreateNestedManyWithoutProjectInput
    scripts?: ScriptUncheckedCreateNestedManyWithoutProjectInput
    materials?: MaterialUncheckedCreateNestedManyWithoutProjectInput
    terrains?: TerrainUncheckedCreateNestedManyWithoutProjectInput
    folders?: FolderUncheckedCreateNestedManyWithoutProjectInput
    projectSettings?: ProjectSettingUncheckedCreateNestedManyWithoutProjectInput
    assets?: AssetUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutAnimationsInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutAnimationsInput, ProjectUncheckedCreateWithoutAnimationsInput>
  }

  export type ProjectUpsertWithoutAnimationsInput = {
    update: XOR<ProjectUpdateWithoutAnimationsInput, ProjectUncheckedUpdateWithoutAnimationsInput>
    create: XOR<ProjectCreateWithoutAnimationsInput, ProjectUncheckedCreateWithoutAnimationsInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutAnimationsInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutAnimationsInput, ProjectUncheckedUpdateWithoutAnimationsInput>
  }

  export type ProjectUpdateWithoutAnimationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    path?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    engineVersion?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastOpened?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    user?: UserUpdateOneRequiredWithoutProjectsNestedInput
    scenes?: SceneUpdateManyWithoutProjectNestedInput
    scripts?: ScriptUpdateManyWithoutProjectNestedInput
    materials?: MaterialUpdateManyWithoutProjectNestedInput
    terrains?: TerrainUpdateManyWithoutProjectNestedInput
    folders?: FolderUpdateManyWithoutProjectNestedInput
    projectSettings?: ProjectSettingUpdateManyWithoutProjectNestedInput
    assets?: AssetUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutAnimationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    path?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    engineVersion?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastOpened?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    scenes?: SceneUncheckedUpdateManyWithoutProjectNestedInput
    scripts?: ScriptUncheckedUpdateManyWithoutProjectNestedInput
    materials?: MaterialUncheckedUpdateManyWithoutProjectNestedInput
    terrains?: TerrainUncheckedUpdateManyWithoutProjectNestedInput
    folders?: FolderUncheckedUpdateManyWithoutProjectNestedInput
    projectSettings?: ProjectSettingUncheckedUpdateManyWithoutProjectNestedInput
    assets?: AssetUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectCreateWithoutProjectSettingsInput = {
    id?: string
    name: string
    description?: string | null
    path: string
    version?: string
    engineVersion?: string
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastOpened?: Date | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    user: UserCreateNestedOneWithoutProjectsInput
    scenes?: SceneCreateNestedManyWithoutProjectInput
    scripts?: ScriptCreateNestedManyWithoutProjectInput
    materials?: MaterialCreateNestedManyWithoutProjectInput
    terrains?: TerrainCreateNestedManyWithoutProjectInput
    animations?: AnimationCreateNestedManyWithoutProjectInput
    folders?: FolderCreateNestedManyWithoutProjectInput
    assets?: AssetCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutProjectSettingsInput = {
    id?: string
    name: string
    description?: string | null
    path: string
    version?: string
    engineVersion?: string
    userId: string
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastOpened?: Date | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    scenes?: SceneUncheckedCreateNestedManyWithoutProjectInput
    scripts?: ScriptUncheckedCreateNestedManyWithoutProjectInput
    materials?: MaterialUncheckedCreateNestedManyWithoutProjectInput
    terrains?: TerrainUncheckedCreateNestedManyWithoutProjectInput
    animations?: AnimationUncheckedCreateNestedManyWithoutProjectInput
    folders?: FolderUncheckedCreateNestedManyWithoutProjectInput
    assets?: AssetUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutProjectSettingsInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutProjectSettingsInput, ProjectUncheckedCreateWithoutProjectSettingsInput>
  }

  export type ProjectUpsertWithoutProjectSettingsInput = {
    update: XOR<ProjectUpdateWithoutProjectSettingsInput, ProjectUncheckedUpdateWithoutProjectSettingsInput>
    create: XOR<ProjectCreateWithoutProjectSettingsInput, ProjectUncheckedCreateWithoutProjectSettingsInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutProjectSettingsInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutProjectSettingsInput, ProjectUncheckedUpdateWithoutProjectSettingsInput>
  }

  export type ProjectUpdateWithoutProjectSettingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    path?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    engineVersion?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastOpened?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    user?: UserUpdateOneRequiredWithoutProjectsNestedInput
    scenes?: SceneUpdateManyWithoutProjectNestedInput
    scripts?: ScriptUpdateManyWithoutProjectNestedInput
    materials?: MaterialUpdateManyWithoutProjectNestedInput
    terrains?: TerrainUpdateManyWithoutProjectNestedInput
    animations?: AnimationUpdateManyWithoutProjectNestedInput
    folders?: FolderUpdateManyWithoutProjectNestedInput
    assets?: AssetUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutProjectSettingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    path?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    engineVersion?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastOpened?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    scenes?: SceneUncheckedUpdateManyWithoutProjectNestedInput
    scripts?: ScriptUncheckedUpdateManyWithoutProjectNestedInput
    materials?: MaterialUncheckedUpdateManyWithoutProjectNestedInput
    terrains?: TerrainUncheckedUpdateManyWithoutProjectNestedInput
    animations?: AnimationUncheckedUpdateManyWithoutProjectNestedInput
    folders?: FolderUncheckedUpdateManyWithoutProjectNestedInput
    assets?: AssetUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectCreateWithoutAssetsInput = {
    id?: string
    name: string
    description?: string | null
    path: string
    version?: string
    engineVersion?: string
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastOpened?: Date | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    user: UserCreateNestedOneWithoutProjectsInput
    scenes?: SceneCreateNestedManyWithoutProjectInput
    scripts?: ScriptCreateNestedManyWithoutProjectInput
    materials?: MaterialCreateNestedManyWithoutProjectInput
    terrains?: TerrainCreateNestedManyWithoutProjectInput
    animations?: AnimationCreateNestedManyWithoutProjectInput
    folders?: FolderCreateNestedManyWithoutProjectInput
    projectSettings?: ProjectSettingCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutAssetsInput = {
    id?: string
    name: string
    description?: string | null
    path: string
    version?: string
    engineVersion?: string
    userId: string
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastOpened?: Date | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    scenes?: SceneUncheckedCreateNestedManyWithoutProjectInput
    scripts?: ScriptUncheckedCreateNestedManyWithoutProjectInput
    materials?: MaterialUncheckedCreateNestedManyWithoutProjectInput
    terrains?: TerrainUncheckedCreateNestedManyWithoutProjectInput
    animations?: AnimationUncheckedCreateNestedManyWithoutProjectInput
    folders?: FolderUncheckedCreateNestedManyWithoutProjectInput
    projectSettings?: ProjectSettingUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutAssetsInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutAssetsInput, ProjectUncheckedCreateWithoutAssetsInput>
  }

  export type FolderCreateWithoutAssetsInput = {
    id?: string
    name: string
    path: string
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutFoldersInput
    parent?: FolderCreateNestedOneWithoutChildrenInput
    children?: FolderCreateNestedManyWithoutParentInput
  }

  export type FolderUncheckedCreateWithoutAssetsInput = {
    id?: string
    name: string
    path: string
    parentId?: string | null
    projectId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    children?: FolderUncheckedCreateNestedManyWithoutParentInput
  }

  export type FolderCreateOrConnectWithoutAssetsInput = {
    where: FolderWhereUniqueInput
    create: XOR<FolderCreateWithoutAssetsInput, FolderUncheckedCreateWithoutAssetsInput>
  }

  export type AssetCreateWithoutVersionsInput = {
    id?: string
    name: string
    type: $Enums.AssetType
    filePath: string
    fileSize: number
    mimeType?: string | null
    checksum?: string | null
    width?: number | null
    height?: number | null
    duration?: number | null
    channels?: number | null
    sampleRate?: number | null
    bitRate?: number | null
    tags?: NullableJsonNullValueInput | InputJsonValue
    version?: string
    dependencies?: NullableJsonNullValueInput | InputJsonValue
    originalName?: string | null
    importedAt?: Date | string
    importSettings?: NullableJsonNullValueInput | InputJsonValue
    thumbnail?: string | null
    preview?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutAssetsInput
    folder?: FolderCreateNestedOneWithoutAssetsInput
    parent?: AssetCreateNestedOneWithoutVersionsInput
    sceneUsages?: SceneAssetUsageCreateNestedManyWithoutAssetInput
    scriptUsages?: ScriptAssetUsageCreateNestedManyWithoutAssetInput
    materialUsages?: MaterialAssetUsageCreateNestedManyWithoutAssetInput
  }

  export type AssetUncheckedCreateWithoutVersionsInput = {
    id?: string
    name: string
    type: $Enums.AssetType
    filePath: string
    fileSize: number
    mimeType?: string | null
    checksum?: string | null
    width?: number | null
    height?: number | null
    duration?: number | null
    channels?: number | null
    sampleRate?: number | null
    bitRate?: number | null
    projectId: string
    folderId?: string | null
    tags?: NullableJsonNullValueInput | InputJsonValue
    version?: string
    parentId?: string | null
    dependencies?: NullableJsonNullValueInput | InputJsonValue
    originalName?: string | null
    importedAt?: Date | string
    importSettings?: NullableJsonNullValueInput | InputJsonValue
    thumbnail?: string | null
    preview?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sceneUsages?: SceneAssetUsageUncheckedCreateNestedManyWithoutAssetInput
    scriptUsages?: ScriptAssetUsageUncheckedCreateNestedManyWithoutAssetInput
    materialUsages?: MaterialAssetUsageUncheckedCreateNestedManyWithoutAssetInput
  }

  export type AssetCreateOrConnectWithoutVersionsInput = {
    where: AssetWhereUniqueInput
    create: XOR<AssetCreateWithoutVersionsInput, AssetUncheckedCreateWithoutVersionsInput>
  }

  export type AssetCreateWithoutParentInput = {
    id?: string
    name: string
    type: $Enums.AssetType
    filePath: string
    fileSize: number
    mimeType?: string | null
    checksum?: string | null
    width?: number | null
    height?: number | null
    duration?: number | null
    channels?: number | null
    sampleRate?: number | null
    bitRate?: number | null
    tags?: NullableJsonNullValueInput | InputJsonValue
    version?: string
    dependencies?: NullableJsonNullValueInput | InputJsonValue
    originalName?: string | null
    importedAt?: Date | string
    importSettings?: NullableJsonNullValueInput | InputJsonValue
    thumbnail?: string | null
    preview?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutAssetsInput
    folder?: FolderCreateNestedOneWithoutAssetsInput
    versions?: AssetCreateNestedManyWithoutParentInput
    sceneUsages?: SceneAssetUsageCreateNestedManyWithoutAssetInput
    scriptUsages?: ScriptAssetUsageCreateNestedManyWithoutAssetInput
    materialUsages?: MaterialAssetUsageCreateNestedManyWithoutAssetInput
  }

  export type AssetUncheckedCreateWithoutParentInput = {
    id?: string
    name: string
    type: $Enums.AssetType
    filePath: string
    fileSize: number
    mimeType?: string | null
    checksum?: string | null
    width?: number | null
    height?: number | null
    duration?: number | null
    channels?: number | null
    sampleRate?: number | null
    bitRate?: number | null
    projectId: string
    folderId?: string | null
    tags?: NullableJsonNullValueInput | InputJsonValue
    version?: string
    dependencies?: NullableJsonNullValueInput | InputJsonValue
    originalName?: string | null
    importedAt?: Date | string
    importSettings?: NullableJsonNullValueInput | InputJsonValue
    thumbnail?: string | null
    preview?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    versions?: AssetUncheckedCreateNestedManyWithoutParentInput
    sceneUsages?: SceneAssetUsageUncheckedCreateNestedManyWithoutAssetInput
    scriptUsages?: ScriptAssetUsageUncheckedCreateNestedManyWithoutAssetInput
    materialUsages?: MaterialAssetUsageUncheckedCreateNestedManyWithoutAssetInput
  }

  export type AssetCreateOrConnectWithoutParentInput = {
    where: AssetWhereUniqueInput
    create: XOR<AssetCreateWithoutParentInput, AssetUncheckedCreateWithoutParentInput>
  }

  export type AssetCreateManyParentInputEnvelope = {
    data: AssetCreateManyParentInput | AssetCreateManyParentInput[]
  }

  export type SceneAssetUsageCreateWithoutAssetInput = {
    id?: string
    usage: string
    scene: SceneCreateNestedOneWithoutAssetUsagesInput
  }

  export type SceneAssetUsageUncheckedCreateWithoutAssetInput = {
    id?: string
    sceneId: string
    usage: string
  }

  export type SceneAssetUsageCreateOrConnectWithoutAssetInput = {
    where: SceneAssetUsageWhereUniqueInput
    create: XOR<SceneAssetUsageCreateWithoutAssetInput, SceneAssetUsageUncheckedCreateWithoutAssetInput>
  }

  export type SceneAssetUsageCreateManyAssetInputEnvelope = {
    data: SceneAssetUsageCreateManyAssetInput | SceneAssetUsageCreateManyAssetInput[]
  }

  export type ScriptAssetUsageCreateWithoutAssetInput = {
    id?: string
    usage: string
    script: ScriptCreateNestedOneWithoutAssetUsagesInput
  }

  export type ScriptAssetUsageUncheckedCreateWithoutAssetInput = {
    id?: string
    scriptId: string
    usage: string
  }

  export type ScriptAssetUsageCreateOrConnectWithoutAssetInput = {
    where: ScriptAssetUsageWhereUniqueInput
    create: XOR<ScriptAssetUsageCreateWithoutAssetInput, ScriptAssetUsageUncheckedCreateWithoutAssetInput>
  }

  export type ScriptAssetUsageCreateManyAssetInputEnvelope = {
    data: ScriptAssetUsageCreateManyAssetInput | ScriptAssetUsageCreateManyAssetInput[]
  }

  export type MaterialAssetUsageCreateWithoutAssetInput = {
    id?: string
    usage: string
    material: MaterialCreateNestedOneWithoutAssetUsagesInput
  }

  export type MaterialAssetUsageUncheckedCreateWithoutAssetInput = {
    id?: string
    materialId: string
    usage: string
  }

  export type MaterialAssetUsageCreateOrConnectWithoutAssetInput = {
    where: MaterialAssetUsageWhereUniqueInput
    create: XOR<MaterialAssetUsageCreateWithoutAssetInput, MaterialAssetUsageUncheckedCreateWithoutAssetInput>
  }

  export type MaterialAssetUsageCreateManyAssetInputEnvelope = {
    data: MaterialAssetUsageCreateManyAssetInput | MaterialAssetUsageCreateManyAssetInput[]
  }

  export type ProjectUpsertWithoutAssetsInput = {
    update: XOR<ProjectUpdateWithoutAssetsInput, ProjectUncheckedUpdateWithoutAssetsInput>
    create: XOR<ProjectCreateWithoutAssetsInput, ProjectUncheckedCreateWithoutAssetsInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutAssetsInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutAssetsInput, ProjectUncheckedUpdateWithoutAssetsInput>
  }

  export type ProjectUpdateWithoutAssetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    path?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    engineVersion?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastOpened?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    user?: UserUpdateOneRequiredWithoutProjectsNestedInput
    scenes?: SceneUpdateManyWithoutProjectNestedInput
    scripts?: ScriptUpdateManyWithoutProjectNestedInput
    materials?: MaterialUpdateManyWithoutProjectNestedInput
    terrains?: TerrainUpdateManyWithoutProjectNestedInput
    animations?: AnimationUpdateManyWithoutProjectNestedInput
    folders?: FolderUpdateManyWithoutProjectNestedInput
    projectSettings?: ProjectSettingUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutAssetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    path?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    engineVersion?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastOpened?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    scenes?: SceneUncheckedUpdateManyWithoutProjectNestedInput
    scripts?: ScriptUncheckedUpdateManyWithoutProjectNestedInput
    materials?: MaterialUncheckedUpdateManyWithoutProjectNestedInput
    terrains?: TerrainUncheckedUpdateManyWithoutProjectNestedInput
    animations?: AnimationUncheckedUpdateManyWithoutProjectNestedInput
    folders?: FolderUncheckedUpdateManyWithoutProjectNestedInput
    projectSettings?: ProjectSettingUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type FolderUpsertWithoutAssetsInput = {
    update: XOR<FolderUpdateWithoutAssetsInput, FolderUncheckedUpdateWithoutAssetsInput>
    create: XOR<FolderCreateWithoutAssetsInput, FolderUncheckedCreateWithoutAssetsInput>
    where?: FolderWhereInput
  }

  export type FolderUpdateToOneWithWhereWithoutAssetsInput = {
    where?: FolderWhereInput
    data: XOR<FolderUpdateWithoutAssetsInput, FolderUncheckedUpdateWithoutAssetsInput>
  }

  export type FolderUpdateWithoutAssetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutFoldersNestedInput
    parent?: FolderUpdateOneWithoutChildrenNestedInput
    children?: FolderUpdateManyWithoutParentNestedInput
  }

  export type FolderUncheckedUpdateWithoutAssetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: FolderUncheckedUpdateManyWithoutParentNestedInput
  }

  export type AssetUpsertWithoutVersionsInput = {
    update: XOR<AssetUpdateWithoutVersionsInput, AssetUncheckedUpdateWithoutVersionsInput>
    create: XOR<AssetCreateWithoutVersionsInput, AssetUncheckedCreateWithoutVersionsInput>
    where?: AssetWhereInput
  }

  export type AssetUpdateToOneWithWhereWithoutVersionsInput = {
    where?: AssetWhereInput
    data: XOR<AssetUpdateWithoutVersionsInput, AssetUncheckedUpdateWithoutVersionsInput>
  }

  export type AssetUpdateWithoutVersionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumAssetTypeFieldUpdateOperationsInput | $Enums.AssetType
    filePath?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    checksum?: NullableStringFieldUpdateOperationsInput | string | null
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    duration?: NullableFloatFieldUpdateOperationsInput | number | null
    channels?: NullableIntFieldUpdateOperationsInput | number | null
    sampleRate?: NullableIntFieldUpdateOperationsInput | number | null
    bitRate?: NullableIntFieldUpdateOperationsInput | number | null
    tags?: NullableJsonNullValueInput | InputJsonValue
    version?: StringFieldUpdateOperationsInput | string
    dependencies?: NullableJsonNullValueInput | InputJsonValue
    originalName?: NullableStringFieldUpdateOperationsInput | string | null
    importedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    importSettings?: NullableJsonNullValueInput | InputJsonValue
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    preview?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutAssetsNestedInput
    folder?: FolderUpdateOneWithoutAssetsNestedInput
    parent?: AssetUpdateOneWithoutVersionsNestedInput
    sceneUsages?: SceneAssetUsageUpdateManyWithoutAssetNestedInput
    scriptUsages?: ScriptAssetUsageUpdateManyWithoutAssetNestedInput
    materialUsages?: MaterialAssetUsageUpdateManyWithoutAssetNestedInput
  }

  export type AssetUncheckedUpdateWithoutVersionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumAssetTypeFieldUpdateOperationsInput | $Enums.AssetType
    filePath?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    checksum?: NullableStringFieldUpdateOperationsInput | string | null
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    duration?: NullableFloatFieldUpdateOperationsInput | number | null
    channels?: NullableIntFieldUpdateOperationsInput | number | null
    sampleRate?: NullableIntFieldUpdateOperationsInput | number | null
    bitRate?: NullableIntFieldUpdateOperationsInput | number | null
    projectId?: StringFieldUpdateOperationsInput | string
    folderId?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableJsonNullValueInput | InputJsonValue
    version?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    dependencies?: NullableJsonNullValueInput | InputJsonValue
    originalName?: NullableStringFieldUpdateOperationsInput | string | null
    importedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    importSettings?: NullableJsonNullValueInput | InputJsonValue
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    preview?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sceneUsages?: SceneAssetUsageUncheckedUpdateManyWithoutAssetNestedInput
    scriptUsages?: ScriptAssetUsageUncheckedUpdateManyWithoutAssetNestedInput
    materialUsages?: MaterialAssetUsageUncheckedUpdateManyWithoutAssetNestedInput
  }

  export type AssetUpsertWithWhereUniqueWithoutParentInput = {
    where: AssetWhereUniqueInput
    update: XOR<AssetUpdateWithoutParentInput, AssetUncheckedUpdateWithoutParentInput>
    create: XOR<AssetCreateWithoutParentInput, AssetUncheckedCreateWithoutParentInput>
  }

  export type AssetUpdateWithWhereUniqueWithoutParentInput = {
    where: AssetWhereUniqueInput
    data: XOR<AssetUpdateWithoutParentInput, AssetUncheckedUpdateWithoutParentInput>
  }

  export type AssetUpdateManyWithWhereWithoutParentInput = {
    where: AssetScalarWhereInput
    data: XOR<AssetUpdateManyMutationInput, AssetUncheckedUpdateManyWithoutParentInput>
  }

  export type SceneAssetUsageUpsertWithWhereUniqueWithoutAssetInput = {
    where: SceneAssetUsageWhereUniqueInput
    update: XOR<SceneAssetUsageUpdateWithoutAssetInput, SceneAssetUsageUncheckedUpdateWithoutAssetInput>
    create: XOR<SceneAssetUsageCreateWithoutAssetInput, SceneAssetUsageUncheckedCreateWithoutAssetInput>
  }

  export type SceneAssetUsageUpdateWithWhereUniqueWithoutAssetInput = {
    where: SceneAssetUsageWhereUniqueInput
    data: XOR<SceneAssetUsageUpdateWithoutAssetInput, SceneAssetUsageUncheckedUpdateWithoutAssetInput>
  }

  export type SceneAssetUsageUpdateManyWithWhereWithoutAssetInput = {
    where: SceneAssetUsageScalarWhereInput
    data: XOR<SceneAssetUsageUpdateManyMutationInput, SceneAssetUsageUncheckedUpdateManyWithoutAssetInput>
  }

  export type ScriptAssetUsageUpsertWithWhereUniqueWithoutAssetInput = {
    where: ScriptAssetUsageWhereUniqueInput
    update: XOR<ScriptAssetUsageUpdateWithoutAssetInput, ScriptAssetUsageUncheckedUpdateWithoutAssetInput>
    create: XOR<ScriptAssetUsageCreateWithoutAssetInput, ScriptAssetUsageUncheckedCreateWithoutAssetInput>
  }

  export type ScriptAssetUsageUpdateWithWhereUniqueWithoutAssetInput = {
    where: ScriptAssetUsageWhereUniqueInput
    data: XOR<ScriptAssetUsageUpdateWithoutAssetInput, ScriptAssetUsageUncheckedUpdateWithoutAssetInput>
  }

  export type ScriptAssetUsageUpdateManyWithWhereWithoutAssetInput = {
    where: ScriptAssetUsageScalarWhereInput
    data: XOR<ScriptAssetUsageUpdateManyMutationInput, ScriptAssetUsageUncheckedUpdateManyWithoutAssetInput>
  }

  export type MaterialAssetUsageUpsertWithWhereUniqueWithoutAssetInput = {
    where: MaterialAssetUsageWhereUniqueInput
    update: XOR<MaterialAssetUsageUpdateWithoutAssetInput, MaterialAssetUsageUncheckedUpdateWithoutAssetInput>
    create: XOR<MaterialAssetUsageCreateWithoutAssetInput, MaterialAssetUsageUncheckedCreateWithoutAssetInput>
  }

  export type MaterialAssetUsageUpdateWithWhereUniqueWithoutAssetInput = {
    where: MaterialAssetUsageWhereUniqueInput
    data: XOR<MaterialAssetUsageUpdateWithoutAssetInput, MaterialAssetUsageUncheckedUpdateWithoutAssetInput>
  }

  export type MaterialAssetUsageUpdateManyWithWhereWithoutAssetInput = {
    where: MaterialAssetUsageScalarWhereInput
    data: XOR<MaterialAssetUsageUpdateManyMutationInput, MaterialAssetUsageUncheckedUpdateManyWithoutAssetInput>
  }

  export type SceneCreateWithoutAssetUsagesInput = {
    id?: string
    name: string
    path: string
    type?: string
    description?: string | null
    isMain?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    sceneData?: NullableJsonNullValueInput | InputJsonValue
    project: ProjectCreateNestedOneWithoutScenesInput
    nodes?: SceneNodeCreateNestedManyWithoutSceneInput
  }

  export type SceneUncheckedCreateWithoutAssetUsagesInput = {
    id?: string
    name: string
    path: string
    type?: string
    projectId: string
    description?: string | null
    isMain?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    sceneData?: NullableJsonNullValueInput | InputJsonValue
    nodes?: SceneNodeUncheckedCreateNestedManyWithoutSceneInput
  }

  export type SceneCreateOrConnectWithoutAssetUsagesInput = {
    where: SceneWhereUniqueInput
    create: XOR<SceneCreateWithoutAssetUsagesInput, SceneUncheckedCreateWithoutAssetUsagesInput>
  }

  export type AssetCreateWithoutSceneUsagesInput = {
    id?: string
    name: string
    type: $Enums.AssetType
    filePath: string
    fileSize: number
    mimeType?: string | null
    checksum?: string | null
    width?: number | null
    height?: number | null
    duration?: number | null
    channels?: number | null
    sampleRate?: number | null
    bitRate?: number | null
    tags?: NullableJsonNullValueInput | InputJsonValue
    version?: string
    dependencies?: NullableJsonNullValueInput | InputJsonValue
    originalName?: string | null
    importedAt?: Date | string
    importSettings?: NullableJsonNullValueInput | InputJsonValue
    thumbnail?: string | null
    preview?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutAssetsInput
    folder?: FolderCreateNestedOneWithoutAssetsInput
    parent?: AssetCreateNestedOneWithoutVersionsInput
    versions?: AssetCreateNestedManyWithoutParentInput
    scriptUsages?: ScriptAssetUsageCreateNestedManyWithoutAssetInput
    materialUsages?: MaterialAssetUsageCreateNestedManyWithoutAssetInput
  }

  export type AssetUncheckedCreateWithoutSceneUsagesInput = {
    id?: string
    name: string
    type: $Enums.AssetType
    filePath: string
    fileSize: number
    mimeType?: string | null
    checksum?: string | null
    width?: number | null
    height?: number | null
    duration?: number | null
    channels?: number | null
    sampleRate?: number | null
    bitRate?: number | null
    projectId: string
    folderId?: string | null
    tags?: NullableJsonNullValueInput | InputJsonValue
    version?: string
    parentId?: string | null
    dependencies?: NullableJsonNullValueInput | InputJsonValue
    originalName?: string | null
    importedAt?: Date | string
    importSettings?: NullableJsonNullValueInput | InputJsonValue
    thumbnail?: string | null
    preview?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    versions?: AssetUncheckedCreateNestedManyWithoutParentInput
    scriptUsages?: ScriptAssetUsageUncheckedCreateNestedManyWithoutAssetInput
    materialUsages?: MaterialAssetUsageUncheckedCreateNestedManyWithoutAssetInput
  }

  export type AssetCreateOrConnectWithoutSceneUsagesInput = {
    where: AssetWhereUniqueInput
    create: XOR<AssetCreateWithoutSceneUsagesInput, AssetUncheckedCreateWithoutSceneUsagesInput>
  }

  export type SceneUpsertWithoutAssetUsagesInput = {
    update: XOR<SceneUpdateWithoutAssetUsagesInput, SceneUncheckedUpdateWithoutAssetUsagesInput>
    create: XOR<SceneCreateWithoutAssetUsagesInput, SceneUncheckedCreateWithoutAssetUsagesInput>
    where?: SceneWhereInput
  }

  export type SceneUpdateToOneWithWhereWithoutAssetUsagesInput = {
    where?: SceneWhereInput
    data: XOR<SceneUpdateWithoutAssetUsagesInput, SceneUncheckedUpdateWithoutAssetUsagesInput>
  }

  export type SceneUpdateWithoutAssetUsagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isMain?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sceneData?: NullableJsonNullValueInput | InputJsonValue
    project?: ProjectUpdateOneRequiredWithoutScenesNestedInput
    nodes?: SceneNodeUpdateManyWithoutSceneNestedInput
  }

  export type SceneUncheckedUpdateWithoutAssetUsagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isMain?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sceneData?: NullableJsonNullValueInput | InputJsonValue
    nodes?: SceneNodeUncheckedUpdateManyWithoutSceneNestedInput
  }

  export type AssetUpsertWithoutSceneUsagesInput = {
    update: XOR<AssetUpdateWithoutSceneUsagesInput, AssetUncheckedUpdateWithoutSceneUsagesInput>
    create: XOR<AssetCreateWithoutSceneUsagesInput, AssetUncheckedCreateWithoutSceneUsagesInput>
    where?: AssetWhereInput
  }

  export type AssetUpdateToOneWithWhereWithoutSceneUsagesInput = {
    where?: AssetWhereInput
    data: XOR<AssetUpdateWithoutSceneUsagesInput, AssetUncheckedUpdateWithoutSceneUsagesInput>
  }

  export type AssetUpdateWithoutSceneUsagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumAssetTypeFieldUpdateOperationsInput | $Enums.AssetType
    filePath?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    checksum?: NullableStringFieldUpdateOperationsInput | string | null
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    duration?: NullableFloatFieldUpdateOperationsInput | number | null
    channels?: NullableIntFieldUpdateOperationsInput | number | null
    sampleRate?: NullableIntFieldUpdateOperationsInput | number | null
    bitRate?: NullableIntFieldUpdateOperationsInput | number | null
    tags?: NullableJsonNullValueInput | InputJsonValue
    version?: StringFieldUpdateOperationsInput | string
    dependencies?: NullableJsonNullValueInput | InputJsonValue
    originalName?: NullableStringFieldUpdateOperationsInput | string | null
    importedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    importSettings?: NullableJsonNullValueInput | InputJsonValue
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    preview?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutAssetsNestedInput
    folder?: FolderUpdateOneWithoutAssetsNestedInput
    parent?: AssetUpdateOneWithoutVersionsNestedInput
    versions?: AssetUpdateManyWithoutParentNestedInput
    scriptUsages?: ScriptAssetUsageUpdateManyWithoutAssetNestedInput
    materialUsages?: MaterialAssetUsageUpdateManyWithoutAssetNestedInput
  }

  export type AssetUncheckedUpdateWithoutSceneUsagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumAssetTypeFieldUpdateOperationsInput | $Enums.AssetType
    filePath?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    checksum?: NullableStringFieldUpdateOperationsInput | string | null
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    duration?: NullableFloatFieldUpdateOperationsInput | number | null
    channels?: NullableIntFieldUpdateOperationsInput | number | null
    sampleRate?: NullableIntFieldUpdateOperationsInput | number | null
    bitRate?: NullableIntFieldUpdateOperationsInput | number | null
    projectId?: StringFieldUpdateOperationsInput | string
    folderId?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableJsonNullValueInput | InputJsonValue
    version?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    dependencies?: NullableJsonNullValueInput | InputJsonValue
    originalName?: NullableStringFieldUpdateOperationsInput | string | null
    importedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    importSettings?: NullableJsonNullValueInput | InputJsonValue
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    preview?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    versions?: AssetUncheckedUpdateManyWithoutParentNestedInput
    scriptUsages?: ScriptAssetUsageUncheckedUpdateManyWithoutAssetNestedInput
    materialUsages?: MaterialAssetUsageUncheckedUpdateManyWithoutAssetNestedInput
  }

  export type ScriptCreateWithoutAssetUsagesInput = {
    id?: string
    name: string
    path: string
    language?: string
    content?: string
    description?: string | null
    isTemplate?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutScriptsInput
  }

  export type ScriptUncheckedCreateWithoutAssetUsagesInput = {
    id?: string
    name: string
    path: string
    language?: string
    content?: string
    projectId: string
    description?: string | null
    isTemplate?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScriptCreateOrConnectWithoutAssetUsagesInput = {
    where: ScriptWhereUniqueInput
    create: XOR<ScriptCreateWithoutAssetUsagesInput, ScriptUncheckedCreateWithoutAssetUsagesInput>
  }

  export type AssetCreateWithoutScriptUsagesInput = {
    id?: string
    name: string
    type: $Enums.AssetType
    filePath: string
    fileSize: number
    mimeType?: string | null
    checksum?: string | null
    width?: number | null
    height?: number | null
    duration?: number | null
    channels?: number | null
    sampleRate?: number | null
    bitRate?: number | null
    tags?: NullableJsonNullValueInput | InputJsonValue
    version?: string
    dependencies?: NullableJsonNullValueInput | InputJsonValue
    originalName?: string | null
    importedAt?: Date | string
    importSettings?: NullableJsonNullValueInput | InputJsonValue
    thumbnail?: string | null
    preview?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutAssetsInput
    folder?: FolderCreateNestedOneWithoutAssetsInput
    parent?: AssetCreateNestedOneWithoutVersionsInput
    versions?: AssetCreateNestedManyWithoutParentInput
    sceneUsages?: SceneAssetUsageCreateNestedManyWithoutAssetInput
    materialUsages?: MaterialAssetUsageCreateNestedManyWithoutAssetInput
  }

  export type AssetUncheckedCreateWithoutScriptUsagesInput = {
    id?: string
    name: string
    type: $Enums.AssetType
    filePath: string
    fileSize: number
    mimeType?: string | null
    checksum?: string | null
    width?: number | null
    height?: number | null
    duration?: number | null
    channels?: number | null
    sampleRate?: number | null
    bitRate?: number | null
    projectId: string
    folderId?: string | null
    tags?: NullableJsonNullValueInput | InputJsonValue
    version?: string
    parentId?: string | null
    dependencies?: NullableJsonNullValueInput | InputJsonValue
    originalName?: string | null
    importedAt?: Date | string
    importSettings?: NullableJsonNullValueInput | InputJsonValue
    thumbnail?: string | null
    preview?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    versions?: AssetUncheckedCreateNestedManyWithoutParentInput
    sceneUsages?: SceneAssetUsageUncheckedCreateNestedManyWithoutAssetInput
    materialUsages?: MaterialAssetUsageUncheckedCreateNestedManyWithoutAssetInput
  }

  export type AssetCreateOrConnectWithoutScriptUsagesInput = {
    where: AssetWhereUniqueInput
    create: XOR<AssetCreateWithoutScriptUsagesInput, AssetUncheckedCreateWithoutScriptUsagesInput>
  }

  export type ScriptUpsertWithoutAssetUsagesInput = {
    update: XOR<ScriptUpdateWithoutAssetUsagesInput, ScriptUncheckedUpdateWithoutAssetUsagesInput>
    create: XOR<ScriptCreateWithoutAssetUsagesInput, ScriptUncheckedCreateWithoutAssetUsagesInput>
    where?: ScriptWhereInput
  }

  export type ScriptUpdateToOneWithWhereWithoutAssetUsagesInput = {
    where?: ScriptWhereInput
    data: XOR<ScriptUpdateWithoutAssetUsagesInput, ScriptUncheckedUpdateWithoutAssetUsagesInput>
  }

  export type ScriptUpdateWithoutAssetUsagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isTemplate?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutScriptsNestedInput
  }

  export type ScriptUncheckedUpdateWithoutAssetUsagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isTemplate?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssetUpsertWithoutScriptUsagesInput = {
    update: XOR<AssetUpdateWithoutScriptUsagesInput, AssetUncheckedUpdateWithoutScriptUsagesInput>
    create: XOR<AssetCreateWithoutScriptUsagesInput, AssetUncheckedCreateWithoutScriptUsagesInput>
    where?: AssetWhereInput
  }

  export type AssetUpdateToOneWithWhereWithoutScriptUsagesInput = {
    where?: AssetWhereInput
    data: XOR<AssetUpdateWithoutScriptUsagesInput, AssetUncheckedUpdateWithoutScriptUsagesInput>
  }

  export type AssetUpdateWithoutScriptUsagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumAssetTypeFieldUpdateOperationsInput | $Enums.AssetType
    filePath?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    checksum?: NullableStringFieldUpdateOperationsInput | string | null
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    duration?: NullableFloatFieldUpdateOperationsInput | number | null
    channels?: NullableIntFieldUpdateOperationsInput | number | null
    sampleRate?: NullableIntFieldUpdateOperationsInput | number | null
    bitRate?: NullableIntFieldUpdateOperationsInput | number | null
    tags?: NullableJsonNullValueInput | InputJsonValue
    version?: StringFieldUpdateOperationsInput | string
    dependencies?: NullableJsonNullValueInput | InputJsonValue
    originalName?: NullableStringFieldUpdateOperationsInput | string | null
    importedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    importSettings?: NullableJsonNullValueInput | InputJsonValue
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    preview?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutAssetsNestedInput
    folder?: FolderUpdateOneWithoutAssetsNestedInput
    parent?: AssetUpdateOneWithoutVersionsNestedInput
    versions?: AssetUpdateManyWithoutParentNestedInput
    sceneUsages?: SceneAssetUsageUpdateManyWithoutAssetNestedInput
    materialUsages?: MaterialAssetUsageUpdateManyWithoutAssetNestedInput
  }

  export type AssetUncheckedUpdateWithoutScriptUsagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumAssetTypeFieldUpdateOperationsInput | $Enums.AssetType
    filePath?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    checksum?: NullableStringFieldUpdateOperationsInput | string | null
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    duration?: NullableFloatFieldUpdateOperationsInput | number | null
    channels?: NullableIntFieldUpdateOperationsInput | number | null
    sampleRate?: NullableIntFieldUpdateOperationsInput | number | null
    bitRate?: NullableIntFieldUpdateOperationsInput | number | null
    projectId?: StringFieldUpdateOperationsInput | string
    folderId?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableJsonNullValueInput | InputJsonValue
    version?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    dependencies?: NullableJsonNullValueInput | InputJsonValue
    originalName?: NullableStringFieldUpdateOperationsInput | string | null
    importedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    importSettings?: NullableJsonNullValueInput | InputJsonValue
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    preview?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    versions?: AssetUncheckedUpdateManyWithoutParentNestedInput
    sceneUsages?: SceneAssetUsageUncheckedUpdateManyWithoutAssetNestedInput
    materialUsages?: MaterialAssetUsageUncheckedUpdateManyWithoutAssetNestedInput
  }

  export type MaterialCreateWithoutAssetUsagesInput = {
    id?: string
    name: string
    type?: string
    albedo?: string | null
    roughness?: number | null
    metalness?: number | null
    emission?: string | null
    albedoMap?: string | null
    normalMap?: string | null
    roughnessMap?: string | null
    metalnessMap?: string | null
    emissionMap?: string | null
    shaderCode?: string | null
    shaderParams?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutMaterialsInput
  }

  export type MaterialUncheckedCreateWithoutAssetUsagesInput = {
    id?: string
    name: string
    type?: string
    projectId: string
    albedo?: string | null
    roughness?: number | null
    metalness?: number | null
    emission?: string | null
    albedoMap?: string | null
    normalMap?: string | null
    roughnessMap?: string | null
    metalnessMap?: string | null
    emissionMap?: string | null
    shaderCode?: string | null
    shaderParams?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MaterialCreateOrConnectWithoutAssetUsagesInput = {
    where: MaterialWhereUniqueInput
    create: XOR<MaterialCreateWithoutAssetUsagesInput, MaterialUncheckedCreateWithoutAssetUsagesInput>
  }

  export type AssetCreateWithoutMaterialUsagesInput = {
    id?: string
    name: string
    type: $Enums.AssetType
    filePath: string
    fileSize: number
    mimeType?: string | null
    checksum?: string | null
    width?: number | null
    height?: number | null
    duration?: number | null
    channels?: number | null
    sampleRate?: number | null
    bitRate?: number | null
    tags?: NullableJsonNullValueInput | InputJsonValue
    version?: string
    dependencies?: NullableJsonNullValueInput | InputJsonValue
    originalName?: string | null
    importedAt?: Date | string
    importSettings?: NullableJsonNullValueInput | InputJsonValue
    thumbnail?: string | null
    preview?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutAssetsInput
    folder?: FolderCreateNestedOneWithoutAssetsInput
    parent?: AssetCreateNestedOneWithoutVersionsInput
    versions?: AssetCreateNestedManyWithoutParentInput
    sceneUsages?: SceneAssetUsageCreateNestedManyWithoutAssetInput
    scriptUsages?: ScriptAssetUsageCreateNestedManyWithoutAssetInput
  }

  export type AssetUncheckedCreateWithoutMaterialUsagesInput = {
    id?: string
    name: string
    type: $Enums.AssetType
    filePath: string
    fileSize: number
    mimeType?: string | null
    checksum?: string | null
    width?: number | null
    height?: number | null
    duration?: number | null
    channels?: number | null
    sampleRate?: number | null
    bitRate?: number | null
    projectId: string
    folderId?: string | null
    tags?: NullableJsonNullValueInput | InputJsonValue
    version?: string
    parentId?: string | null
    dependencies?: NullableJsonNullValueInput | InputJsonValue
    originalName?: string | null
    importedAt?: Date | string
    importSettings?: NullableJsonNullValueInput | InputJsonValue
    thumbnail?: string | null
    preview?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    versions?: AssetUncheckedCreateNestedManyWithoutParentInput
    sceneUsages?: SceneAssetUsageUncheckedCreateNestedManyWithoutAssetInput
    scriptUsages?: ScriptAssetUsageUncheckedCreateNestedManyWithoutAssetInput
  }

  export type AssetCreateOrConnectWithoutMaterialUsagesInput = {
    where: AssetWhereUniqueInput
    create: XOR<AssetCreateWithoutMaterialUsagesInput, AssetUncheckedCreateWithoutMaterialUsagesInput>
  }

  export type MaterialUpsertWithoutAssetUsagesInput = {
    update: XOR<MaterialUpdateWithoutAssetUsagesInput, MaterialUncheckedUpdateWithoutAssetUsagesInput>
    create: XOR<MaterialCreateWithoutAssetUsagesInput, MaterialUncheckedCreateWithoutAssetUsagesInput>
    where?: MaterialWhereInput
  }

  export type MaterialUpdateToOneWithWhereWithoutAssetUsagesInput = {
    where?: MaterialWhereInput
    data: XOR<MaterialUpdateWithoutAssetUsagesInput, MaterialUncheckedUpdateWithoutAssetUsagesInput>
  }

  export type MaterialUpdateWithoutAssetUsagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    albedo?: NullableStringFieldUpdateOperationsInput | string | null
    roughness?: NullableFloatFieldUpdateOperationsInput | number | null
    metalness?: NullableFloatFieldUpdateOperationsInput | number | null
    emission?: NullableStringFieldUpdateOperationsInput | string | null
    albedoMap?: NullableStringFieldUpdateOperationsInput | string | null
    normalMap?: NullableStringFieldUpdateOperationsInput | string | null
    roughnessMap?: NullableStringFieldUpdateOperationsInput | string | null
    metalnessMap?: NullableStringFieldUpdateOperationsInput | string | null
    emissionMap?: NullableStringFieldUpdateOperationsInput | string | null
    shaderCode?: NullableStringFieldUpdateOperationsInput | string | null
    shaderParams?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutMaterialsNestedInput
  }

  export type MaterialUncheckedUpdateWithoutAssetUsagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    albedo?: NullableStringFieldUpdateOperationsInput | string | null
    roughness?: NullableFloatFieldUpdateOperationsInput | number | null
    metalness?: NullableFloatFieldUpdateOperationsInput | number | null
    emission?: NullableStringFieldUpdateOperationsInput | string | null
    albedoMap?: NullableStringFieldUpdateOperationsInput | string | null
    normalMap?: NullableStringFieldUpdateOperationsInput | string | null
    roughnessMap?: NullableStringFieldUpdateOperationsInput | string | null
    metalnessMap?: NullableStringFieldUpdateOperationsInput | string | null
    emissionMap?: NullableStringFieldUpdateOperationsInput | string | null
    shaderCode?: NullableStringFieldUpdateOperationsInput | string | null
    shaderParams?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssetUpsertWithoutMaterialUsagesInput = {
    update: XOR<AssetUpdateWithoutMaterialUsagesInput, AssetUncheckedUpdateWithoutMaterialUsagesInput>
    create: XOR<AssetCreateWithoutMaterialUsagesInput, AssetUncheckedCreateWithoutMaterialUsagesInput>
    where?: AssetWhereInput
  }

  export type AssetUpdateToOneWithWhereWithoutMaterialUsagesInput = {
    where?: AssetWhereInput
    data: XOR<AssetUpdateWithoutMaterialUsagesInput, AssetUncheckedUpdateWithoutMaterialUsagesInput>
  }

  export type AssetUpdateWithoutMaterialUsagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumAssetTypeFieldUpdateOperationsInput | $Enums.AssetType
    filePath?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    checksum?: NullableStringFieldUpdateOperationsInput | string | null
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    duration?: NullableFloatFieldUpdateOperationsInput | number | null
    channels?: NullableIntFieldUpdateOperationsInput | number | null
    sampleRate?: NullableIntFieldUpdateOperationsInput | number | null
    bitRate?: NullableIntFieldUpdateOperationsInput | number | null
    tags?: NullableJsonNullValueInput | InputJsonValue
    version?: StringFieldUpdateOperationsInput | string
    dependencies?: NullableJsonNullValueInput | InputJsonValue
    originalName?: NullableStringFieldUpdateOperationsInput | string | null
    importedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    importSettings?: NullableJsonNullValueInput | InputJsonValue
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    preview?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutAssetsNestedInput
    folder?: FolderUpdateOneWithoutAssetsNestedInput
    parent?: AssetUpdateOneWithoutVersionsNestedInput
    versions?: AssetUpdateManyWithoutParentNestedInput
    sceneUsages?: SceneAssetUsageUpdateManyWithoutAssetNestedInput
    scriptUsages?: ScriptAssetUsageUpdateManyWithoutAssetNestedInput
  }

  export type AssetUncheckedUpdateWithoutMaterialUsagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumAssetTypeFieldUpdateOperationsInput | $Enums.AssetType
    filePath?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    checksum?: NullableStringFieldUpdateOperationsInput | string | null
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    duration?: NullableFloatFieldUpdateOperationsInput | number | null
    channels?: NullableIntFieldUpdateOperationsInput | number | null
    sampleRate?: NullableIntFieldUpdateOperationsInput | number | null
    bitRate?: NullableIntFieldUpdateOperationsInput | number | null
    projectId?: StringFieldUpdateOperationsInput | string
    folderId?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableJsonNullValueInput | InputJsonValue
    version?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    dependencies?: NullableJsonNullValueInput | InputJsonValue
    originalName?: NullableStringFieldUpdateOperationsInput | string | null
    importedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    importSettings?: NullableJsonNullValueInput | InputJsonValue
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    preview?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    versions?: AssetUncheckedUpdateManyWithoutParentNestedInput
    sceneUsages?: SceneAssetUsageUncheckedUpdateManyWithoutAssetNestedInput
    scriptUsages?: ScriptAssetUsageUncheckedUpdateManyWithoutAssetNestedInput
  }

  export type ProjectCreateManyUserInput = {
    id?: string
    name: string
    description?: string | null
    path: string
    version?: string
    engineVersion?: string
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastOpened?: Date | string
    settings?: NullableJsonNullValueInput | InputJsonValue
  }

  export type UserSessionCreateManyUserInput = {
    id?: string
    token: string
    refreshToken?: string | null
    expiresAt: Date | string
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProjectUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    path?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    engineVersion?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastOpened?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    scenes?: SceneUpdateManyWithoutProjectNestedInput
    scripts?: ScriptUpdateManyWithoutProjectNestedInput
    materials?: MaterialUpdateManyWithoutProjectNestedInput
    terrains?: TerrainUpdateManyWithoutProjectNestedInput
    animations?: AnimationUpdateManyWithoutProjectNestedInput
    folders?: FolderUpdateManyWithoutProjectNestedInput
    projectSettings?: ProjectSettingUpdateManyWithoutProjectNestedInput
    assets?: AssetUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    path?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    engineVersion?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastOpened?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: NullableJsonNullValueInput | InputJsonValue
    scenes?: SceneUncheckedUpdateManyWithoutProjectNestedInput
    scripts?: ScriptUncheckedUpdateManyWithoutProjectNestedInput
    materials?: MaterialUncheckedUpdateManyWithoutProjectNestedInput
    terrains?: TerrainUncheckedUpdateManyWithoutProjectNestedInput
    animations?: AnimationUncheckedUpdateManyWithoutProjectNestedInput
    folders?: FolderUncheckedUpdateManyWithoutProjectNestedInput
    projectSettings?: ProjectSettingUncheckedUpdateManyWithoutProjectNestedInput
    assets?: AssetUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    path?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    engineVersion?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastOpened?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: NullableJsonNullValueInput | InputJsonValue
  }

  export type UserSessionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSessionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSessionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SceneCreateManyProjectInput = {
    id?: string
    name: string
    path: string
    type?: string
    description?: string | null
    isMain?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    sceneData?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ScriptCreateManyProjectInput = {
    id?: string
    name: string
    path: string
    language?: string
    content?: string
    description?: string | null
    isTemplate?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MaterialCreateManyProjectInput = {
    id?: string
    name: string
    type?: string
    albedo?: string | null
    roughness?: number | null
    metalness?: number | null
    emission?: string | null
    albedoMap?: string | null
    normalMap?: string | null
    roughnessMap?: string | null
    metalnessMap?: string | null
    emissionMap?: string | null
    shaderCode?: string | null
    shaderParams?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TerrainCreateManyProjectInput = {
    id?: string
    name: string
    width?: number
    height?: number
    scale?: number
    heightmapPath?: string | null
    heightmapData?: NullableJsonNullValueInput | InputJsonValue
    textureLayers?: NullableJsonNullValueInput | InputJsonValue
    brushSettings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AnimationCreateManyProjectInput = {
    id?: string
    name: string
    type?: string
    duration?: number | null
    frameRate?: number | null
    states?: NullableJsonNullValueInput | InputJsonValue
    transitions?: NullableJsonNullValueInput | InputJsonValue
    parameters?: NullableJsonNullValueInput | InputJsonValue
    tracks?: NullableJsonNullValueInput | InputJsonValue
    keyframes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FolderCreateManyProjectInput = {
    id?: string
    name: string
    path: string
    parentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProjectSettingCreateManyProjectInput = {
    id?: string
    key: string
    value: string
    type?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AssetCreateManyProjectInput = {
    id?: string
    name: string
    type: $Enums.AssetType
    filePath: string
    fileSize: number
    mimeType?: string | null
    checksum?: string | null
    width?: number | null
    height?: number | null
    duration?: number | null
    channels?: number | null
    sampleRate?: number | null
    bitRate?: number | null
    folderId?: string | null
    tags?: NullableJsonNullValueInput | InputJsonValue
    version?: string
    parentId?: string | null
    dependencies?: NullableJsonNullValueInput | InputJsonValue
    originalName?: string | null
    importedAt?: Date | string
    importSettings?: NullableJsonNullValueInput | InputJsonValue
    thumbnail?: string | null
    preview?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SceneUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isMain?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sceneData?: NullableJsonNullValueInput | InputJsonValue
    nodes?: SceneNodeUpdateManyWithoutSceneNestedInput
    assetUsages?: SceneAssetUsageUpdateManyWithoutSceneNestedInput
  }

  export type SceneUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isMain?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sceneData?: NullableJsonNullValueInput | InputJsonValue
    nodes?: SceneNodeUncheckedUpdateManyWithoutSceneNestedInput
    assetUsages?: SceneAssetUsageUncheckedUpdateManyWithoutSceneNestedInput
  }

  export type SceneUncheckedUpdateManyWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isMain?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sceneData?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ScriptUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isTemplate?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assetUsages?: ScriptAssetUsageUpdateManyWithoutScriptNestedInput
  }

  export type ScriptUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isTemplate?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assetUsages?: ScriptAssetUsageUncheckedUpdateManyWithoutScriptNestedInput
  }

  export type ScriptUncheckedUpdateManyWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isTemplate?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MaterialUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    albedo?: NullableStringFieldUpdateOperationsInput | string | null
    roughness?: NullableFloatFieldUpdateOperationsInput | number | null
    metalness?: NullableFloatFieldUpdateOperationsInput | number | null
    emission?: NullableStringFieldUpdateOperationsInput | string | null
    albedoMap?: NullableStringFieldUpdateOperationsInput | string | null
    normalMap?: NullableStringFieldUpdateOperationsInput | string | null
    roughnessMap?: NullableStringFieldUpdateOperationsInput | string | null
    metalnessMap?: NullableStringFieldUpdateOperationsInput | string | null
    emissionMap?: NullableStringFieldUpdateOperationsInput | string | null
    shaderCode?: NullableStringFieldUpdateOperationsInput | string | null
    shaderParams?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assetUsages?: MaterialAssetUsageUpdateManyWithoutMaterialNestedInput
  }

  export type MaterialUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    albedo?: NullableStringFieldUpdateOperationsInput | string | null
    roughness?: NullableFloatFieldUpdateOperationsInput | number | null
    metalness?: NullableFloatFieldUpdateOperationsInput | number | null
    emission?: NullableStringFieldUpdateOperationsInput | string | null
    albedoMap?: NullableStringFieldUpdateOperationsInput | string | null
    normalMap?: NullableStringFieldUpdateOperationsInput | string | null
    roughnessMap?: NullableStringFieldUpdateOperationsInput | string | null
    metalnessMap?: NullableStringFieldUpdateOperationsInput | string | null
    emissionMap?: NullableStringFieldUpdateOperationsInput | string | null
    shaderCode?: NullableStringFieldUpdateOperationsInput | string | null
    shaderParams?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assetUsages?: MaterialAssetUsageUncheckedUpdateManyWithoutMaterialNestedInput
  }

  export type MaterialUncheckedUpdateManyWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    albedo?: NullableStringFieldUpdateOperationsInput | string | null
    roughness?: NullableFloatFieldUpdateOperationsInput | number | null
    metalness?: NullableFloatFieldUpdateOperationsInput | number | null
    emission?: NullableStringFieldUpdateOperationsInput | string | null
    albedoMap?: NullableStringFieldUpdateOperationsInput | string | null
    normalMap?: NullableStringFieldUpdateOperationsInput | string | null
    roughnessMap?: NullableStringFieldUpdateOperationsInput | string | null
    metalnessMap?: NullableStringFieldUpdateOperationsInput | string | null
    emissionMap?: NullableStringFieldUpdateOperationsInput | string | null
    shaderCode?: NullableStringFieldUpdateOperationsInput | string | null
    shaderParams?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TerrainUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    scale?: FloatFieldUpdateOperationsInput | number
    heightmapPath?: NullableStringFieldUpdateOperationsInput | string | null
    heightmapData?: NullableJsonNullValueInput | InputJsonValue
    textureLayers?: NullableJsonNullValueInput | InputJsonValue
    brushSettings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TerrainUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    scale?: FloatFieldUpdateOperationsInput | number
    heightmapPath?: NullableStringFieldUpdateOperationsInput | string | null
    heightmapData?: NullableJsonNullValueInput | InputJsonValue
    textureLayers?: NullableJsonNullValueInput | InputJsonValue
    brushSettings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TerrainUncheckedUpdateManyWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    scale?: FloatFieldUpdateOperationsInput | number
    heightmapPath?: NullableStringFieldUpdateOperationsInput | string | null
    heightmapData?: NullableJsonNullValueInput | InputJsonValue
    textureLayers?: NullableJsonNullValueInput | InputJsonValue
    brushSettings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnimationUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    duration?: NullableFloatFieldUpdateOperationsInput | number | null
    frameRate?: NullableIntFieldUpdateOperationsInput | number | null
    states?: NullableJsonNullValueInput | InputJsonValue
    transitions?: NullableJsonNullValueInput | InputJsonValue
    parameters?: NullableJsonNullValueInput | InputJsonValue
    tracks?: NullableJsonNullValueInput | InputJsonValue
    keyframes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnimationUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    duration?: NullableFloatFieldUpdateOperationsInput | number | null
    frameRate?: NullableIntFieldUpdateOperationsInput | number | null
    states?: NullableJsonNullValueInput | InputJsonValue
    transitions?: NullableJsonNullValueInput | InputJsonValue
    parameters?: NullableJsonNullValueInput | InputJsonValue
    tracks?: NullableJsonNullValueInput | InputJsonValue
    keyframes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnimationUncheckedUpdateManyWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    duration?: NullableFloatFieldUpdateOperationsInput | number | null
    frameRate?: NullableIntFieldUpdateOperationsInput | number | null
    states?: NullableJsonNullValueInput | InputJsonValue
    transitions?: NullableJsonNullValueInput | InputJsonValue
    parameters?: NullableJsonNullValueInput | InputJsonValue
    tracks?: NullableJsonNullValueInput | InputJsonValue
    keyframes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FolderUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parent?: FolderUpdateOneWithoutChildrenNestedInput
    children?: FolderUpdateManyWithoutParentNestedInput
    assets?: AssetUpdateManyWithoutFolderNestedInput
  }

  export type FolderUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: FolderUncheckedUpdateManyWithoutParentNestedInput
    assets?: AssetUncheckedUpdateManyWithoutFolderNestedInput
  }

  export type FolderUncheckedUpdateManyWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectSettingUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectSettingUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectSettingUncheckedUpdateManyWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssetUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumAssetTypeFieldUpdateOperationsInput | $Enums.AssetType
    filePath?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    checksum?: NullableStringFieldUpdateOperationsInput | string | null
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    duration?: NullableFloatFieldUpdateOperationsInput | number | null
    channels?: NullableIntFieldUpdateOperationsInput | number | null
    sampleRate?: NullableIntFieldUpdateOperationsInput | number | null
    bitRate?: NullableIntFieldUpdateOperationsInput | number | null
    tags?: NullableJsonNullValueInput | InputJsonValue
    version?: StringFieldUpdateOperationsInput | string
    dependencies?: NullableJsonNullValueInput | InputJsonValue
    originalName?: NullableStringFieldUpdateOperationsInput | string | null
    importedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    importSettings?: NullableJsonNullValueInput | InputJsonValue
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    preview?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    folder?: FolderUpdateOneWithoutAssetsNestedInput
    parent?: AssetUpdateOneWithoutVersionsNestedInput
    versions?: AssetUpdateManyWithoutParentNestedInput
    sceneUsages?: SceneAssetUsageUpdateManyWithoutAssetNestedInput
    scriptUsages?: ScriptAssetUsageUpdateManyWithoutAssetNestedInput
    materialUsages?: MaterialAssetUsageUpdateManyWithoutAssetNestedInput
  }

  export type AssetUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumAssetTypeFieldUpdateOperationsInput | $Enums.AssetType
    filePath?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    checksum?: NullableStringFieldUpdateOperationsInput | string | null
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    duration?: NullableFloatFieldUpdateOperationsInput | number | null
    channels?: NullableIntFieldUpdateOperationsInput | number | null
    sampleRate?: NullableIntFieldUpdateOperationsInput | number | null
    bitRate?: NullableIntFieldUpdateOperationsInput | number | null
    folderId?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableJsonNullValueInput | InputJsonValue
    version?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    dependencies?: NullableJsonNullValueInput | InputJsonValue
    originalName?: NullableStringFieldUpdateOperationsInput | string | null
    importedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    importSettings?: NullableJsonNullValueInput | InputJsonValue
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    preview?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    versions?: AssetUncheckedUpdateManyWithoutParentNestedInput
    sceneUsages?: SceneAssetUsageUncheckedUpdateManyWithoutAssetNestedInput
    scriptUsages?: ScriptAssetUsageUncheckedUpdateManyWithoutAssetNestedInput
    materialUsages?: MaterialAssetUsageUncheckedUpdateManyWithoutAssetNestedInput
  }

  export type AssetUncheckedUpdateManyWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumAssetTypeFieldUpdateOperationsInput | $Enums.AssetType
    filePath?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    checksum?: NullableStringFieldUpdateOperationsInput | string | null
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    duration?: NullableFloatFieldUpdateOperationsInput | number | null
    channels?: NullableIntFieldUpdateOperationsInput | number | null
    sampleRate?: NullableIntFieldUpdateOperationsInput | number | null
    bitRate?: NullableIntFieldUpdateOperationsInput | number | null
    folderId?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableJsonNullValueInput | InputJsonValue
    version?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    dependencies?: NullableJsonNullValueInput | InputJsonValue
    originalName?: NullableStringFieldUpdateOperationsInput | string | null
    importedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    importSettings?: NullableJsonNullValueInput | InputJsonValue
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    preview?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FolderCreateManyParentInput = {
    id?: string
    name: string
    path: string
    projectId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AssetCreateManyFolderInput = {
    id?: string
    name: string
    type: $Enums.AssetType
    filePath: string
    fileSize: number
    mimeType?: string | null
    checksum?: string | null
    width?: number | null
    height?: number | null
    duration?: number | null
    channels?: number | null
    sampleRate?: number | null
    bitRate?: number | null
    projectId: string
    tags?: NullableJsonNullValueInput | InputJsonValue
    version?: string
    parentId?: string | null
    dependencies?: NullableJsonNullValueInput | InputJsonValue
    originalName?: string | null
    importedAt?: Date | string
    importSettings?: NullableJsonNullValueInput | InputJsonValue
    thumbnail?: string | null
    preview?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FolderUpdateWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutFoldersNestedInput
    children?: FolderUpdateManyWithoutParentNestedInput
    assets?: AssetUpdateManyWithoutFolderNestedInput
  }

  export type FolderUncheckedUpdateWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: FolderUncheckedUpdateManyWithoutParentNestedInput
    assets?: AssetUncheckedUpdateManyWithoutFolderNestedInput
  }

  export type FolderUncheckedUpdateManyWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssetUpdateWithoutFolderInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumAssetTypeFieldUpdateOperationsInput | $Enums.AssetType
    filePath?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    checksum?: NullableStringFieldUpdateOperationsInput | string | null
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    duration?: NullableFloatFieldUpdateOperationsInput | number | null
    channels?: NullableIntFieldUpdateOperationsInput | number | null
    sampleRate?: NullableIntFieldUpdateOperationsInput | number | null
    bitRate?: NullableIntFieldUpdateOperationsInput | number | null
    tags?: NullableJsonNullValueInput | InputJsonValue
    version?: StringFieldUpdateOperationsInput | string
    dependencies?: NullableJsonNullValueInput | InputJsonValue
    originalName?: NullableStringFieldUpdateOperationsInput | string | null
    importedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    importSettings?: NullableJsonNullValueInput | InputJsonValue
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    preview?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutAssetsNestedInput
    parent?: AssetUpdateOneWithoutVersionsNestedInput
    versions?: AssetUpdateManyWithoutParentNestedInput
    sceneUsages?: SceneAssetUsageUpdateManyWithoutAssetNestedInput
    scriptUsages?: ScriptAssetUsageUpdateManyWithoutAssetNestedInput
    materialUsages?: MaterialAssetUsageUpdateManyWithoutAssetNestedInput
  }

  export type AssetUncheckedUpdateWithoutFolderInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumAssetTypeFieldUpdateOperationsInput | $Enums.AssetType
    filePath?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    checksum?: NullableStringFieldUpdateOperationsInput | string | null
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    duration?: NullableFloatFieldUpdateOperationsInput | number | null
    channels?: NullableIntFieldUpdateOperationsInput | number | null
    sampleRate?: NullableIntFieldUpdateOperationsInput | number | null
    bitRate?: NullableIntFieldUpdateOperationsInput | number | null
    projectId?: StringFieldUpdateOperationsInput | string
    tags?: NullableJsonNullValueInput | InputJsonValue
    version?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    dependencies?: NullableJsonNullValueInput | InputJsonValue
    originalName?: NullableStringFieldUpdateOperationsInput | string | null
    importedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    importSettings?: NullableJsonNullValueInput | InputJsonValue
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    preview?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    versions?: AssetUncheckedUpdateManyWithoutParentNestedInput
    sceneUsages?: SceneAssetUsageUncheckedUpdateManyWithoutAssetNestedInput
    scriptUsages?: ScriptAssetUsageUncheckedUpdateManyWithoutAssetNestedInput
    materialUsages?: MaterialAssetUsageUncheckedUpdateManyWithoutAssetNestedInput
  }

  export type AssetUncheckedUpdateManyWithoutFolderInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumAssetTypeFieldUpdateOperationsInput | $Enums.AssetType
    filePath?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    checksum?: NullableStringFieldUpdateOperationsInput | string | null
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    duration?: NullableFloatFieldUpdateOperationsInput | number | null
    channels?: NullableIntFieldUpdateOperationsInput | number | null
    sampleRate?: NullableIntFieldUpdateOperationsInput | number | null
    bitRate?: NullableIntFieldUpdateOperationsInput | number | null
    projectId?: StringFieldUpdateOperationsInput | string
    tags?: NullableJsonNullValueInput | InputJsonValue
    version?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    dependencies?: NullableJsonNullValueInput | InputJsonValue
    originalName?: NullableStringFieldUpdateOperationsInput | string | null
    importedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    importSettings?: NullableJsonNullValueInput | InputJsonValue
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    preview?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SceneNodeCreateManySceneInput = {
    id?: string
    uuid: string
    name: string
    type: string
    parentId?: string | null
    position: JsonNullValueInput | InputJsonValue
    rotation: JsonNullValueInput | InputJsonValue
    scale: JsonNullValueInput | InputJsonValue
    visible?: boolean
    properties?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SceneAssetUsageCreateManySceneInput = {
    id?: string
    assetId: string
    usage: string
  }

  export type SceneNodeUpdateWithoutSceneInput = {
    id?: StringFieldUpdateOperationsInput | string
    uuid?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    position?: JsonNullValueInput | InputJsonValue
    rotation?: JsonNullValueInput | InputJsonValue
    scale?: JsonNullValueInput | InputJsonValue
    visible?: BoolFieldUpdateOperationsInput | boolean
    properties?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parent?: SceneNodeUpdateOneWithoutChildrenNestedInput
    children?: SceneNodeUpdateManyWithoutParentNestedInput
  }

  export type SceneNodeUncheckedUpdateWithoutSceneInput = {
    id?: StringFieldUpdateOperationsInput | string
    uuid?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    position?: JsonNullValueInput | InputJsonValue
    rotation?: JsonNullValueInput | InputJsonValue
    scale?: JsonNullValueInput | InputJsonValue
    visible?: BoolFieldUpdateOperationsInput | boolean
    properties?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: SceneNodeUncheckedUpdateManyWithoutParentNestedInput
  }

  export type SceneNodeUncheckedUpdateManyWithoutSceneInput = {
    id?: StringFieldUpdateOperationsInput | string
    uuid?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    position?: JsonNullValueInput | InputJsonValue
    rotation?: JsonNullValueInput | InputJsonValue
    scale?: JsonNullValueInput | InputJsonValue
    visible?: BoolFieldUpdateOperationsInput | boolean
    properties?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SceneAssetUsageUpdateWithoutSceneInput = {
    id?: StringFieldUpdateOperationsInput | string
    usage?: StringFieldUpdateOperationsInput | string
    asset?: AssetUpdateOneRequiredWithoutSceneUsagesNestedInput
  }

  export type SceneAssetUsageUncheckedUpdateWithoutSceneInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetId?: StringFieldUpdateOperationsInput | string
    usage?: StringFieldUpdateOperationsInput | string
  }

  export type SceneAssetUsageUncheckedUpdateManyWithoutSceneInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetId?: StringFieldUpdateOperationsInput | string
    usage?: StringFieldUpdateOperationsInput | string
  }

  export type SceneNodeCreateManyParentInput = {
    id?: string
    uuid: string
    name: string
    type: string
    sceneId: string
    position: JsonNullValueInput | InputJsonValue
    rotation: JsonNullValueInput | InputJsonValue
    scale: JsonNullValueInput | InputJsonValue
    visible?: boolean
    properties?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SceneNodeUpdateWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    uuid?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    position?: JsonNullValueInput | InputJsonValue
    rotation?: JsonNullValueInput | InputJsonValue
    scale?: JsonNullValueInput | InputJsonValue
    visible?: BoolFieldUpdateOperationsInput | boolean
    properties?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    scene?: SceneUpdateOneRequiredWithoutNodesNestedInput
    children?: SceneNodeUpdateManyWithoutParentNestedInput
  }

  export type SceneNodeUncheckedUpdateWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    uuid?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    sceneId?: StringFieldUpdateOperationsInput | string
    position?: JsonNullValueInput | InputJsonValue
    rotation?: JsonNullValueInput | InputJsonValue
    scale?: JsonNullValueInput | InputJsonValue
    visible?: BoolFieldUpdateOperationsInput | boolean
    properties?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: SceneNodeUncheckedUpdateManyWithoutParentNestedInput
  }

  export type SceneNodeUncheckedUpdateManyWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    uuid?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    sceneId?: StringFieldUpdateOperationsInput | string
    position?: JsonNullValueInput | InputJsonValue
    rotation?: JsonNullValueInput | InputJsonValue
    scale?: JsonNullValueInput | InputJsonValue
    visible?: BoolFieldUpdateOperationsInput | boolean
    properties?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScriptAssetUsageCreateManyScriptInput = {
    id?: string
    assetId: string
    usage: string
  }

  export type ScriptAssetUsageUpdateWithoutScriptInput = {
    id?: StringFieldUpdateOperationsInput | string
    usage?: StringFieldUpdateOperationsInput | string
    asset?: AssetUpdateOneRequiredWithoutScriptUsagesNestedInput
  }

  export type ScriptAssetUsageUncheckedUpdateWithoutScriptInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetId?: StringFieldUpdateOperationsInput | string
    usage?: StringFieldUpdateOperationsInput | string
  }

  export type ScriptAssetUsageUncheckedUpdateManyWithoutScriptInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetId?: StringFieldUpdateOperationsInput | string
    usage?: StringFieldUpdateOperationsInput | string
  }

  export type MaterialAssetUsageCreateManyMaterialInput = {
    id?: string
    assetId: string
    usage: string
  }

  export type MaterialAssetUsageUpdateWithoutMaterialInput = {
    id?: StringFieldUpdateOperationsInput | string
    usage?: StringFieldUpdateOperationsInput | string
    asset?: AssetUpdateOneRequiredWithoutMaterialUsagesNestedInput
  }

  export type MaterialAssetUsageUncheckedUpdateWithoutMaterialInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetId?: StringFieldUpdateOperationsInput | string
    usage?: StringFieldUpdateOperationsInput | string
  }

  export type MaterialAssetUsageUncheckedUpdateManyWithoutMaterialInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetId?: StringFieldUpdateOperationsInput | string
    usage?: StringFieldUpdateOperationsInput | string
  }

  export type AssetCreateManyParentInput = {
    id?: string
    name: string
    type: $Enums.AssetType
    filePath: string
    fileSize: number
    mimeType?: string | null
    checksum?: string | null
    width?: number | null
    height?: number | null
    duration?: number | null
    channels?: number | null
    sampleRate?: number | null
    bitRate?: number | null
    projectId: string
    folderId?: string | null
    tags?: NullableJsonNullValueInput | InputJsonValue
    version?: string
    dependencies?: NullableJsonNullValueInput | InputJsonValue
    originalName?: string | null
    importedAt?: Date | string
    importSettings?: NullableJsonNullValueInput | InputJsonValue
    thumbnail?: string | null
    preview?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SceneAssetUsageCreateManyAssetInput = {
    id?: string
    sceneId: string
    usage: string
  }

  export type ScriptAssetUsageCreateManyAssetInput = {
    id?: string
    scriptId: string
    usage: string
  }

  export type MaterialAssetUsageCreateManyAssetInput = {
    id?: string
    materialId: string
    usage: string
  }

  export type AssetUpdateWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumAssetTypeFieldUpdateOperationsInput | $Enums.AssetType
    filePath?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    checksum?: NullableStringFieldUpdateOperationsInput | string | null
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    duration?: NullableFloatFieldUpdateOperationsInput | number | null
    channels?: NullableIntFieldUpdateOperationsInput | number | null
    sampleRate?: NullableIntFieldUpdateOperationsInput | number | null
    bitRate?: NullableIntFieldUpdateOperationsInput | number | null
    tags?: NullableJsonNullValueInput | InputJsonValue
    version?: StringFieldUpdateOperationsInput | string
    dependencies?: NullableJsonNullValueInput | InputJsonValue
    originalName?: NullableStringFieldUpdateOperationsInput | string | null
    importedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    importSettings?: NullableJsonNullValueInput | InputJsonValue
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    preview?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutAssetsNestedInput
    folder?: FolderUpdateOneWithoutAssetsNestedInput
    versions?: AssetUpdateManyWithoutParentNestedInput
    sceneUsages?: SceneAssetUsageUpdateManyWithoutAssetNestedInput
    scriptUsages?: ScriptAssetUsageUpdateManyWithoutAssetNestedInput
    materialUsages?: MaterialAssetUsageUpdateManyWithoutAssetNestedInput
  }

  export type AssetUncheckedUpdateWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumAssetTypeFieldUpdateOperationsInput | $Enums.AssetType
    filePath?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    checksum?: NullableStringFieldUpdateOperationsInput | string | null
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    duration?: NullableFloatFieldUpdateOperationsInput | number | null
    channels?: NullableIntFieldUpdateOperationsInput | number | null
    sampleRate?: NullableIntFieldUpdateOperationsInput | number | null
    bitRate?: NullableIntFieldUpdateOperationsInput | number | null
    projectId?: StringFieldUpdateOperationsInput | string
    folderId?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableJsonNullValueInput | InputJsonValue
    version?: StringFieldUpdateOperationsInput | string
    dependencies?: NullableJsonNullValueInput | InputJsonValue
    originalName?: NullableStringFieldUpdateOperationsInput | string | null
    importedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    importSettings?: NullableJsonNullValueInput | InputJsonValue
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    preview?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    versions?: AssetUncheckedUpdateManyWithoutParentNestedInput
    sceneUsages?: SceneAssetUsageUncheckedUpdateManyWithoutAssetNestedInput
    scriptUsages?: ScriptAssetUsageUncheckedUpdateManyWithoutAssetNestedInput
    materialUsages?: MaterialAssetUsageUncheckedUpdateManyWithoutAssetNestedInput
  }

  export type AssetUncheckedUpdateManyWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumAssetTypeFieldUpdateOperationsInput | $Enums.AssetType
    filePath?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    checksum?: NullableStringFieldUpdateOperationsInput | string | null
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    duration?: NullableFloatFieldUpdateOperationsInput | number | null
    channels?: NullableIntFieldUpdateOperationsInput | number | null
    sampleRate?: NullableIntFieldUpdateOperationsInput | number | null
    bitRate?: NullableIntFieldUpdateOperationsInput | number | null
    projectId?: StringFieldUpdateOperationsInput | string
    folderId?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableJsonNullValueInput | InputJsonValue
    version?: StringFieldUpdateOperationsInput | string
    dependencies?: NullableJsonNullValueInput | InputJsonValue
    originalName?: NullableStringFieldUpdateOperationsInput | string | null
    importedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    importSettings?: NullableJsonNullValueInput | InputJsonValue
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    preview?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SceneAssetUsageUpdateWithoutAssetInput = {
    id?: StringFieldUpdateOperationsInput | string
    usage?: StringFieldUpdateOperationsInput | string
    scene?: SceneUpdateOneRequiredWithoutAssetUsagesNestedInput
  }

  export type SceneAssetUsageUncheckedUpdateWithoutAssetInput = {
    id?: StringFieldUpdateOperationsInput | string
    sceneId?: StringFieldUpdateOperationsInput | string
    usage?: StringFieldUpdateOperationsInput | string
  }

  export type SceneAssetUsageUncheckedUpdateManyWithoutAssetInput = {
    id?: StringFieldUpdateOperationsInput | string
    sceneId?: StringFieldUpdateOperationsInput | string
    usage?: StringFieldUpdateOperationsInput | string
  }

  export type ScriptAssetUsageUpdateWithoutAssetInput = {
    id?: StringFieldUpdateOperationsInput | string
    usage?: StringFieldUpdateOperationsInput | string
    script?: ScriptUpdateOneRequiredWithoutAssetUsagesNestedInput
  }

  export type ScriptAssetUsageUncheckedUpdateWithoutAssetInput = {
    id?: StringFieldUpdateOperationsInput | string
    scriptId?: StringFieldUpdateOperationsInput | string
    usage?: StringFieldUpdateOperationsInput | string
  }

  export type ScriptAssetUsageUncheckedUpdateManyWithoutAssetInput = {
    id?: StringFieldUpdateOperationsInput | string
    scriptId?: StringFieldUpdateOperationsInput | string
    usage?: StringFieldUpdateOperationsInput | string
  }

  export type MaterialAssetUsageUpdateWithoutAssetInput = {
    id?: StringFieldUpdateOperationsInput | string
    usage?: StringFieldUpdateOperationsInput | string
    material?: MaterialUpdateOneRequiredWithoutAssetUsagesNestedInput
  }

  export type MaterialAssetUsageUncheckedUpdateWithoutAssetInput = {
    id?: StringFieldUpdateOperationsInput | string
    materialId?: StringFieldUpdateOperationsInput | string
    usage?: StringFieldUpdateOperationsInput | string
  }

  export type MaterialAssetUsageUncheckedUpdateManyWithoutAssetInput = {
    id?: StringFieldUpdateOperationsInput | string
    materialId?: StringFieldUpdateOperationsInput | string
    usage?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}