// QAQ Game Engine Database Schema
// This schema defines the database structure for storing project data

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ============================================================================
// User Management and Authentication
// ============================================================================

model User {
  id        String  @id @default(cuid())
  email     String  @unique
  username  String? @unique
  firstName String?
  lastName  String?
  password  String // Hashed password
  avatar    String? // Avatar image URL

  // Account status
  isActive   Boolean @default(true)
  isVerified Boolean @default(false)

  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  lastLoginAt DateTime?

  // Relations
  projects Project[]
  sessions UserSession[]

  @@map("users")
}

model UserSession {
  id           String   @id @default(cuid())
  userId       String
  token        String   @unique
  refreshToken String?  @unique
  expiresAt    DateTime

  // Session metadata
  ipAddress String?
  userAgent String?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

// ============================================================================
// Project Management
// ============================================================================

model Project {
  id            String  @id @default(cuid())
  name          String
  description   String?
  path          String  @unique
  version       String  @default("1.0.0")
  engineVersion String  @default("1.0.0")

  // User ownership
  userId   String
  isPublic Boolean @default(false)

  // Timestamps
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  lastOpened DateTime @default(now())

  // Project settings
  settings Json? // Store project-specific settings as JSON

  // Relations
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  scenes          Scene[]
  scripts         Script[]
  materials       Material[]
  terrains        Terrain[]
  animations      Animation[]
  folders         Folder[]
  projectSettings ProjectSetting[]
  assets          Asset[]

  @@map("projects")
}

// ============================================================================
// File System Structure
// ============================================================================

model Folder {
  id        String  @id @default(cuid())
  name      String
  path      String
  parentId  String?
  projectId String

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  project  Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  parent   Folder?  @relation("FolderHierarchy", fields: [parentId], references: [id])
  children Folder[] @relation("FolderHierarchy")
  assets   Asset[]

  @@unique([projectId, path])
  @@map("folders")
}

// ============================================================================
// Scene Management
// ============================================================================

model Scene {
  id        String @id @default(cuid())
  name      String
  path      String
  type      String @default("3d") // "3d", "2d", "ui"
  projectId String

  // Scene metadata
  description String?
  isMain      Boolean @default(false)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Scene data (stored as JSON for flexibility)
  sceneData Json? // Complete scene tree structure

  // Relations
  project     Project           @relation(fields: [projectId], references: [id], onDelete: Cascade)
  nodes       SceneNode[]
  assetUsages SceneAssetUsage[]

  @@unique([projectId, path])
  @@map("scenes")
}

model SceneNode {
  id       String  @id @default(cuid())
  uuid     String  @unique // Node UUID for runtime identification
  name     String
  type     String // Node3D, MeshInstance3D, Camera3D, etc.
  sceneId  String
  parentId String?

  // Transform data
  position Json // {x, y, z}
  rotation Json // {x, y, z}
  scale    Json // {x, y, z}

  // Node properties
  visible    Boolean @default(true)
  properties Json? // Additional node-specific properties

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  scene    Scene       @relation(fields: [sceneId], references: [id], onDelete: Cascade)
  parent   SceneNode?  @relation("NodeHierarchy", fields: [parentId], references: [id])
  children SceneNode[] @relation("NodeHierarchy")

  @@map("scene_nodes")
}

// ============================================================================
// Script Management
// ============================================================================

model Script {
  id        String @id @default(cuid())
  name      String
  path      String
  language  String @default("typescript") // "typescript", "javascript", "gdscript"
  content   String @default("")
  projectId String

  // Script metadata
  description String?
  isTemplate  Boolean @default(false)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  project     Project            @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assetUsages ScriptAssetUsage[]

  @@unique([projectId, path])
  @@map("scripts")
}

// ============================================================================
// Material System
// ============================================================================

model Material {
  id        String @id @default(cuid())
  name      String
  type      String @default("standard") // "basic", "lambert", "phong", "standard", "physical"
  projectId String

  // Material properties
  albedo    String? // Color hex value
  roughness Float?  @default(0.5)
  metalness Float?  @default(0.0)
  emission  String? // Emission color

  // Texture paths
  albedoMap    String?
  normalMap    String?
  roughnessMap String?
  metalnessMap String?
  emissionMap  String?

  // Shader data
  shaderCode   String?
  shaderParams Json?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  project     Project              @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assetUsages MaterialAssetUsage[]

  @@unique([projectId, name])
  @@map("materials")
}

// ============================================================================
// Terrain System
// ============================================================================

model Terrain {
  id        String @id @default(cuid())
  name      String
  projectId String

  // Terrain properties
  width  Int   @default(512)
  height Int   @default(512)
  scale  Float @default(1.0)

  // Heightmap data
  heightmapPath String?
  heightmapData Json? // Store heightmap as JSON array if small

  // Texture layers
  textureLayers Json? // Array of texture layer configurations

  // Brush settings
  brushSettings Json? // Terrain editing brush configurations

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, name])
  @@map("terrains")
}

// ============================================================================
// Animation System
// ============================================================================

model Animation {
  id        String @id @default(cuid())
  name      String
  type      String @default("state_machine") // "state_machine", "timeline", "skeletal"
  projectId String

  // Animation data
  duration  Float? @default(1.0)
  frameRate Int?   @default(30)

  // State machine data (for state machine animations)
  states      Json? // Array of animation states
  transitions Json? // Array of state transitions
  parameters  Json? // Animation parameters

  // Timeline data (for timeline animations)
  tracks    Json? // Animation tracks
  keyframes Json? // Keyframe data

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, name])
  @@map("animations")
}

// ============================================================================
// Project Settings and Metadata
// ============================================================================

model ProjectSetting {
  id        String @id @default(cuid())
  key       String
  value     String
  type      String @default("string") // "string", "number", "boolean", "json"
  projectId String

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, key])
  @@map("project_settings")
}

// ============================================================================
// Enhanced Asset Management System
// ============================================================================

model Asset {
  id       String    @id @default(cuid())
  name     String
  type     AssetType
  filePath String // Relative path within project
  fileSize Int // File size in bytes
  mimeType String? // MIME type for web assets
  checksum String? // File integrity checksum

  // Asset metadata
  width      Int? // For images/videos
  height     Int? // For images/videos
  duration   Float? // For audio/video (seconds)
  channels   Int? // For audio files
  sampleRate Int? // For audio files
  bitRate    Int? // For audio/video files

  // Asset organization
  projectId String
  folderId  String? // Optional folder organization
  tags      Json? // Asset tags for searching (stored as JSON array)

  // Asset versions and dependencies
  version      String  @default("1.0.0")
  parentId     String? // For asset variants/versions
  dependencies Json? // Asset dependency IDs (stored as JSON array)

  // Import information
  originalName   String?
  importedAt     DateTime @default(now())
  importSettings Json? // Import configuration

  // Thumbnails and previews
  thumbnail String? // Thumbnail file path
  preview   String? // Preview file path

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  project  Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  folder   Folder? @relation(fields: [folderId], references: [id], onDelete: SetNull)
  parent   Asset?  @relation("AssetVersions", fields: [parentId], references: [id])
  versions Asset[] @relation("AssetVersions")

  // Asset usage tracking
  sceneUsages    SceneAssetUsage[]
  scriptUsages   ScriptAssetUsage[]
  materialUsages MaterialAssetUsage[]

  // Constraints
  @@unique([projectId, filePath])
  @@index([projectId, type])
  @@index([projectId, folderId])
  @@index([type, mimeType])
  @@map("assets")
}

enum AssetType {
  TEXTURE
  MODEL
  AUDIO
  VIDEO
  SCRIPT
  SHADER
  MATERIAL
  ANIMATION
  FONT
  DATA
  SCENE
  PREFAB
  PLUGIN
  DOCUMENT
  OTHER
}

// Asset usage tracking tables
model SceneAssetUsage {
  id      String @id @default(cuid())
  sceneId String
  assetId String
  usage   String // "texture", "model", "audio", etc.

  scene Scene @relation(fields: [sceneId], references: [id], onDelete: Cascade)
  asset Asset @relation(fields: [assetId], references: [id], onDelete: Cascade)

  @@unique([sceneId, assetId])
  @@map("scene_asset_usage")
}

model ScriptAssetUsage {
  id       String @id @default(cuid())
  scriptId String
  assetId  String
  usage    String // "import", "reference", etc.

  script Script @relation(fields: [scriptId], references: [id], onDelete: Cascade)
  asset  Asset  @relation(fields: [assetId], references: [id], onDelete: Cascade)

  @@unique([scriptId, assetId])
  @@map("script_asset_usage")
}

model MaterialAssetUsage {
  id         String @id @default(cuid())
  materialId String
  assetId    String
  usage      String // "diffuse", "normal", "roughness", etc.

  material Material @relation(fields: [materialId], references: [id], onDelete: Cascade)
  asset    Asset    @relation(fields: [assetId], references: [id], onDelete: Cascade)

  @@unique([materialId, assetId])
  @@map("material_asset_usage")
}
